
final_proj.elf:     file format elf32-littlenios2
final_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000057a0 memsz 0x000057a0 flags r-x
    LOAD off    0x000067c0 vaddr 0x100057c0 paddr 0x10006ad4 align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00007de8 vaddr 0x10007de8 paddr 0x10007de8 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004dbc  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007d4  10004fec  10004fec  00005fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  100057c0  10006ad4  000067c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  10007de8  10007de8  00007de8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00007ad4  2**0
                  CONTENTS
  7 .sdram        00000000  10007f0c  10007f0c  00007ad4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007ad4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000738  00000000  00000000  00007af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009558  00000000  00000000  00008230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003586  00000000  00000000  00011788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003bc2  00000000  00000000  00014d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000104c  00000000  00000000  000188d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002149  00000000  00000000  0001991c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000170f  00000000  00000000  0001ba65  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0001d174  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000300  00000000  00000000  0001d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001f4d2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001f4d5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001f4e1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001f4e2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001f4e3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001f4e7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001f4eb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0001f4ef  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0001f4fa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0001f505  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0001f510  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0001f519  2**0
                  CONTENTS, READONLY
 30 .jdi          0000535b  00000000  00000000  0001f558  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007265a  00000000  00000000  000248b3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10004fec l    d  .rodata	00000000 .rodata
100057c0 l    d  .rwdata	00000000 .rwdata
10007de8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10007f0c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_proj_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10007de8 l     O .bss	00000002 ctl_reg.3589
10007dea l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10002444 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
100057c0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
10002ce4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10002e7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10002fb8 l     F .text	00000034 alt_dev_reg
100058a0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10003294 l     F .text	0000020c altera_avalon_jtag_uart_irq
100034a0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
10003d5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10003e90 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10003ebc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000431c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000447c l     F .text	0000003c alt_get_errno
100044b8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10007e08 g     O .bss	00000004 alt_instruction_exception_handler
10002dd0 g     F .text	0000007c alt_main
10002394 g     F .text	00000080 _puts_r
10007e0c g     O .bss	00000100 alt_irq
10006ad4 g       *ABS*	00000000 __flash_rwdata_start
10002348 g     F .text	0000004c printf
1000220c g     F .text	00000080 UsbGetRetryCnt
1000026c g     F .text	00000088 IO_init
10004928 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10007dec g     O .bss	00000004 errno
10007df4 g     O .bss	00000004 alt_argv
1000eaa8 g       *ABS*	00000000 _gp
10002e4c g     F .text	00000030 usleep
10006928 g     O .rwdata	00000180 alt_fd_list
1000494c g     F .text	00000090 alt_find_dev
10004ca8 g     F .text	00000028 memcpy
10004400 g     F .text	0000007c alt_io_redirect
10004fec g       *ABS*	00000000 __DTOR_END__
10002414 g     F .text	00000014 puts
10004ba8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10003698 g     F .text	0000021c altera_avalon_jtag_uart_read
1000230c g     F .text	0000003c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002c00 g     F .text	00000064 .hidden __udivsi3
10001898 g     F .text	00000268 UsbGetConfigDesc2
10006ac0 g     O .rwdata	00000004 alt_max_fd
10006aa8 g     O .rwdata	00000004 _global_impure_ptr
10007f0c g       *ABS*	00000000 __bss_end
1000422c g     F .text	000000f0 alt_iic_isr_register
10004820 g     F .text	00000108 alt_tick
100012e8 g     F .text	00000100 UsbSetAddress
100041e0 g     F .text	0000004c alt_ic_irq_enabled
10004784 g     F .text	0000009c alt_alarm_stop
10007dfc g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10006900 g     O .rwdata	00000028 alt_dev_null
10003e70 g     F .text	00000020 alt_dcache_flush_all
10000364 g     F .text	00000068 IO_read
10006ad4 g       *ABS*	00000000 __ram_rwdata_end
10006ab8 g     O .rwdata	00000008 alt_dev_list
10002eb8 g     F .text	00000100 write
100057c0 g       *ABS*	00000000 __ram_rodata_end
1000228c g     F .text	00000080 UsbPrintMem
10002c64 g     F .text	00000058 .hidden __umodsi3
10007f0c g       *ABS*	00000000 end
100031d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10004fec g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100038b4 g     F .text	00000224 altera_avalon_jtag_uart_write
100024b0 g     F .text	0000052c ___vfprintf_internal_r
10001c00 g     F .text	00000100 UsbClassRequest
10004e28 g     F .text	00000190 __call_exitprocs
10000230 g     F .text	0000003c _start
10007e00 g     O .bss	00000004 _alt_tick_rate
10007e04 g     O .bss	00000004 _alt_nticks
10003024 g     F .text	0000004c alt_sys_init
10004cd0 g     F .text	00000158 __register_exitproc
10003540 g     F .text	00000068 altera_avalon_jtag_uart_close
10002cbc g     F .text	00000028 .hidden __mulsi3
100057c0 g       *ABS*	00000000 __ram_rwdata_start
10004fec g       *ABS*	00000000 __ram_rodata_start
100013e8 g     F .text	00000148 UsbGetDeviceDesc1
10003070 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10004ae4 g     F .text	000000c4 alt_get_fd
10003c04 g     F .text	00000158 alt_busy_sleep
10004c78 g     F .text	00000030 memcmp
10003130 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10007f0c g       *ABS*	00000000 __alt_stack_base
10003180 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10002188 g     F .text	00000084 UsbWaitTDListDone
100049dc g     F .text	00000108 alt_find_file
10003ef8 g     F .text	000000a4 alt_dev_llist_insert
100029f8 g     F .text	000000b8 __sfvwrite_small_dev
10007de8 g       *ABS*	00000000 __bss_start
100003cc g     F .text	00000dc4 main
10007df8 g     O .bss	00000004 alt_envp
100030d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001b00 g     F .text	00000100 UsbSetConfig
10006ac4 g     O .rwdata	00000004 alt_errno
10002b08 g     F .text	00000084 .hidden __divsi3
10001d00 g     F .text	00000148 UsbGetHidDesc
10004fec g       *ABS*	00000000 __CTOR_END__
10004fec g       *ABS*	00000000 __flash_rodata_start
10004fec g       *ABS*	00000000 __DTOR_LIST__
100011e8 g     F .text	0000004c UsbRead
10002fec g     F .text	00000038 alt_irq_init
10004700 g     F .text	00000084 alt_release_fd
10004c44 g     F .text	00000014 atexit
10002ab0 g     F .text	00000058 _write_r
10006aac g     O .rwdata	00000004 _impure_ptr
10007df0 g     O .bss	00000004 alt_argc
10003ffc g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10006ab0 g     O .rwdata	00000008 alt_fs_list
10001e48 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000407c g     F .text	00000050 alt_ic_isr_register
10006ad4 g       *ABS*	00000000 _edata
10007f0c g       *ABS*	00000000 _end
10001190 g     F .text	00000058 UsbWrite
10000230 g       *ABS*	00000000 __ram_exceptions_end
100035a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10004154 g     F .text	0000008c alt_ic_irq_disable
10004c58 g     F .text	00000020 exit
10002b8c g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
100002f4 g     F .text	00000070 IO_write
10004fb8 g     F .text	00000034 _exit
10003ad8 g     F .text	0000012c alt_alarm_start
10002428 g     F .text	0000001c strlen
100045a4 g     F .text	0000015c open
1000405c g     F .text	00000020 alt_icache_flush_all
10006ac8 g     O .rwdata	00000004 alt_priority_mask
100040cc g     F .text	00000088 alt_ic_irq_enable
100029dc g     F .text	0000001c __vfprintf_internal
10001708 g     F .text	00000190 UsbGetConfigDesc1
10006acc g     O .rwdata	00000008 alt_alarm_list
10003f9c g     F .text	00000060 _do_ctors
10001234 g     F .text	000000b4 UsbSoftReset
10003d98 g     F .text	000000d8 close
10001530 g     F .text	000001d8 UsbGetDeviceDesc2
10002d4c g     F .text	00000084 alt_load



Disassembly of section .entry:

10000000 <__reset>:
10000000:	00440034 	movhi	at,4096
10000004:	08408c14 	ori	at,at,560
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:
10000020:	deffed04 	addi	sp,sp,-76
10000024:	dfc00015 	stw	ra,0(sp)
10000028:	d8400215 	stw	at,8(sp)
1000002c:	d8800315 	stw	r2,12(sp)
10000030:	d8c00415 	stw	r3,16(sp)
10000034:	d9000515 	stw	r4,20(sp)
10000038:	d9400615 	stw	r5,24(sp)
1000003c:	d9800715 	stw	r6,28(sp)
10000040:	d9c00815 	stw	r7,32(sp)
10000044:	000b307a 	rdctl	r5,estatus
10000048:	da000915 	stw	r8,36(sp)
1000004c:	da400a15 	stw	r9,40(sp)
10000050:	da800b15 	stw	r10,44(sp)
10000054:	dac00c15 	stw	r11,48(sp)
10000058:	db000d15 	stw	r12,52(sp)
1000005c:	db400e15 	stw	r13,56(sp)
10000060:	db800f15 	stw	r14,60(sp)
10000064:	dbc01015 	stw	r15,64(sp)
10000068:	d9401115 	stw	r5,68(sp)
1000006c:	ebffff04 	addi	r15,ea,-4
10000070:	dbc01215 	stw	r15,72(sp)
10000074:	0009313a 	rdctl	r4,ipending
10000078:	2880004c 	andi	r2,r5,1
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
10000084:	00000fc0 	call	100000fc <alt_irq_handler>
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
1000008c:	df401215 	stw	ea,72(sp)
10000090:	e8bfff17 	ldw	r2,-4(ea)
10000094:	e93fff04 	addi	r4,ea,-4
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>
100000a0:	ebffff04 	addi	r15,ea,-4
100000a4:	dbc01215 	stw	r15,72(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
100000ac:	df401217 	ldw	ea,72(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)
100000b4:	2801707a 	wrctl	estatus,r5
100000b8:	d8400217 	ldw	at,8(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)
100000d4:	da000917 	ldw	r8,36(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
100000f4:	dec01304 	addi	sp,sp,76
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
1000010c:	0001883a 	nop
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)
10000118:	e0bffe17 	ldw	r2,-8(fp)
1000011c:	e0bffb15 	stw	r2,-20(fp)
10000120:	e03ffd15 	stw	zero,-12(fp)
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
1000013c:	00840034 	movhi	r2,4096
10000140:	109f8304 	addi	r2,r2,32268
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840034 	movhi	r2,4096
10000158:	109f8304 	addi	r2,r2,32268
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
10000178:	0001883a 	nop
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>
100001a8:	e0bffb15 	stw	r2,-20(fp)
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>
100001b4:	0001883a 	nop
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
100001ec:	e03ffe15 	stw	zero,-8(fp)
100001f0:	d0a4d817 	ldw	r2,-27808(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
100001f8:	d0a4d817 	ldw	r2,-27808(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
10000214:	003da03a 	break	0
10000218:	0005883a 	mov	r2,zero
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:
10000230:	06c60034 	movhi	sp,6144
10000234:	dec00014 	ori	sp,sp,0
10000238:	06840034 	movhi	gp,4096
1000023c:	d6baaa14 	ori	gp,gp,60072
10000240:	00840034 	movhi	r2,4096
10000244:	109f7a14 	ori	r2,r2,32232
10000248:	00c40034 	movhi	r3,4096
1000024c:	18dfc314 	ori	r3,r3,32524
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>
10000254:	10000015 	stw	zero,0(r2)
10000258:	10800104 	addi	r2,r2,4
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
10000260:	0002d4c0 	call	10002d4c <alt_load>
10000264:	0002dd00 	call	10002dd0 <alt_main>

10000268 <alt_after_alt_main>:
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00800804 	movi	r2,32
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00801004 	movi	r2,64
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801804 	movi	r2,96
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801404 	movi	r2,80
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00802004 	movi	r2,128
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00801c04 	movi	r2,112
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00801004 	movi	r2,64
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00800804 	movi	r2,32
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00800804 	movi	r2,32
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00801004 	movi	r2,64
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	0001883a 	nop
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f4:	defffd04 	addi	sp,sp,-12
100002f8:	df000215 	stw	fp,8(sp)
100002fc:	df000204 	addi	fp,sp,8
10000300:	2007883a 	mov	r3,r4
10000304:	2805883a 	mov	r2,r5
10000308:	e0fffe05 	stb	r3,-8(fp)
1000030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000310:	00802004 	movi	r2,128
10000314:	e0fffe03 	ldbu	r3,-8(fp)
10000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000031c:	00801c04 	movi	r2,112
10000320:	e0ffff0b 	ldhu	r3,-4(fp)
10000324:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000328:	00801004 	movi	r2,64
1000032c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000330:	00801404 	movi	r2,80
10000334:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000338:	00801404 	movi	r2,80
1000033c:	00c00044 	movi	r3,1
10000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000344:	00801004 	movi	r2,64
10000348:	00c00044 	movi	r3,1
1000034c:	10c00005 	stb	r3,0(r2)
}
10000350:	0001883a 	nop
10000354:	e037883a 	mov	sp,fp
10000358:	df000017 	ldw	fp,0(sp)
1000035c:	dec00104 	addi	sp,sp,4
10000360:	f800283a 	ret

10000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000364:	defffd04 	addi	sp,sp,-12
10000368:	df000215 	stw	fp,8(sp)
1000036c:	df000204 	addi	fp,sp,8
10000370:	2005883a 	mov	r2,r4
10000374:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
10000378:	00802004 	movi	r2,128
1000037c:	e0ffff03 	ldbu	r3,-4(fp)
10000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000384:	00801004 	movi	r2,64
10000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000038c:	00801804 	movi	r2,96
10000390:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10000394:	00801c04 	movi	r2,112
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100003a0:	00801804 	movi	r2,96
100003a4:	00c00044 	movi	r3,1
100003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003ac:	00801004 	movi	r2,64
100003b0:	00c00044 	movi	r3,1
100003b4:	10c00005 	stb	r3,0(r2)
	return temp;
100003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100003bc:	e037883a 	mov	sp,fp
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00104 	addi	sp,sp,4
100003c8:	f800283a 	ret

100003cc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003cc:	defff904 	addi	sp,sp,-28
100003d0:	dfc00615 	stw	ra,24(sp)
100003d4:	df000515 	stw	fp,20(sp)
100003d8:	df000504 	addi	fp,sp,20
	IO_init();
100003dc:	000026c0 	call	1000026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100003e0:	e03ffc0d 	sth	zero,-16(fp)
	unsigned int keycode = 0;
100003e4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100003e8:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100003ec:	01040034 	movhi	r4,4096
100003f0:	2113fb04 	addi	r4,r4,20460
100003f4:	00024140 	call	10002414 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100003f8:	00012340 	call	10001234 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100003fc:	000b883a 	mov	r5,zero
10000400:	01005104 	movi	r4,324
10000404:	00011900 	call	10001190 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000408:	017fffd4 	movui	r5,65535
1000040c:	01302414 	movui	r4,49296
10000410:	00011900 	call	10001190 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000414:	01409604 	movi	r5,600
10000418:	01006d04 	movi	r4,436
1000041c:	00011900 	call	10001190 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000420:	00811004 	movi	r2,1088
10000424:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000428:	e0bffb0b 	ldhu	r2,-20(fp)
1000042c:	100b883a 	mov	r5,r2
10000430:	01005084 	movi	r4,322
10000434:	00011900 	call	10001190 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000438:	00808404 	movi	r2,528
1000043c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000440:	e0bffe0b 	ldhu	r2,-8(fp)
10000444:	100b883a 	mov	r5,r2
10000448:	01302314 	movui	r4,49292
1000044c:	00011900 	call	10001190 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000450:	000b883a 	mov	r5,zero
10000454:	01007104 	movi	r4,452
10000458:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000045c:	000b883a 	mov	r5,zero
10000460:	01007184 	movi	r4,454
10000464:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000468:	000b883a 	mov	r5,zero
1000046c:	01007204 	movi	r4,456
10000470:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000474:	000b883a 	mov	r5,zero
10000478:	01007284 	movi	r4,458
1000047c:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000480:	000b883a 	mov	r5,zero
10000484:	01007304 	movi	r4,460
10000488:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000048c:	000b883a 	mov	r5,zero
10000490:	01007384 	movi	r4,462
10000494:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000498:	000b883a 	mov	r5,zero
1000049c:	01007404 	movi	r4,464
100004a0:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100004a4:	000b883a 	mov	r5,zero
100004a8:	01007484 	movi	r4,466
100004ac:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100004b0:	000b883a 	mov	r5,zero
100004b4:	01007504 	movi	r4,468
100004b8:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100004bc:	000b883a 	mov	r5,zero
100004c0:	01007584 	movi	r4,470
100004c4:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100004c8:	000b883a 	mov	r5,zero
100004cc:	01007604 	movi	r4,472
100004d0:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100004d4:	000b883a 	mov	r5,zero
100004d8:	01007684 	movi	r4,474
100004dc:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100004e0:	000b883a 	mov	r5,zero
100004e4:	01007704 	movi	r4,476
100004e8:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004ec:	000b883a 	mov	r5,zero
100004f0:	01007784 	movi	r4,478
100004f4:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100004f8:	01401c84 	movi	r5,114
100004fc:	01007084 	movi	r4,450
10000500:	00011900 	call	10001190 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000504:	01738054 	movui	r5,52737
10000508:	01000044 	movi	r4,1
1000050c:	00002f40 	call	100002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000510:	0001883a 	nop
10000514:	010000c4 	movi	r4,3
10000518:	00003640 	call	10000364 <IO_read>
1000051c:	10bfffcc 	andi	r2,r2,65535
10000520:	103ffc26 	beq	r2,zero,10000514 <__alt_data_end+0xf8000514>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000524:	00000806 	br	10000548 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000528:	01000044 	movi	r4,1
1000052c:	00003640 	call	10000364 <IO_read>
10000530:	10bfffcc 	andi	r2,r2,65535
10000534:	100b883a 	mov	r5,r2
10000538:	01040034 	movhi	r4,4096
1000053c:	21140104 	addi	r4,r4,20484
10000540:	00023480 	call	10002348 <printf>
		goto USB_HOT_PLUG;
10000544:	003fac06 	br	100003f8 <__alt_data_end+0xf80003f8>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000548:	01000044 	movi	r4,1
1000054c:	00003640 	call	10000364 <IO_read>
10000550:	10bfffcc 	andi	r2,r2,65535
10000554:	1083fb58 	cmpnei	r2,r2,4077
10000558:	103ff31e 	bne	r2,zero,10000528 <__alt_data_end+0xf8000528>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
1000055c:	01040034 	movhi	r4,4096
10000560:	21140a04 	addi	r4,r4,20520
10000564:	00023480 	call	10002348 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000568:	01401d04 	movi	r5,116
1000056c:	01007084 	movi	r4,450
10000570:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000574:	01400f04 	movi	r5,60
10000578:	01007104 	movi	r4,452
1000057c:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000580:	000b883a 	mov	r5,zero
10000584:	01007184 	movi	r4,454
10000588:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1000058c:	000b883a 	mov	r5,zero
10000590:	01007204 	movi	r4,456
10000594:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000598:	000b883a 	mov	r5,zero
1000059c:	01007284 	movi	r4,458
100005a0:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100005a4:	000b883a 	mov	r5,zero
100005a8:	01007304 	movi	r4,460
100005ac:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100005b0:	000b883a 	mov	r5,zero
100005b4:	01007384 	movi	r4,462
100005b8:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100005bc:	000b883a 	mov	r5,zero
100005c0:	01007404 	movi	r4,464
100005c4:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100005c8:	000b883a 	mov	r5,zero
100005cc:	01007484 	movi	r4,466
100005d0:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100005d4:	000b883a 	mov	r5,zero
100005d8:	01007504 	movi	r4,468
100005dc:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100005e0:	000b883a 	mov	r5,zero
100005e4:	01007584 	movi	r4,470
100005e8:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005ec:	000b883a 	mov	r5,zero
100005f0:	01007604 	movi	r4,472
100005f4:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005f8:	000b883a 	mov	r5,zero
100005fc:	01007684 	movi	r4,474
10000600:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000604:	000b883a 	mov	r5,zero
10000608:	01007704 	movi	r4,476
1000060c:	00011900 	call	10001190 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000610:	000b883a 	mov	r5,zero
10000614:	01007784 	movi	r4,478
10000618:	00011900 	call	10001190 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000061c:	01738054 	movui	r5,52737
10000620:	01000044 	movi	r4,1
10000624:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000628:	0001883a 	nop
1000062c:	01000044 	movi	r4,1
10000630:	00003640 	call	10000364 <IO_read>
10000634:	10bfffcc 	andi	r2,r2,65535
10000638:	1083fb58 	cmpnei	r2,r2,4077
1000063c:	10000826 	beq	r2,zero,10000660 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000640:	01000044 	movi	r4,1
10000644:	00003640 	call	10000364 <IO_read>
10000648:	10bfffcc 	andi	r2,r2,65535
1000064c:	100b883a 	mov	r5,r2
10000650:	01040034 	movhi	r4,4096
10000654:	21140104 	addi	r4,r4,20484
10000658:	00023480 	call	10002348 <printf>
		goto USB_HOT_PLUG;
1000065c:	003f6606 	br	100003f8 <__alt_data_end+0xf80003f8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10000660:	00b02284 	movi	r2,-16246
10000664:	d0a4d00d 	sth	r2,-27840(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000668:	008c0004 	movi	r2,12288
1000066c:	d0a4d08d 	sth	r2,-27838(gp)
	fs_device = A_DP_STAT;
10000670:	00880004 	movi	r2,8192
10000674:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000678:	d0a4d00b 	ldhu	r2,-27840(gp)
1000067c:	10bfffcc 	andi	r2,r2,65535
10000680:	1009883a 	mov	r4,r2
10000684:	00011e80 	call	100011e8 <UsbRead>
10000688:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
1000068c:	d0a4d08b 	ldhu	r2,-27838(gp)
10000690:	e0fffb0b 	ldhu	r3,-20(fp)
10000694:	1884703a 	and	r2,r3,r2
10000698:	10bfffcc 	andi	r2,r2,65535
1000069c:	1000351e 	bne	r2,zero,10000774 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006a0:	e03ffbc5 	stb	zero,-17(fp)
100006a4:	00000f06 	br	100006e4 <main+0x318>
		{
			usleep(5*1000);
100006a8:	0104e204 	movi	r4,5000
100006ac:	0002e4c0 	call	10002e4c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100006b0:	d0a4d00b 	ldhu	r2,-27840(gp)
100006b4:	10bfffcc 	andi	r2,r2,65535
100006b8:	1009883a 	mov	r4,r2
100006bc:	00011e80 	call	100011e8 <UsbRead>
100006c0:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
100006c4:	d0a4d08b 	ldhu	r2,-27838(gp)
100006c8:	e0fffb0b 	ldhu	r3,-20(fp)
100006cc:	1884703a 	and	r2,r3,r2
100006d0:	10bfffcc 	andi	r2,r2,65535
100006d4:	1000071e 	bne	r2,zero,100006f4 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006d8:	e0bffbc3 	ldbu	r2,-17(fp)
100006dc:	10800044 	addi	r2,r2,1
100006e0:	e0bffbc5 	stb	r2,-17(fp)
100006e4:	e0bffbc3 	ldbu	r2,-17(fp)
100006e8:	10800170 	cmpltui	r2,r2,5
100006ec:	103fee1e 	bne	r2,zero,100006a8 <__alt_data_end+0xf80006a8>
100006f0:	00000106 	br	100006f8 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100006f4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100006f8:	d0a4d08b 	ldhu	r2,-27838(gp)
100006fc:	e0fffb0b 	ldhu	r3,-20(fp)
10000700:	1884703a 	and	r2,r3,r2
10000704:	10bfffcc 	andi	r2,r2,65535
10000708:	1000261e 	bne	r2,zero,100007a4 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000070c:	01040034 	movhi	r4,4096
10000710:	21140e04 	addi	r4,r4,20536
10000714:	00024140 	call	10002414 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000718:	01040034 	movhi	r4,4096
1000071c:	21141804 	addi	r4,r4,20576
10000720:	00024140 	call	10002414 <puts>
			while (!(usb_ctl_val & no_device))
10000724:	00000d06 	br	1000075c <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000728:	d0a4d00b 	ldhu	r2,-27840(gp)
1000072c:	10bfffcc 	andi	r2,r2,65535
10000730:	1009883a 	mov	r4,r2
10000734:	00011e80 	call	100011e8 <UsbRead>
10000738:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
1000073c:	d0a4d08b 	ldhu	r2,-27838(gp)
10000740:	e0fffb0b 	ldhu	r3,-20(fp)
10000744:	1884703a 	and	r2,r3,r2
10000748:	10bfffcc 	andi	r2,r2,65535
1000074c:	10000126 	beq	r2,zero,10000754 <main+0x388>
					goto USB_HOT_PLUG;
10000750:	003f2906 	br	100003f8 <__alt_data_end+0xf80003f8>

				usleep(2000);
10000754:	0101f404 	movi	r4,2000
10000758:	0002e4c0 	call	10002e4c <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
1000075c:	d0a4d08b 	ldhu	r2,-27838(gp)
10000760:	e0fffb0b 	ldhu	r3,-20(fp)
10000764:	1884703a 	and	r2,r3,r2
10000768:	10bfffcc 	andi	r2,r2,65535
1000076c:	103fee26 	beq	r2,zero,10000728 <__alt_data_end+0xf8000728>
10000770:	00000c06 	br	100007a4 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000774:	e0fffb0b 	ldhu	r3,-20(fp)
10000778:	e0bffc0b 	ldhu	r2,-16(fp)
1000077c:	1884703a 	and	r2,r3,r2
10000780:	10bfffcc 	andi	r2,r2,65535
10000784:	10000426 	beq	r2,zero,10000798 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10000788:	01040034 	movhi	r4,4096
1000078c:	21142404 	addi	r4,r4,20624
10000790:	00024140 	call	10002414 <puts>
10000794:	00000306 	br	100007a4 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000798:	01040034 	movhi	r4,4096
1000079c:	21142b04 	addi	r4,r4,20652
100007a0:	00024140 	call	10002414 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100007a4:	00012e80 	call	100012e8 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007a8:	00000306 	br	100007b8 <main+0x3ec>
	{
		UsbSetAddress();
100007ac:	00012e80 	call	100012e8 <UsbSetAddress>
		usleep(10*1000);
100007b0:	0109c404 	movi	r4,10000
100007b4:	0002e4c0 	call	10002e4c <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007b8:	010000c4 	movi	r4,3
100007bc:	00003640 	call	10000364 <IO_read>
100007c0:	10bfffcc 	andi	r2,r2,65535
100007c4:	1080040c 	andi	r2,r2,16
100007c8:	103ff826 	beq	r2,zero,100007ac <__alt_data_end+0xf80007ac>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007cc:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100007d0:	01414184 	movi	r5,1286
100007d4:	01000084 	movi	r4,2
100007d8:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007dc:	0009883a 	mov	r4,zero
100007e0:	00003640 	call	10000364 <IO_read>
100007e4:	10bfffcc 	andi	r2,r2,65535
100007e8:	100b883a 	mov	r5,r2
100007ec:	01040034 	movhi	r4,4096
100007f0:	21143204 	addi	r4,r4,20680
100007f4:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508); // n
100007f8:	01414204 	movi	r5,1288
100007fc:	01000084 	movi	r4,2
10000800:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000804:	0009883a 	mov	r4,zero
10000808:	00003640 	call	10000364 <IO_read>
1000080c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000810:	e0bffb0b 	ldhu	r2,-20(fp)
10000814:	100b883a 	mov	r5,r2
10000818:	01040034 	movhi	r4,4096
1000081c:	21143d04 	addi	r4,r4,20724
10000820:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000824:	e0bffb0b 	ldhu	r2,-20(fp)
10000828:	108000e0 	cmpeqi	r2,r2,3
1000082c:	1000031e 	bne	r2,zero,1000083c <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000830:	000220c0 	call	1000220c <UsbGetRetryCnt>
10000834:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10000838:	003eef06 	br	100003f8 <__alt_data_end+0xf80003f8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
1000083c:	01040034 	movhi	r4,4096
10000840:	21144904 	addi	r4,r4,20772
10000844:	00024140 	call	10002414 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000848:	00013e80 	call	100013e8 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000084c:	00000306 	br	1000085c <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000850:	00013e80 	call	100013e8 <UsbGetDeviceDesc1>
		usleep(10*1000);
10000854:	0109c404 	movi	r4,10000
10000858:	0002e4c0 	call	10002e4c <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000085c:	010000c4 	movi	r4,3
10000860:	00003640 	call	10000364 <IO_read>
10000864:	10bfffcc 	andi	r2,r2,65535
10000868:	1080040c 	andi	r2,r2,16
1000086c:	103ff826 	beq	r2,zero,10000850 <__alt_data_end+0xf8000850>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000870:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000874:	01414184 	movi	r5,1286
10000878:	01000084 	movi	r4,2
1000087c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000880:	0009883a 	mov	r4,zero
10000884:	00003640 	call	10000364 <IO_read>
10000888:	10bfffcc 	andi	r2,r2,65535
1000088c:	100b883a 	mov	r5,r2
10000890:	01040034 	movhi	r4,4096
10000894:	21145804 	addi	r4,r4,20832
10000898:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508);
1000089c:	01414204 	movi	r5,1288
100008a0:	01000084 	movi	r4,2
100008a4:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008a8:	0009883a 	mov	r4,zero
100008ac:	00003640 	call	10000364 <IO_read>
100008b0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008b4:	e0bffb0b 	ldhu	r2,-20(fp)
100008b8:	100b883a 	mov	r5,r2
100008bc:	01040034 	movhi	r4,4096
100008c0:	21146304 	addi	r4,r4,20876
100008c4:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03)
100008c8:	e0bffb0b 	ldhu	r2,-20(fp)
100008cc:	108000e0 	cmpeqi	r2,r2,3
100008d0:	1000061e 	bne	r2,zero,100008ec <main+0x520>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008d4:	000220c0 	call	1000220c <UsbGetRetryCnt>
100008d8:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
100008dc:	01040034 	movhi	r4,4096
100008e0:	21146f04 	addi	r4,r4,20924
100008e4:	00024140 	call	10002414 <puts>
		goto USB_HOT_PLUG;
100008e8:	003ec306 	br	100003f8 <__alt_data_end+0xf80003f8>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100008ec:	01040034 	movhi	r4,4096
100008f0:	21147804 	addi	r4,r4,20960
100008f4:	00024140 	call	10002414 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008f8:	00015300 	call	10001530 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008fc:	00000306 	br	1000090c <main+0x540>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000900:	00015300 	call	10001530 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000904:	0109c404 	movi	r4,10000
10000908:	0002e4c0 	call	10002e4c <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000090c:	010000c4 	movi	r4,3
10000910:	00003640 	call	10000364 <IO_read>
10000914:	10bfffcc 	andi	r2,r2,65535
10000918:	1080040c 	andi	r2,r2,16
1000091c:	103ff826 	beq	r2,zero,10000900 <__alt_data_end+0xf8000900>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000920:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000924:	01414184 	movi	r5,1286
10000928:	01000084 	movi	r4,2
1000092c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000930:	0009883a 	mov	r4,zero
10000934:	00003640 	call	10000364 <IO_read>
10000938:	10bfffcc 	andi	r2,r2,65535
1000093c:	100b883a 	mov	r5,r2
10000940:	01040034 	movhi	r4,4096
10000944:	21145804 	addi	r4,r4,20832
10000948:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508);
1000094c:	01414204 	movi	r5,1288
10000950:	01000084 	movi	r4,2
10000954:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000958:	0009883a 	mov	r4,zero
1000095c:	00003640 	call	10000364 <IO_read>
10000960:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000964:	e0bffb0b 	ldhu	r2,-20(fp)
10000968:	100b883a 	mov	r5,r2
1000096c:	01040034 	movhi	r4,4096
10000970:	21146304 	addi	r4,r4,20876
10000974:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03)
10000978:	e0bffb0b 	ldhu	r2,-20(fp)
1000097c:	108000e0 	cmpeqi	r2,r2,3
10000980:	1000061e 	bne	r2,zero,1000099c <main+0x5d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000984:	000220c0 	call	1000220c <UsbGetRetryCnt>
10000988:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
1000098c:	01040034 	movhi	r4,4096
10000990:	21146f04 	addi	r4,r4,20924
10000994:	00024140 	call	10002414 <puts>
		goto USB_HOT_PLUG;
10000998:	003e9706 	br	100003f8 <__alt_data_end+0xf80003f8>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
1000099c:	01040034 	movhi	r4,4096
100009a0:	21148c04 	addi	r4,r4,21040
100009a4:	00024140 	call	10002414 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100009a8:	00017080 	call	10001708 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009ac:	00000306 	br	100009bc <main+0x5f0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100009b0:	00017080 	call	10001708 <UsbGetConfigDesc1>
		usleep(10*1000);
100009b4:	0109c404 	movi	r4,10000
100009b8:	0002e4c0 	call	10002e4c <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009bc:	010000c4 	movi	r4,3
100009c0:	00003640 	call	10000364 <IO_read>
100009c4:	10bfffcc 	andi	r2,r2,65535
100009c8:	1080040c 	andi	r2,r2,16
100009cc:	103ff826 	beq	r2,zero,100009b0 <__alt_data_end+0xf80009b0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009d0:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009d4:	01414184 	movi	r5,1286
100009d8:	01000084 	movi	r4,2
100009dc:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009e0:	0009883a 	mov	r4,zero
100009e4:	00003640 	call	10000364 <IO_read>
100009e8:	10bfffcc 	andi	r2,r2,65535
100009ec:	100b883a 	mov	r5,r2
100009f0:	01040034 	movhi	r4,4096
100009f4:	21149e04 	addi	r4,r4,21112
100009f8:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508);
100009fc:	01414204 	movi	r5,1288
10000a00:	01000084 	movi	r4,2
10000a04:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a08:	0009883a 	mov	r4,zero
10000a0c:	00003640 	call	10000364 <IO_read>
10000a10:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000a14:	e0bffb0b 	ldhu	r2,-20(fp)
10000a18:	100b883a 	mov	r5,r2
10000a1c:	01040034 	movhi	r4,4096
10000a20:	2114a904 	addi	r4,r4,21156
10000a24:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03)
10000a28:	e0bffb0b 	ldhu	r2,-20(fp)
10000a2c:	108000e0 	cmpeqi	r2,r2,3
10000a30:	1000061e 	bne	r2,zero,10000a4c <main+0x680>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a34:	000220c0 	call	1000220c <UsbGetRetryCnt>
10000a38:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000a3c:	01040034 	movhi	r4,4096
10000a40:	21146f04 	addi	r4,r4,20924
10000a44:	00024140 	call	10002414 <puts>
		goto USB_HOT_PLUG;
10000a48:	003e6b06 	br	100003f8 <__alt_data_end+0xf80003f8>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000a4c:	01040034 	movhi	r4,4096
10000a50:	2114b504 	addi	r4,r4,21204
10000a54:	00024140 	call	10002414 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000a58:	00018980 	call	10001898 <UsbGetConfigDesc2>

	usleep(100*1000);
10000a5c:	010000b4 	movhi	r4,2
10000a60:	2121a804 	addi	r4,r4,-31072
10000a64:	0002e4c0 	call	10002e4c <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a68:	00000306 	br	10000a78 <main+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000a6c:	00018980 	call	10001898 <UsbGetConfigDesc2>
		usleep(10*1000);
10000a70:	0109c404 	movi	r4,10000
10000a74:	0002e4c0 	call	10002e4c <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a78:	010000c4 	movi	r4,3
10000a7c:	00003640 	call	10000364 <IO_read>
10000a80:	10bfffcc 	andi	r2,r2,65535
10000a84:	1080040c 	andi	r2,r2,16
10000a88:	103ff826 	beq	r2,zero,10000a6c <__alt_data_end+0xf8000a6c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a8c:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a90:	01414184 	movi	r5,1286
10000a94:	01000084 	movi	r4,2
10000a98:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a9c:	0009883a 	mov	r4,zero
10000aa0:	00003640 	call	10000364 <IO_read>
10000aa4:	10bfffcc 	andi	r2,r2,65535
10000aa8:	100b883a 	mov	r5,r2
10000aac:	01040034 	movhi	r4,4096
10000ab0:	2114c804 	addi	r4,r4,21280
10000ab4:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508);
10000ab8:	01414204 	movi	r5,1288
10000abc:	01000084 	movi	r4,2
10000ac0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ac4:	0009883a 	mov	r4,zero
10000ac8:	00003640 	call	10000364 <IO_read>
10000acc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000ad0:	e0bffb0b 	ldhu	r2,-20(fp)
10000ad4:	100b883a 	mov	r5,r2
10000ad8:	01040034 	movhi	r4,4096
10000adc:	2114d304 	addi	r4,r4,21324
10000ae0:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03)
10000ae4:	e0bffb0b 	ldhu	r2,-20(fp)
10000ae8:	108000e0 	cmpeqi	r2,r2,3
10000aec:	1000061e 	bne	r2,zero,10000b08 <main+0x73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000af0:	000220c0 	call	1000220c <UsbGetRetryCnt>
10000af4:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000af8:	01040034 	movhi	r4,4096
10000afc:	21146f04 	addi	r4,r4,20924
10000b00:	00024140 	call	10002414 <puts>
		goto USB_HOT_PLUG;
10000b04:	003e3c06 	br	100003f8 <__alt_data_end+0xf80003f8>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000b08:	01040034 	movhi	r4,4096
10000b0c:	2114df04 	addi	r4,r4,21372
10000b10:	00024140 	call	10002414 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000b14:	01415b04 	movi	r5,1388
10000b18:	01000084 	movi	r4,2
10000b1c:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
10000b20:	0009883a 	mov	r4,zero
10000b24:	00003640 	call	10000364 <IO_read>
10000b28:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000b2c:	e0bffe8b 	ldhu	r2,-6(fp)
10000b30:	108000cc 	andi	r2,r2,3
10000b34:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000b38:	e0bffe8b 	ldhu	r2,-6(fp)
10000b3c:	100b883a 	mov	r5,r2
10000b40:	01040034 	movhi	r4,4096
10000b44:	2114f204 	addi	r4,r4,21448
10000b48:	00023480 	call	10002348 <printf>

	if (code == 0x01)
10000b4c:	e0bffe8b 	ldhu	r2,-6(fp)
10000b50:	10800058 	cmpnei	r2,r2,1
10000b54:	1000041e 	bne	r2,zero,10000b68 <main+0x79c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000b58:	01040034 	movhi	r4,4096
10000b5c:	2114f504 	addi	r4,r4,21460
10000b60:	00024140 	call	10002414 <puts>
10000b64:	00000306 	br	10000b74 <main+0x7a8>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000b68:	01040034 	movhi	r4,4096
10000b6c:	21150404 	addi	r4,r4,21520
10000b70:	00024140 	call	10002414 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000b74:	01415d84 	movi	r5,1398
10000b78:	01000084 	movi	r4,2
10000b7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b80:	0141cfc4 	movi	r5,1855
10000b84:	0009883a 	mov	r4,zero
10000b88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b8c:	01604154 	movui	r5,33029
10000b90:	0009883a 	mov	r4,zero
10000b94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b98:	014000c4 	movi	r5,3
10000b9c:	0009883a 	mov	r4,zero
10000ba0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ba4:	01400204 	movi	r5,8
10000ba8:	0009883a 	mov	r4,zero
10000bac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000bb0:	016b0294 	movui	r5,44042
10000bb4:	0009883a 	mov	r4,zero
10000bb8:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000bbc:	01415d84 	movi	r5,1398
10000bc0:	01006c04 	movi	r4,432
10000bc4:	00011900 	call	10001190 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000bc8:	01415f04 	movi	r5,1404
10000bcc:	01000084 	movi	r4,2
10000bd0:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000bd4:	0009883a 	mov	r4,zero
10000bd8:	00003640 	call	10000364 <IO_read>
10000bdc:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000be0:	e0bfff03 	ldbu	r2,-4(fp)
10000be4:	100b883a 	mov	r5,r2
10000be8:	01040034 	movhi	r4,4096
10000bec:	21150d04 	addi	r4,r4,21556
10000bf0:	00023480 	call	10002348 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000bf4:	0001b000 	call	10001b00 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bf8:	00000306 	br	10000c08 <main+0x83c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000bfc:	0001b000 	call	10001b00 <UsbSetConfig>
		usleep(10*1000);
10000c00:	0109c404 	movi	r4,10000
10000c04:	0002e4c0 	call	10002e4c <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c08:	010000c4 	movi	r4,3
10000c0c:	00003640 	call	10000364 <IO_read>
10000c10:	10bfffcc 	andi	r2,r2,65535
10000c14:	1080040c 	andi	r2,r2,16
10000c18:	103ff826 	beq	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c1c:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c20:	01414184 	movi	r5,1286
10000c24:	01000084 	movi	r4,2
10000c28:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c2c:	0009883a 	mov	r4,zero
10000c30:	00003640 	call	10000364 <IO_read>
10000c34:	10bfffcc 	andi	r2,r2,65535
10000c38:	100b883a 	mov	r5,r2
10000c3c:	01040034 	movhi	r4,4096
10000c40:	21151704 	addi	r4,r4,21596
10000c44:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c48:	01414204 	movi	r5,1288
10000c4c:	01000084 	movi	r4,2
10000c50:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c54:	0009883a 	mov	r4,zero
10000c58:	00003640 	call	10000364 <IO_read>
10000c5c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000c60:	e0bffb0b 	ldhu	r2,-20(fp)
10000c64:	100b883a 	mov	r5,r2
10000c68:	01040034 	movhi	r4,4096
10000c6c:	21152204 	addi	r4,r4,21640
10000c70:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03)
10000c74:	e0bffb0b 	ldhu	r2,-20(fp)
10000c78:	108000e0 	cmpeqi	r2,r2,3
10000c7c:	1000061e 	bne	r2,zero,10000c98 <main+0x8cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c80:	000220c0 	call	1000220c <UsbGetRetryCnt>
10000c84:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000c88:	01040034 	movhi	r4,4096
10000c8c:	21146f04 	addi	r4,r4,20924
10000c90:	00024140 	call	10002414 <puts>
		goto USB_HOT_PLUG;
10000c94:	003dd806 	br	100003f8 <__alt_data_end+0xf80003f8>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c98:	01040034 	movhi	r4,4096
10000c9c:	21152e04 	addi	r4,r4,21688
10000ca0:	00024140 	call	10002414 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000ca4:	0001c000 	call	10001c00 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ca8:	00000306 	br	10000cb8 <main+0x8ec>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000cac:	0001c000 	call	10001c00 <UsbClassRequest>
		usleep(10*1000);
10000cb0:	0109c404 	movi	r4,10000
10000cb4:	0002e4c0 	call	10002e4c <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cb8:	010000c4 	movi	r4,3
10000cbc:	00003640 	call	10000364 <IO_read>
10000cc0:	10bfffcc 	andi	r2,r2,65535
10000cc4:	1080040c 	andi	r2,r2,16
10000cc8:	103ff826 	beq	r2,zero,10000cac <__alt_data_end+0xf8000cac>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ccc:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000cd0:	01414184 	movi	r5,1286
10000cd4:	01000084 	movi	r4,2
10000cd8:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cdc:	0009883a 	mov	r4,zero
10000ce0:	00003640 	call	10000364 <IO_read>
10000ce4:	10bfffcc 	andi	r2,r2,65535
10000ce8:	100b883a 	mov	r5,r2
10000cec:	01040034 	movhi	r4,4096
10000cf0:	21154004 	addi	r4,r4,21760
10000cf4:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cf8:	01414204 	movi	r5,1288
10000cfc:	01000084 	movi	r4,2
10000d00:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d04:	0009883a 	mov	r4,zero
10000d08:	00003640 	call	10000364 <IO_read>
10000d0c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d10:	e0bffb0b 	ldhu	r2,-20(fp)
10000d14:	100b883a 	mov	r5,r2
10000d18:	01040034 	movhi	r4,4096
10000d1c:	21154b04 	addi	r4,r4,21804
10000d20:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03)
10000d24:	e0bffb0b 	ldhu	r2,-20(fp)
10000d28:	108000e0 	cmpeqi	r2,r2,3
10000d2c:	1000061e 	bne	r2,zero,10000d48 <main+0x97c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d30:	000220c0 	call	1000220c <UsbGetRetryCnt>
10000d34:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000d38:	01040034 	movhi	r4,4096
10000d3c:	21146f04 	addi	r4,r4,20924
10000d40:	00024140 	call	10002414 <puts>
		goto USB_HOT_PLUG;
10000d44:	003dac06 	br	100003f8 <__alt_data_end+0xf80003f8>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000d48:	01040034 	movhi	r4,4096
10000d4c:	21155704 	addi	r4,r4,21852
10000d50:	00024140 	call	10002414 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000d54:	0001d000 	call	10001d00 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d58:	00000306 	br	10000d68 <main+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000d5c:	0001d000 	call	10001d00 <UsbGetHidDesc>
		usleep(10*1000);
10000d60:	0109c404 	movi	r4,10000
10000d64:	0002e4c0 	call	10002e4c <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d68:	010000c4 	movi	r4,3
10000d6c:	00003640 	call	10000364 <IO_read>
10000d70:	10bfffcc 	andi	r2,r2,65535
10000d74:	1080040c 	andi	r2,r2,16
10000d78:	103ff826 	beq	r2,zero,10000d5c <__alt_data_end+0xf8000d5c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d7c:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d80:	01414184 	movi	r5,1286
10000d84:	01000084 	movi	r4,2
10000d88:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d8c:	0009883a 	mov	r4,zero
10000d90:	00003640 	call	10000364 <IO_read>
10000d94:	10bfffcc 	andi	r2,r2,65535
10000d98:	100b883a 	mov	r5,r2
10000d9c:	01040034 	movhi	r4,4096
10000da0:	21154004 	addi	r4,r4,21760
10000da4:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508);
10000da8:	01414204 	movi	r5,1288
10000dac:	01000084 	movi	r4,2
10000db0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000db4:	0009883a 	mov	r4,zero
10000db8:	00003640 	call	10000364 <IO_read>
10000dbc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000dc0:	e0bffb0b 	ldhu	r2,-20(fp)
10000dc4:	100b883a 	mov	r5,r2
10000dc8:	01040034 	movhi	r4,4096
10000dcc:	21154b04 	addi	r4,r4,21804
10000dd0:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03)
10000dd4:	e0bffb0b 	ldhu	r2,-20(fp)
10000dd8:	108000e0 	cmpeqi	r2,r2,3
10000ddc:	1000061e 	bne	r2,zero,10000df8 <main+0xa2c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000de0:	000220c0 	call	1000220c <UsbGetRetryCnt>
10000de4:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000de8:	01040034 	movhi	r4,4096
10000dec:	21146f04 	addi	r4,r4,20924
10000df0:	00024140 	call	10002414 <puts>
		goto USB_HOT_PLUG;
10000df4:	003d8006 	br	100003f8 <__alt_data_end+0xf80003f8>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000df8:	01040034 	movhi	r4,4096
10000dfc:	21156904 	addi	r4,r4,21924
10000e00:	00024140 	call	10002414 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000e04:	0001e480 	call	10001e48 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e08:	00000306 	br	10000e18 <main+0xa4c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000e0c:	0001e480 	call	10001e48 <UsbGetReportDesc>
		usleep(10*1000);
10000e10:	0109c404 	movi	r4,10000
10000e14:	0002e4c0 	call	10002e4c <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e18:	010000c4 	movi	r4,3
10000e1c:	00003640 	call	10000364 <IO_read>
10000e20:	10bfffcc 	andi	r2,r2,65535
10000e24:	1080040c 	andi	r2,r2,16
10000e28:	103ff826 	beq	r2,zero,10000e0c <__alt_data_end+0xf8000e0c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000e2c:	00021880 	call	10002188 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000e30:	01414184 	movi	r5,1286
10000e34:	01000084 	movi	r4,2
10000e38:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000e3c:	0009883a 	mov	r4,zero
10000e40:	00003640 	call	10000364 <IO_read>
10000e44:	10bfffcc 	andi	r2,r2,65535
10000e48:	100b883a 	mov	r5,r2
10000e4c:	01040034 	movhi	r4,4096
10000e50:	21157d04 	addi	r4,r4,22004
10000e54:	00023480 	call	10002348 <printf>

	IO_write(HPI_ADDR,0x0508);
10000e58:	01414204 	movi	r5,1288
10000e5c:	01000084 	movi	r4,2
10000e60:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e64:	0009883a 	mov	r4,zero
10000e68:	00003640 	call	10000364 <IO_read>
10000e6c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000e70:	e0bffb0b 	ldhu	r2,-20(fp)
10000e74:	100b883a 	mov	r5,r2
10000e78:	01040034 	movhi	r4,4096
10000e7c:	21158904 	addi	r4,r4,22052
10000e80:	00023480 	call	10002348 <printf>
	while (usb_ctl_val != 0x03)
10000e84:	e0bffb0b 	ldhu	r2,-20(fp)
10000e88:	108000e0 	cmpeqi	r2,r2,3
10000e8c:	1000061e 	bne	r2,zero,10000ea8 <main+0xadc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e90:	000220c0 	call	1000220c <UsbGetRetryCnt>
10000e94:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000e98:	01040034 	movhi	r4,4096
10000e9c:	21146f04 	addi	r4,r4,20924
10000ea0:	00024140 	call	10002414 <puts>
		goto USB_HOT_PLUG;
10000ea4:	003d5406 	br	100003f8 <__alt_data_end+0xf80003f8>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000ea8:	01040034 	movhi	r4,4096
10000eac:	21159504 	addi	r4,r4,22100
10000eb0:	00024140 	call	10002414 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000eb4:	0109c404 	movi	r4,10000
10000eb8:	0002e4c0 	call	10002e4c <usleep>
	while(1)
	{
		toggle++;
10000ebc:	e0bffb83 	ldbu	r2,-18(fp)
10000ec0:	10800044 	addi	r2,r2,1
10000ec4:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000ec8:	01414004 	movi	r5,1280
10000ecc:	01000084 	movi	r4,2
10000ed0:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000ed4:	01414704 	movi	r5,1308
10000ed8:	0009883a 	mov	r4,zero
10000edc:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000ee0:	e0bfff03 	ldbu	r2,-4(fp)
10000ee4:	108003cc 	andi	r2,r2,15
10000ee8:	100b883a 	mov	r5,r2
10000eec:	0009883a 	mov	r4,zero
10000ef0:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ef4:	0140a444 	movi	r5,657
10000ef8:	0009883a 	mov	r4,zero
10000efc:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
10000f00:	e0bffb83 	ldbu	r2,-18(fp)
10000f04:	1080004c 	andi	r2,r2,1
10000f08:	10803fcc 	andi	r2,r2,255
10000f0c:	10000426 	beq	r2,zero,10000f20 <main+0xb54>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000f10:	01400044 	movi	r5,1
10000f14:	0009883a 	mov	r4,zero
10000f18:	00002f40 	call	100002f4 <IO_write>
10000f1c:	00000306 	br	10000f2c <main+0xb60>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f20:	01401044 	movi	r5,65
10000f24:	0009883a 	mov	r4,zero
10000f28:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000f2c:	014004c4 	movi	r5,19
10000f30:	0009883a 	mov	r4,zero
10000f34:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000f38:	000b883a 	mov	r5,zero
10000f3c:	0009883a 	mov	r4,zero
10000f40:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f44:	01414004 	movi	r5,1280
10000f48:	01006c04 	movi	r4,432
10000f4c:	00011900 	call	10001190 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f50:	00002406 	br	10000fe4 <main+0xc18>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000f54:	01414004 	movi	r5,1280
10000f58:	01000084 	movi	r4,2
10000f5c:	00002f40 	call	100002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000f60:	01414704 	movi	r5,1308
10000f64:	0009883a 	mov	r4,zero
10000f68:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f6c:	e0bfff03 	ldbu	r2,-4(fp)
10000f70:	108003cc 	andi	r2,r2,15
10000f74:	100b883a 	mov	r5,r2
10000f78:	0009883a 	mov	r4,zero
10000f7c:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f80:	0140a444 	movi	r5,657
10000f84:	0009883a 	mov	r4,zero
10000f88:	00002f40 	call	100002f4 <IO_write>
			if(toggle%2)
10000f8c:	e0bffb83 	ldbu	r2,-18(fp)
10000f90:	1080004c 	andi	r2,r2,1
10000f94:	10803fcc 	andi	r2,r2,255
10000f98:	10000426 	beq	r2,zero,10000fac <main+0xbe0>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000f9c:	01400044 	movi	r5,1
10000fa0:	0009883a 	mov	r4,zero
10000fa4:	00002f40 	call	100002f4 <IO_write>
10000fa8:	00000306 	br	10000fb8 <main+0xbec>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000fac:	01401044 	movi	r5,65
10000fb0:	0009883a 	mov	r4,zero
10000fb4:	00002f40 	call	100002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000fb8:	014004c4 	movi	r5,19
10000fbc:	0009883a 	mov	r4,zero
10000fc0:	00002f40 	call	100002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000fc4:	000b883a 	mov	r5,zero
10000fc8:	0009883a 	mov	r4,zero
10000fcc:	00002f40 	call	100002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000fd0:	01414004 	movi	r5,1280
10000fd4:	01006c04 	movi	r4,432
10000fd8:	00011900 	call	10001190 <UsbWrite>
			usleep(10*1000);
10000fdc:	0109c404 	movi	r4,10000
10000fe0:	0002e4c0 	call	10002e4c <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000fe4:	010000c4 	movi	r4,3
10000fe8:	00003640 	call	10000364 <IO_read>
10000fec:	10bfffcc 	andi	r2,r2,65535
10000ff0:	1080040c 	andi	r2,r2,16
10000ff4:	103fd726 	beq	r2,zero,10000f54 <__alt_data_end+0xf8000f54>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10000ff8:	00021880 	call	10002188 <UsbWaitTDListDone>
10000ffc:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10001000:	01014784 	movi	r4,1310
10001004:	00011e80 	call	100011e8 <UsbRead>
10001008:	10bfffcc 	andi	r2,r2,65535
1000100c:	e0bffd15 	stw	r2,-12(fp)
		keycode += (UsbRead(0x0520) << 16);
10001010:	01014804 	movi	r4,1312
10001014:	00011e80 	call	100011e8 <UsbRead>
10001018:	10bfffcc 	andi	r2,r2,65535
1000101c:	1004943a 	slli	r2,r2,16
10001020:	1007883a 	mov	r3,r2
10001024:	e0bffd17 	ldw	r2,-12(fp)
10001028:	10c5883a 	add	r2,r2,r3
1000102c:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %08x\n",keycode);
10001030:	e17ffd17 	ldw	r5,-12(fp)
10001034:	01040034 	movhi	r4,4096
10001038:	2115a904 	addi	r4,r4,22180
1000103c:	00023480 	call	10002348 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode;
10001040:	00802404 	movi	r2,144
10001044:	e0fffd17 	ldw	r3,-12(fp)
10001048:	10c00015 	stw	r3,0(r2)

		usleep(200);//usleep(5000);
1000104c:	01003204 	movi	r4,200
10001050:	0002e4c0 	call	10002e4c <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10001054:	d0a4d00b 	ldhu	r2,-27840(gp)
10001058:	10bfffcc 	andi	r2,r2,65535
1000105c:	1009883a 	mov	r4,r2
10001060:	00011e80 	call	100011e8 <UsbRead>
10001064:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
10001068:	d0a4d08b 	ldhu	r2,-27838(gp)
1000106c:	e0fffb0b 	ldhu	r3,-20(fp)
10001070:	1884703a 	and	r2,r3,r2
10001074:	10bfffcc 	andi	r2,r2,65535
10001078:	10003f1e 	bne	r2,zero,10001178 <main+0xdac>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000107c:	e03ffbc5 	stb	zero,-17(fp)
10001080:	00000f06 	br	100010c0 <main+0xcf4>
			{
				usleep(5*1000);
10001084:	0104e204 	movi	r4,5000
10001088:	0002e4c0 	call	10002e4c <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
1000108c:	d0a4d00b 	ldhu	r2,-27840(gp)
10001090:	10bfffcc 	andi	r2,r2,65535
10001094:	1009883a 	mov	r4,r2
10001098:	00011e80 	call	100011e8 <UsbRead>
1000109c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
100010a0:	d0a4d08b 	ldhu	r2,-27838(gp)
100010a4:	e0fffb0b 	ldhu	r3,-20(fp)
100010a8:	1884703a 	and	r2,r3,r2
100010ac:	10bfffcc 	andi	r2,r2,65535
100010b0:	1000071e 	bne	r2,zero,100010d0 <main+0xd04>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100010b4:	e0bffbc3 	ldbu	r2,-17(fp)
100010b8:	10800044 	addi	r2,r2,1
100010bc:	e0bffbc5 	stb	r2,-17(fp)
100010c0:	e0bffbc3 	ldbu	r2,-17(fp)
100010c4:	108001f0 	cmpltui	r2,r2,7
100010c8:	103fee1e 	bne	r2,zero,10001084 <__alt_data_end+0xf8001084>
100010cc:	00000106 	br	100010d4 <main+0xd08>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
100010d0:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
100010d4:	d0a4d08b 	ldhu	r2,-27838(gp)
100010d8:	e0fffb0b 	ldhu	r3,-20(fp)
100010dc:	1884703a 	and	r2,r3,r2
100010e0:	10bfffcc 	andi	r2,r2,65535
100010e4:	1000241e 	bne	r2,zero,10001178 <main+0xdac>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
100010e8:	01040034 	movhi	r4,4096
100010ec:	2115b204 	addi	r4,r4,22216
100010f0:	00024140 	call	10002414 <puts>
				printf("[INFO]: please insert again!!! \n");
100010f4:	01040034 	movhi	r4,4096
100010f8:	2115bd04 	addi	r4,r4,22260
100010fc:	00024140 	call	10002414 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001100:	00001d06 	br	10001178 <main+0xdac>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001104:	d0a4d00b 	ldhu	r2,-27840(gp)
10001108:	10bfffcc 	andi	r2,r2,65535
1000110c:	1009883a 	mov	r4,r2
10001110:	00011e80 	call	100011e8 <UsbRead>
10001114:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001118:	0104e204 	movi	r4,5000
1000111c:	0002e4c0 	call	10002e4c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001120:	d0a4d00b 	ldhu	r2,-27840(gp)
10001124:	10bfffcc 	andi	r2,r2,65535
10001128:	1009883a 	mov	r4,r2
1000112c:	00011e80 	call	100011e8 <UsbRead>
10001130:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001134:	0104e204 	movi	r4,5000
10001138:	0002e4c0 	call	10002e4c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000113c:	d0a4d00b 	ldhu	r2,-27840(gp)
10001140:	10bfffcc 	andi	r2,r2,65535
10001144:	1009883a 	mov	r4,r2
10001148:	00011e80 	call	100011e8 <UsbRead>
1000114c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001150:	0104e204 	movi	r4,5000
10001154:	0002e4c0 	call	10002e4c <usleep>

			if(usb_ctl_val & no_device)
10001158:	d0a4d08b 	ldhu	r2,-27838(gp)
1000115c:	e0fffb0b 	ldhu	r3,-20(fp)
10001160:	1884703a 	and	r2,r3,r2
10001164:	10bfffcc 	andi	r2,r2,65535
10001168:	10000126 	beq	r2,zero,10001170 <main+0xda4>
				goto USB_HOT_PLUG;
1000116c:	003ca206 	br	100003f8 <__alt_data_end+0xf80003f8>

			usleep(200);
10001170:	01003204 	movi	r4,200
10001174:	0002e4c0 	call	10002e4c <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001178:	d0a4d08b 	ldhu	r2,-27838(gp)
1000117c:	e0fffb0b 	ldhu	r3,-20(fp)
10001180:	1884703a 	and	r2,r3,r2
10001184:	10bfffcc 	andi	r2,r2,65535
10001188:	103fde26 	beq	r2,zero,10001104 <__alt_data_end+0xf8001104>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
1000118c:	003f4b06 	br	10000ebc <__alt_data_end+0xf8000ebc>

10001190 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001190:	defffc04 	addi	sp,sp,-16
10001194:	dfc00315 	stw	ra,12(sp)
10001198:	df000215 	stw	fp,8(sp)
1000119c:	df000204 	addi	fp,sp,8
100011a0:	2007883a 	mov	r3,r4
100011a4:	2805883a 	mov	r2,r5
100011a8:	e0fffe0d 	sth	r3,-8(fp)
100011ac:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
100011b0:	e0bffe0b 	ldhu	r2,-8(fp)
100011b4:	100b883a 	mov	r5,r2
100011b8:	01000084 	movi	r4,2
100011bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA, Data);
100011c0:	e0bfff0b 	ldhu	r2,-4(fp)
100011c4:	100b883a 	mov	r5,r2
100011c8:	0009883a 	mov	r4,zero
100011cc:	00002f40 	call	100002f4 <IO_write>
}
100011d0:	0001883a 	nop
100011d4:	e037883a 	mov	sp,fp
100011d8:	dfc00117 	ldw	ra,4(sp)
100011dc:	df000017 	ldw	fp,0(sp)
100011e0:	dec00204 	addi	sp,sp,8
100011e4:	f800283a 	ret

100011e8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100011e8:	defffc04 	addi	sp,sp,-16
100011ec:	dfc00315 	stw	ra,12(sp)
100011f0:	df000215 	stw	fp,8(sp)
100011f4:	df000204 	addi	fp,sp,8
100011f8:	2005883a 	mov	r2,r4
100011fc:	e0bfff0d 	sth	r2,-4(fp)
	alt_u16 temp;
	IO_write(HPI_ADDR, Address);
10001200:	e0bfff0b 	ldhu	r2,-4(fp)
10001204:	100b883a 	mov	r5,r2
10001208:	01000084 	movi	r4,2
1000120c:	00002f40 	call	100002f4 <IO_write>
	temp = IO_read(HPI_DATA);
10001210:	0009883a 	mov	r4,zero
10001214:	00003640 	call	10000364 <IO_read>
10001218:	e0bffe0d 	sth	r2,-8(fp)
	return temp;
1000121c:	e0bffe0b 	ldhu	r2,-8(fp)
}
10001220:	e037883a 	mov	sp,fp
10001224:	dfc00117 	ldw	ra,4(sp)
10001228:	df000017 	ldw	fp,0(sp)
1000122c:	dec00204 	addi	sp,sp,8
10001230:	f800283a 	ret

10001234 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001234:	defffe04 	addi	sp,sp,-8
10001238:	dfc00115 	stw	ra,4(sp)
1000123c:	df000015 	stw	fp,0(sp)
10001240:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001244:	017e9414 	movui	r5,64080
10001248:	01000044 	movi	r4,1
1000124c:	00002f40 	call	100002f4 <IO_write>
	usleep(100000);
10001250:	010000b4 	movhi	r4,2
10001254:	2121a804 	addi	r4,r4,-31072
10001258:	0002e4c0 	call	10002e4c <usleep>
	printf("[USB INIT]:reset finished!\n");
1000125c:	01040034 	movhi	r4,4096
10001260:	2115c504 	addi	r4,r4,22292
10001264:	00024140 	call	10002414 <puts>

	usleep(500000);
10001268:	01000234 	movhi	r4,8
1000126c:	21284804 	addi	r4,r4,-24288
10001270:	0002e4c0 	call	10002e4c <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001274:	01040034 	movhi	r4,4096
10001278:	2115cc04 	addi	r4,r4,22320
1000127c:	00024140 	call	10002414 <puts>
	IO_read(HPI_MAILBOX);
10001280:	01000044 	movi	r4,1
10001284:	00003640 	call	10000364 <IO_read>
	IO_read(HPI_STATUS);
10001288:	010000c4 	movi	r4,3
1000128c:	00003640 	call	10000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001290:	01005104 	movi	r4,324
10001294:	00011e80 	call	100011e8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001298:	000b883a 	mov	r5,zero
1000129c:	01005104 	movi	r4,324
100012a0:	00011900 	call	10001190 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
100012a4:	01005204 	movi	r4,328
100012a8:	00011e80 	call	100011e8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
100012ac:	000b883a 	mov	r5,zero
100012b0:	01005204 	movi	r4,328
100012b4:	00011900 	call	10001190 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100012b8:	017fffd4 	movui	r5,65535
100012bc:	01302414 	movui	r4,49296
100012c0:	00011900 	call	10001190 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100012c4:	017fffd4 	movui	r5,65535
100012c8:	01302c14 	movui	r4,49328
100012cc:	00011900 	call	10001190 <UsbWrite>
}
100012d0:	0001883a 	nop
100012d4:	e037883a 	mov	sp,fp
100012d8:	dfc00117 	ldw	ra,4(sp)
100012dc:	df000017 	ldw	fp,0(sp)
100012e0:	dec00204 	addi	sp,sp,8
100012e4:	f800283a 	ret

100012e8 <UsbSetAddress>:


void UsbSetAddress()
{
100012e8:	defffe04 	addi	sp,sp,-8
100012ec:	dfc00115 	stw	ra,4(sp)
100012f0:	df000015 	stw	fp,0(sp)
100012f4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100012f8:	01414004 	movi	r5,1280
100012fc:	01000084 	movi	r4,2
10001300:	00002f40 	call	100002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001304:	01414304 	movi	r5,1292
10001308:	0009883a 	mov	r4,zero
1000130c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001310:	01400204 	movi	r5,8
10001314:	0009883a 	mov	r4,zero
10001318:	00002f40 	call	100002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
1000131c:	01403404 	movi	r5,208
10001320:	0009883a 	mov	r4,zero
10001324:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001328:	01400044 	movi	r5,1
1000132c:	0009883a 	mov	r4,zero
10001330:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001334:	014004c4 	movi	r5,19
10001338:	0009883a 	mov	r4,zero
1000133c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001340:	01414504 	movi	r5,1300
10001344:	0009883a 	mov	r4,zero
10001348:	00002f40 	call	100002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
1000134c:	01414004 	movi	r5,1280
10001350:	0009883a 	mov	r4,zero
10001354:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
10001358:	01400084 	movi	r5,2
1000135c:	0009883a 	mov	r4,zero
10001360:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001364:	000b883a 	mov	r5,zero
10001368:	0009883a 	mov	r4,zero
1000136c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001370:	000b883a 	mov	r5,zero
10001374:	0009883a 	mov	r4,zero
10001378:	00002f40 	call	100002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
1000137c:	000b883a 	mov	r5,zero
10001380:	0009883a 	mov	r4,zero
10001384:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001388:	000b883a 	mov	r5,zero
1000138c:	0009883a 	mov	r4,zero
10001390:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001394:	01402404 	movi	r5,144
10001398:	0009883a 	mov	r4,zero
1000139c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100013a0:	01401044 	movi	r5,65
100013a4:	0009883a 	mov	r4,zero
100013a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013ac:	014004c4 	movi	r5,19
100013b0:	0009883a 	mov	r4,zero
100013b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013b8:	000b883a 	mov	r5,zero
100013bc:	0009883a 	mov	r4,zero
100013c0:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100013c4:	01414004 	movi	r5,1280
100013c8:	01006c04 	movi	r4,432
100013cc:	00011900 	call	10001190 <UsbWrite>
}
100013d0:	0001883a 	nop
100013d4:	e037883a 	mov	sp,fp
100013d8:	dfc00117 	ldw	ra,4(sp)
100013dc:	df000017 	ldw	fp,0(sp)
100013e0:	dec00204 	addi	sp,sp,8
100013e4:	f800283a 	ret

100013e8 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100013e8:	defffe04 	addi	sp,sp,-8
100013ec:	dfc00115 	stw	ra,4(sp)
100013f0:	df000015 	stw	fp,0(sp)
100013f4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100013f8:	01414004 	movi	r5,1280
100013fc:	01000084 	movi	r4,2
10001400:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001404:	01414304 	movi	r5,1292
10001408:	0009883a 	mov	r4,zero
1000140c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001410:	01400204 	movi	r5,8
10001414:	0009883a 	mov	r4,zero
10001418:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000141c:	0140b404 	movi	r5,720
10001420:	0009883a 	mov	r4,zero
10001424:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001428:	01400044 	movi	r5,1
1000142c:	0009883a 	mov	r4,zero
10001430:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001434:	014004c4 	movi	r5,19
10001438:	0009883a 	mov	r4,zero
1000143c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001440:	01414504 	movi	r5,1300
10001444:	0009883a 	mov	r4,zero
10001448:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000144c:	0141a004 	movi	r5,1664
10001450:	0009883a 	mov	r4,zero
10001454:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10001458:	01404004 	movi	r5,256
1000145c:	0009883a 	mov	r4,zero
10001460:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001464:	000b883a 	mov	r5,zero
10001468:	0009883a 	mov	r4,zero
1000146c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001470:	01400204 	movi	r5,8
10001474:	0009883a 	mov	r4,zero
10001478:	00002f40 	call	100002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
1000147c:	01414b04 	movi	r5,1324
10001480:	0009883a 	mov	r4,zero
10001484:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001488:	01400204 	movi	r5,8
1000148c:	0009883a 	mov	r4,zero
10001490:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001494:	0140a404 	movi	r5,656
10001498:	0009883a 	mov	r4,zero
1000149c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100014a0:	01401044 	movi	r5,65
100014a4:	0009883a 	mov	r4,zero
100014a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014ac:	014004c4 	movi	r5,19
100014b0:	0009883a 	mov	r4,zero
100014b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
100014b8:	01414804 	movi	r5,1312
100014bc:	0009883a 	mov	r4,zero
100014c0:	00002f40 	call	100002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100014c4:	000b883a 	mov	r5,zero
100014c8:	0009883a 	mov	r4,zero
100014cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100014d0:	000b883a 	mov	r5,zero
100014d4:	0009883a 	mov	r4,zero
100014d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100014dc:	01408404 	movi	r5,528
100014e0:	0009883a 	mov	r4,zero
100014e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100014e8:	01401044 	movi	r5,65
100014ec:	0009883a 	mov	r4,zero
100014f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014f4:	014004c4 	movi	r5,19
100014f8:	0009883a 	mov	r4,zero
100014fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001500:	000b883a 	mov	r5,zero
10001504:	0009883a 	mov	r4,zero
10001508:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000150c:	01414004 	movi	r5,1280
10001510:	01006c04 	movi	r4,432
10001514:	00011900 	call	10001190 <UsbWrite>
}
10001518:	0001883a 	nop
1000151c:	e037883a 	mov	sp,fp
10001520:	dfc00117 	ldw	ra,4(sp)
10001524:	df000017 	ldw	fp,0(sp)
10001528:	dec00204 	addi	sp,sp,8
1000152c:	f800283a 	ret

10001530 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10001530:	defffe04 	addi	sp,sp,-8
10001534:	dfc00115 	stw	ra,4(sp)
10001538:	df000015 	stw	fp,0(sp)
1000153c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001540:	01414004 	movi	r5,1280
10001544:	01000084 	movi	r4,2
10001548:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000154c:	01414304 	movi	r5,1292
10001550:	0009883a 	mov	r4,zero
10001554:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001558:	01400204 	movi	r5,8
1000155c:	0009883a 	mov	r4,zero
10001560:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001564:	0140b404 	movi	r5,720
10001568:	0009883a 	mov	r4,zero
1000156c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001570:	01400044 	movi	r5,1
10001574:	0009883a 	mov	r4,zero
10001578:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000157c:	014004c4 	movi	r5,19
10001580:	0009883a 	mov	r4,zero
10001584:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001588:	01414504 	movi	r5,1300
1000158c:	0009883a 	mov	r4,zero
10001590:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001594:	0141a004 	movi	r5,1664
10001598:	0009883a 	mov	r4,zero
1000159c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
100015a0:	01404004 	movi	r5,256
100015a4:	0009883a 	mov	r4,zero
100015a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100015ac:	000b883a 	mov	r5,zero
100015b0:	0009883a 	mov	r4,zero
100015b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
100015b8:	01400484 	movi	r5,18
100015bc:	0009883a 	mov	r4,zero
100015c0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100015c4:	01415104 	movi	r5,1348
100015c8:	0009883a 	mov	r4,zero
100015cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100015d0:	01400204 	movi	r5,8
100015d4:	0009883a 	mov	r4,zero
100015d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100015dc:	0140a404 	movi	r5,656
100015e0:	0009883a 	mov	r4,zero
100015e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100015e8:	01401044 	movi	r5,65
100015ec:	0009883a 	mov	r4,zero
100015f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100015f4:	014004c4 	movi	r5,19
100015f8:	0009883a 	mov	r4,zero
100015fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001600:	01414804 	movi	r5,1312
10001604:	0009883a 	mov	r4,zero
10001608:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
1000160c:	01415304 	movi	r5,1356
10001610:	0009883a 	mov	r4,zero
10001614:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001618:	01400204 	movi	r5,8
1000161c:	0009883a 	mov	r4,zero
10001620:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001624:	0140a404 	movi	r5,656
10001628:	0009883a 	mov	r4,zero
1000162c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10001630:	01400044 	movi	r5,1
10001634:	0009883a 	mov	r4,zero
10001638:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000163c:	014004c4 	movi	r5,19
10001640:	0009883a 	mov	r4,zero
10001644:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001648:	01414b04 	movi	r5,1324
1000164c:	0009883a 	mov	r4,zero
10001650:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10001654:	01415504 	movi	r5,1364
10001658:	0009883a 	mov	r4,zero
1000165c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10001660:	01400084 	movi	r5,2
10001664:	0009883a 	mov	r4,zero
10001668:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000166c:	0140a404 	movi	r5,656
10001670:	0009883a 	mov	r4,zero
10001674:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001678:	01401044 	movi	r5,65
1000167c:	0009883a 	mov	r4,zero
10001680:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001684:	014004c4 	movi	r5,19
10001688:	0009883a 	mov	r4,zero
1000168c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001690:	01414e04 	movi	r5,1336
10001694:	0009883a 	mov	r4,zero
10001698:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
1000169c:	000b883a 	mov	r5,zero
100016a0:	0009883a 	mov	r4,zero
100016a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100016a8:	000b883a 	mov	r5,zero
100016ac:	0009883a 	mov	r4,zero
100016b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
100016b4:	01408404 	movi	r5,528
100016b8:	0009883a 	mov	r4,zero
100016bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
100016c0:	01401044 	movi	r5,65
100016c4:	0009883a 	mov	r4,zero
100016c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100016cc:	014004c4 	movi	r5,19
100016d0:	0009883a 	mov	r4,zero
100016d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100016d8:	000b883a 	mov	r5,zero
100016dc:	0009883a 	mov	r4,zero
100016e0:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100016e4:	01414004 	movi	r5,1280
100016e8:	01006c04 	movi	r4,432
100016ec:	00011900 	call	10001190 <UsbWrite>
}
100016f0:	0001883a 	nop
100016f4:	e037883a 	mov	sp,fp
100016f8:	dfc00117 	ldw	ra,4(sp)
100016fc:	df000017 	ldw	fp,0(sp)
10001700:	dec00204 	addi	sp,sp,8
10001704:	f800283a 	ret

10001708 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001708:	defffe04 	addi	sp,sp,-8
1000170c:	dfc00115 	stw	ra,4(sp)
10001710:	df000015 	stw	fp,0(sp)
10001714:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001718:	01414004 	movi	r5,1280
1000171c:	01000084 	movi	r4,2
10001720:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001724:	01414304 	movi	r5,1292
10001728:	0009883a 	mov	r4,zero
1000172c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001730:	01400204 	movi	r5,8
10001734:	0009883a 	mov	r4,zero
10001738:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000173c:	0140b404 	movi	r5,720
10001740:	0009883a 	mov	r4,zero
10001744:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001748:	01400044 	movi	r5,1
1000174c:	0009883a 	mov	r4,zero
10001750:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001754:	014004c4 	movi	r5,19
10001758:	0009883a 	mov	r4,zero
1000175c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001760:	01414504 	movi	r5,1300
10001764:	0009883a 	mov	r4,zero
10001768:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000176c:	0141a004 	movi	r5,1664
10001770:	0009883a 	mov	r4,zero
10001774:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001778:	01408004 	movi	r5,512
1000177c:	0009883a 	mov	r4,zero
10001780:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001784:	000b883a 	mov	r5,zero
10001788:	0009883a 	mov	r4,zero
1000178c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001790:	01400244 	movi	r5,9
10001794:	0009883a 	mov	r4,zero
10001798:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000179c:	01415104 	movi	r5,1348
100017a0:	0009883a 	mov	r4,zero
100017a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100017a8:	01400204 	movi	r5,8
100017ac:	0009883a 	mov	r4,zero
100017b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100017b4:	0140a404 	movi	r5,656
100017b8:	0009883a 	mov	r4,zero
100017bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100017c0:	01401044 	movi	r5,65
100017c4:	0009883a 	mov	r4,zero
100017c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100017cc:	014004c4 	movi	r5,19
100017d0:	0009883a 	mov	r4,zero
100017d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100017d8:	01414804 	movi	r5,1312
100017dc:	0009883a 	mov	r4,zero
100017e0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100017e4:	01415304 	movi	r5,1356
100017e8:	0009883a 	mov	r4,zero
100017ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100017f0:	01400044 	movi	r5,1
100017f4:	0009883a 	mov	r4,zero
100017f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100017fc:	0140a404 	movi	r5,656
10001800:	0009883a 	mov	r4,zero
10001804:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001808:	01400044 	movi	r5,1
1000180c:	0009883a 	mov	r4,zero
10001810:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001814:	014004c4 	movi	r5,19
10001818:	0009883a 	mov	r4,zero
1000181c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001820:	01414b04 	movi	r5,1324
10001824:	0009883a 	mov	r4,zero
10001828:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000182c:	000b883a 	mov	r5,zero
10001830:	0009883a 	mov	r4,zero
10001834:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001838:	000b883a 	mov	r5,zero
1000183c:	0009883a 	mov	r4,zero
10001840:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001844:	01408404 	movi	r5,528
10001848:	0009883a 	mov	r4,zero
1000184c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001850:	01401044 	movi	r5,65
10001854:	0009883a 	mov	r4,zero
10001858:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000185c:	014004c4 	movi	r5,19
10001860:	0009883a 	mov	r4,zero
10001864:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001868:	000b883a 	mov	r5,zero
1000186c:	0009883a 	mov	r4,zero
10001870:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001874:	01414004 	movi	r5,1280
10001878:	01006c04 	movi	r4,432
1000187c:	00011900 	call	10001190 <UsbWrite>
}
10001880:	0001883a 	nop
10001884:	e037883a 	mov	sp,fp
10001888:	dfc00117 	ldw	ra,4(sp)
1000188c:	df000017 	ldw	fp,0(sp)
10001890:	dec00204 	addi	sp,sp,8
10001894:	f800283a 	ret

10001898 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001898:	defffe04 	addi	sp,sp,-8
1000189c:	dfc00115 	stw	ra,4(sp)
100018a0:	df000015 	stw	fp,0(sp)
100018a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100018a8:	01414004 	movi	r5,1280
100018ac:	01000084 	movi	r4,2
100018b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100018b4:	01414304 	movi	r5,1292
100018b8:	0009883a 	mov	r4,zero
100018bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100018c0:	01400204 	movi	r5,8
100018c4:	0009883a 	mov	r4,zero
100018c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100018cc:	0140b404 	movi	r5,720
100018d0:	0009883a 	mov	r4,zero
100018d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100018d8:	01400044 	movi	r5,1
100018dc:	0009883a 	mov	r4,zero
100018e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100018e4:	014004c4 	movi	r5,19
100018e8:	0009883a 	mov	r4,zero
100018ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100018f0:	01414504 	movi	r5,1300
100018f4:	0009883a 	mov	r4,zero
100018f8:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100018fc:	0141a004 	movi	r5,1664
10001900:	0009883a 	mov	r4,zero
10001904:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001908:	01408004 	movi	r5,512
1000190c:	0009883a 	mov	r4,zero
10001910:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001914:	000b883a 	mov	r5,zero
10001918:	0009883a 	mov	r4,zero
1000191c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001920:	01403fc4 	movi	r5,255
10001924:	0009883a 	mov	r4,zero
10001928:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
1000192c:	01415704 	movi	r5,1372
10001930:	0009883a 	mov	r4,zero
10001934:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001938:	01400204 	movi	r5,8
1000193c:	0009883a 	mov	r4,zero
10001940:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001944:	0140a404 	movi	r5,656
10001948:	0009883a 	mov	r4,zero
1000194c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001950:	01401044 	movi	r5,65
10001954:	0009883a 	mov	r4,zero
10001958:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000195c:	014004c4 	movi	r5,19
10001960:	0009883a 	mov	r4,zero
10001964:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001968:	01414804 	movi	r5,1312
1000196c:	0009883a 	mov	r4,zero
10001970:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001974:	01415904 	movi	r5,1380
10001978:	0009883a 	mov	r4,zero
1000197c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001980:	01400204 	movi	r5,8
10001984:	0009883a 	mov	r4,zero
10001988:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000198c:	0140a404 	movi	r5,656
10001990:	0009883a 	mov	r4,zero
10001994:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001998:	01400044 	movi	r5,1
1000199c:	0009883a 	mov	r4,zero
100019a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100019a4:	014004c4 	movi	r5,19
100019a8:	0009883a 	mov	r4,zero
100019ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100019b0:	01414b04 	movi	r5,1324
100019b4:	0009883a 	mov	r4,zero
100019b8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100019bc:	01415b04 	movi	r5,1388
100019c0:	0009883a 	mov	r4,zero
100019c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100019c8:	01400204 	movi	r5,8
100019cc:	0009883a 	mov	r4,zero
100019d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100019d4:	0140a404 	movi	r5,656
100019d8:	0009883a 	mov	r4,zero
100019dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100019e0:	01401044 	movi	r5,65
100019e4:	0009883a 	mov	r4,zero
100019e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100019ec:	014004c4 	movi	r5,19
100019f0:	0009883a 	mov	r4,zero
100019f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100019f8:	01414e04 	movi	r5,1336
100019fc:	0009883a 	mov	r4,zero
10001a00:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001a04:	01415d04 	movi	r5,1396
10001a08:	0009883a 	mov	r4,zero
10001a0c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001a10:	01400204 	movi	r5,8
10001a14:	0009883a 	mov	r4,zero
10001a18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001a1c:	0140a404 	movi	r5,656
10001a20:	0009883a 	mov	r4,zero
10001a24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001a28:	01400044 	movi	r5,1
10001a2c:	0009883a 	mov	r4,zero
10001a30:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001a34:	014004c4 	movi	r5,19
10001a38:	0009883a 	mov	r4,zero
10001a3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001a40:	01415104 	movi	r5,1348
10001a44:	0009883a 	mov	r4,zero
10001a48:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001a4c:	01415f04 	movi	r5,1404
10001a50:	0009883a 	mov	r4,zero
10001a54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001a58:	01400084 	movi	r5,2
10001a5c:	0009883a 	mov	r4,zero
10001a60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001a64:	0140a404 	movi	r5,656
10001a68:	0009883a 	mov	r4,zero
10001a6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001a70:	01401044 	movi	r5,65
10001a74:	0009883a 	mov	r4,zero
10001a78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001a7c:	014004c4 	movi	r5,19
10001a80:	0009883a 	mov	r4,zero
10001a84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001a88:	01415404 	movi	r5,1360
10001a8c:	0009883a 	mov	r4,zero
10001a90:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001a94:	000b883a 	mov	r5,zero
10001a98:	0009883a 	mov	r4,zero
10001a9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001aa0:	000b883a 	mov	r5,zero
10001aa4:	0009883a 	mov	r4,zero
10001aa8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001aac:	01408404 	movi	r5,528
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001ab8:	01401044 	movi	r5,65
10001abc:	0009883a 	mov	r4,zero
10001ac0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001ac4:	014004c4 	movi	r5,19
10001ac8:	0009883a 	mov	r4,zero
10001acc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001ad0:	000b883a 	mov	r5,zero
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001adc:	01414004 	movi	r5,1280
10001ae0:	01006c04 	movi	r4,432
10001ae4:	00011900 	call	10001190 <UsbWrite>
}
10001ae8:	0001883a 	nop
10001aec:	e037883a 	mov	sp,fp
10001af0:	dfc00117 	ldw	ra,4(sp)
10001af4:	df000017 	ldw	fp,0(sp)
10001af8:	dec00204 	addi	sp,sp,8
10001afc:	f800283a 	ret

10001b00 <UsbSetConfig>:

void UsbSetConfig()
{
10001b00:	defffe04 	addi	sp,sp,-8
10001b04:	dfc00115 	stw	ra,4(sp)
10001b08:	df000015 	stw	fp,0(sp)
10001b0c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b10:	01414004 	movi	r5,1280
10001b14:	01000084 	movi	r4,2
10001b18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b1c:	01414304 	movi	r5,1292
10001b20:	0009883a 	mov	r4,zero
10001b24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b28:	01400204 	movi	r5,8
10001b2c:	0009883a 	mov	r4,zero
10001b30:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001b34:	0140b404 	movi	r5,720
10001b38:	0009883a 	mov	r4,zero
10001b3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001b40:	01400044 	movi	r5,1
10001b44:	0009883a 	mov	r4,zero
10001b48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b4c:	014004c4 	movi	r5,19
10001b50:	0009883a 	mov	r4,zero
10001b54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b58:	01414504 	movi	r5,1300
10001b5c:	0009883a 	mov	r4,zero
10001b60:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001b64:	01424004 	movi	r5,2304
10001b68:	0009883a 	mov	r4,zero
10001b6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001b70:	01400044 	movi	r5,1
10001b74:	0009883a 	mov	r4,zero
10001b78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b7c:	000b883a 	mov	r5,zero
10001b80:	0009883a 	mov	r4,zero
10001b84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b88:	000b883a 	mov	r5,zero
10001b8c:	0009883a 	mov	r4,zero
10001b90:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001b94:	000b883a 	mov	r5,zero
10001b98:	0009883a 	mov	r4,zero
10001b9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001ba0:	000b883a 	mov	r5,zero
10001ba4:	0009883a 	mov	r4,zero
10001ba8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001bac:	0140a404 	movi	r5,656
10001bb0:	0009883a 	mov	r4,zero
10001bb4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001bb8:	01401044 	movi	r5,65
10001bbc:	0009883a 	mov	r4,zero
10001bc0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001bc4:	014004c4 	movi	r5,19
10001bc8:	0009883a 	mov	r4,zero
10001bcc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bd0:	000b883a 	mov	r5,zero
10001bd4:	0009883a 	mov	r4,zero
10001bd8:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001bdc:	01414004 	movi	r5,1280
10001be0:	01006c04 	movi	r4,432
10001be4:	00011900 	call	10001190 <UsbWrite>

}
10001be8:	0001883a 	nop
10001bec:	e037883a 	mov	sp,fp
10001bf0:	dfc00117 	ldw	ra,4(sp)
10001bf4:	df000017 	ldw	fp,0(sp)
10001bf8:	dec00204 	addi	sp,sp,8
10001bfc:	f800283a 	ret

10001c00 <UsbClassRequest>:

void UsbClassRequest()
{
10001c00:	defffe04 	addi	sp,sp,-8
10001c04:	dfc00115 	stw	ra,4(sp)
10001c08:	df000015 	stw	fp,0(sp)
10001c0c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c10:	01414004 	movi	r5,1280
10001c14:	01000084 	movi	r4,2
10001c18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001c1c:	01414304 	movi	r5,1292
10001c20:	0009883a 	mov	r4,zero
10001c24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001c28:	01400204 	movi	r5,8
10001c2c:	0009883a 	mov	r4,zero
10001c30:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001c34:	0140b404 	movi	r5,720
10001c38:	0009883a 	mov	r4,zero
10001c3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001c40:	01400044 	movi	r5,1
10001c44:	0009883a 	mov	r4,zero
10001c48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c4c:	014004c4 	movi	r5,19
10001c50:	0009883a 	mov	r4,zero
10001c54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c58:	01414504 	movi	r5,1300
10001c5c:	0009883a 	mov	r4,zero
10001c60:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001c64:	01428844 	movi	r5,2593
10001c68:	0009883a 	mov	r4,zero
10001c6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001c70:	000b883a 	mov	r5,zero
10001c74:	0009883a 	mov	r4,zero
10001c78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c7c:	000b883a 	mov	r5,zero
10001c80:	0009883a 	mov	r4,zero
10001c84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c88:	000b883a 	mov	r5,zero
10001c8c:	0009883a 	mov	r4,zero
10001c90:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001c94:	000b883a 	mov	r5,zero
10001c98:	0009883a 	mov	r4,zero
10001c9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001ca0:	000b883a 	mov	r5,zero
10001ca4:	0009883a 	mov	r4,zero
10001ca8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001cac:	0140a404 	movi	r5,656
10001cb0:	0009883a 	mov	r4,zero
10001cb4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001cb8:	01401044 	movi	r5,65
10001cbc:	0009883a 	mov	r4,zero
10001cc0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001cc4:	014004c4 	movi	r5,19
10001cc8:	0009883a 	mov	r4,zero
10001ccc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001cd0:	000b883a 	mov	r5,zero
10001cd4:	0009883a 	mov	r4,zero
10001cd8:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001cdc:	01414004 	movi	r5,1280
10001ce0:	01006c04 	movi	r4,432
10001ce4:	00011900 	call	10001190 <UsbWrite>
}
10001ce8:	0001883a 	nop
10001cec:	e037883a 	mov	sp,fp
10001cf0:	dfc00117 	ldw	ra,4(sp)
10001cf4:	df000017 	ldw	fp,0(sp)
10001cf8:	dec00204 	addi	sp,sp,8
10001cfc:	f800283a 	ret

10001d00 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001d00:	defffe04 	addi	sp,sp,-8
10001d04:	dfc00115 	stw	ra,4(sp)
10001d08:	df000015 	stw	fp,0(sp)
10001d0c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d10:	01414004 	movi	r5,1280
10001d14:	01000084 	movi	r4,2
10001d18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001d1c:	01414304 	movi	r5,1292
10001d20:	0009883a 	mov	r4,zero
10001d24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001d28:	01400204 	movi	r5,8
10001d2c:	0009883a 	mov	r4,zero
10001d30:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001d34:	0140b404 	movi	r5,720
10001d38:	0009883a 	mov	r4,zero
10001d3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001d40:	01400044 	movi	r5,1
10001d44:	0009883a 	mov	r4,zero
10001d48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d4c:	014004c4 	movi	r5,19
10001d50:	0009883a 	mov	r4,zero
10001d54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001d58:	01414504 	movi	r5,1300
10001d5c:	0009883a 	mov	r4,zero
10001d60:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001d64:	0141a044 	movi	r5,1665
10001d68:	0009883a 	mov	r4,zero
10001d6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001d70:	01484004 	movi	r5,8448
10001d74:	0009883a 	mov	r4,zero
10001d78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001d7c:	000b883a 	mov	r5,zero
10001d80:	0009883a 	mov	r4,zero
10001d84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001d88:	01401ec4 	movi	r5,123
10001d8c:	0009883a 	mov	r4,zero
10001d90:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001d94:	01415104 	movi	r5,1348
10001d98:	0009883a 	mov	r4,zero
10001d9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001da0:	01400204 	movi	r5,8
10001da4:	0009883a 	mov	r4,zero
10001da8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001dac:	0140a404 	movi	r5,656
10001db0:	0009883a 	mov	r4,zero
10001db4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001db8:	01401044 	movi	r5,65
10001dbc:	0009883a 	mov	r4,zero
10001dc0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001dc4:	014004c4 	movi	r5,19
10001dc8:	0009883a 	mov	r4,zero
10001dcc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001dd0:	01414804 	movi	r5,1312
10001dd4:	0009883a 	mov	r4,zero
10001dd8:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001ddc:	000b883a 	mov	r5,zero
10001de0:	0009883a 	mov	r4,zero
10001de4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001de8:	000b883a 	mov	r5,zero
10001dec:	0009883a 	mov	r4,zero
10001df0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001df4:	01408404 	movi	r5,528
10001df8:	0009883a 	mov	r4,zero
10001dfc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001e00:	01401044 	movi	r5,65
10001e04:	0009883a 	mov	r4,zero
10001e08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001e0c:	014004c4 	movi	r5,19
10001e10:	0009883a 	mov	r4,zero
10001e14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001e18:	000b883a 	mov	r5,zero
10001e1c:	0009883a 	mov	r4,zero
10001e20:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e24:	01414004 	movi	r5,1280
10001e28:	01006c04 	movi	r4,432
10001e2c:	00011900 	call	10001190 <UsbWrite>

}
10001e30:	0001883a 	nop
10001e34:	e037883a 	mov	sp,fp
10001e38:	dfc00117 	ldw	ra,4(sp)
10001e3c:	df000017 	ldw	fp,0(sp)
10001e40:	dec00204 	addi	sp,sp,8
10001e44:	f800283a 	ret

10001e48 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001e48:	defffe04 	addi	sp,sp,-8
10001e4c:	dfc00115 	stw	ra,4(sp)
10001e50:	df000015 	stw	fp,0(sp)
10001e54:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001e58:	01414004 	movi	r5,1280
10001e5c:	01000084 	movi	r4,2
10001e60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001e64:	01414304 	movi	r5,1292
10001e68:	0009883a 	mov	r4,zero
10001e6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001e70:	01400204 	movi	r5,8
10001e74:	0009883a 	mov	r4,zero
10001e78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001e7c:	0140b404 	movi	r5,720
10001e80:	0009883a 	mov	r4,zero
10001e84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001e88:	01400044 	movi	r5,1
10001e8c:	0009883a 	mov	r4,zero
10001e90:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e94:	014004c4 	movi	r5,19
10001e98:	0009883a 	mov	r4,zero
10001e9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001ea0:	01414504 	movi	r5,1300
10001ea4:	0009883a 	mov	r4,zero
10001ea8:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001eac:	0141a044 	movi	r5,1665
10001eb0:	0009883a 	mov	r4,zero
10001eb4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001eb8:	01488004 	movi	r5,8704
10001ebc:	0009883a 	mov	r4,zero
10001ec0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001ec4:	000b883a 	mov	r5,zero
10001ec8:	0009883a 	mov	r4,zero
10001ecc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001ed0:	01401ec4 	movi	r5,123
10001ed4:	0009883a 	mov	r4,zero
10001ed8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001edc:	01416004 	movi	r5,1408
10001ee0:	0009883a 	mov	r4,zero
10001ee4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001ee8:	01400204 	movi	r5,8
10001eec:	0009883a 	mov	r4,zero
10001ef0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001ef4:	0140a404 	movi	r5,656
10001ef8:	0009883a 	mov	r4,zero
10001efc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001f00:	01401044 	movi	r5,65
10001f04:	0009883a 	mov	r4,zero
10001f08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001f0c:	014004c4 	movi	r5,19
10001f10:	0009883a 	mov	r4,zero
10001f14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001f18:	01414804 	movi	r5,1312
10001f1c:	0009883a 	mov	r4,zero
10001f20:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001f24:	01416204 	movi	r5,1416
10001f28:	0009883a 	mov	r4,zero
10001f2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001f30:	01400204 	movi	r5,8
10001f34:	0009883a 	mov	r4,zero
10001f38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f3c:	0140a404 	movi	r5,656
10001f40:	0009883a 	mov	r4,zero
10001f44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001f48:	01400044 	movi	r5,1
10001f4c:	0009883a 	mov	r4,zero
10001f50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001f54:	014004c4 	movi	r5,19
10001f58:	0009883a 	mov	r4,zero
10001f5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001f60:	01414b04 	movi	r5,1324
10001f64:	0009883a 	mov	r4,zero
10001f68:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001f6c:	01416404 	movi	r5,1424
10001f70:	0009883a 	mov	r4,zero
10001f74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001f78:	01400204 	movi	r5,8
10001f7c:	0009883a 	mov	r4,zero
10001f80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001f84:	0140a404 	movi	r5,656
10001f88:	0009883a 	mov	r4,zero
10001f8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001f90:	01401044 	movi	r5,65
10001f94:	0009883a 	mov	r4,zero
10001f98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001f9c:	014004c4 	movi	r5,19
10001fa0:	0009883a 	mov	r4,zero
10001fa4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001fa8:	01414e04 	movi	r5,1336
10001fac:	0009883a 	mov	r4,zero
10001fb0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001fb4:	01416604 	movi	r5,1432
10001fb8:	0009883a 	mov	r4,zero
10001fbc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001fc0:	01400204 	movi	r5,8
10001fc4:	0009883a 	mov	r4,zero
10001fc8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001fcc:	0140a404 	movi	r5,656
10001fd0:	0009883a 	mov	r4,zero
10001fd4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001fd8:	01400044 	movi	r5,1
10001fdc:	0009883a 	mov	r4,zero
10001fe0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001fe4:	014004c4 	movi	r5,19
10001fe8:	0009883a 	mov	r4,zero
10001fec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001ff0:	01415104 	movi	r5,1348
10001ff4:	0009883a 	mov	r4,zero
10001ff8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001ffc:	01416804 	movi	r5,1440
10002000:	0009883a 	mov	r4,zero
10002004:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002008:	01400204 	movi	r5,8
1000200c:	0009883a 	mov	r4,zero
10002010:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002014:	0140a404 	movi	r5,656
10002018:	0009883a 	mov	r4,zero
1000201c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002020:	01401044 	movi	r5,65
10002024:	0009883a 	mov	r4,zero
10002028:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000202c:	014004c4 	movi	r5,19
10002030:	0009883a 	mov	r4,zero
10002034:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002038:	01415404 	movi	r5,1360
1000203c:	0009883a 	mov	r4,zero
10002040:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10002044:	01416a04 	movi	r5,1448
10002048:	0009883a 	mov	r4,zero
1000204c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002050:	01400204 	movi	r5,8
10002054:	0009883a 	mov	r4,zero
10002058:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000205c:	0140a404 	movi	r5,656
10002060:	0009883a 	mov	r4,zero
10002064:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002068:	01400044 	movi	r5,1
1000206c:	0009883a 	mov	r4,zero
10002070:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002074:	014004c4 	movi	r5,19
10002078:	0009883a 	mov	r4,zero
1000207c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002080:	01415704 	movi	r5,1372
10002084:	0009883a 	mov	r4,zero
10002088:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
1000208c:	01416c04 	movi	r5,1456
10002090:	0009883a 	mov	r4,zero
10002094:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002098:	01400204 	movi	r5,8
1000209c:	0009883a 	mov	r4,zero
100020a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100020a4:	0140a404 	movi	r5,656
100020a8:	0009883a 	mov	r4,zero
100020ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100020b0:	01401044 	movi	r5,65
100020b4:	0009883a 	mov	r4,zero
100020b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100020bc:	014004c4 	movi	r5,19
100020c0:	0009883a 	mov	r4,zero
100020c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
100020c8:	01415a04 	movi	r5,1384
100020cc:	0009883a 	mov	r4,zero
100020d0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
100020d4:	01416e04 	movi	r5,1464
100020d8:	0009883a 	mov	r4,zero
100020dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
100020e0:	014000c4 	movi	r5,3
100020e4:	0009883a 	mov	r4,zero
100020e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100020ec:	0140a404 	movi	r5,656
100020f0:	0009883a 	mov	r4,zero
100020f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100020f8:	01400044 	movi	r5,1
100020fc:	0009883a 	mov	r4,zero
10002100:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002104:	014004c4 	movi	r5,19
10002108:	0009883a 	mov	r4,zero
1000210c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002110:	01415d04 	movi	r5,1396
10002114:	0009883a 	mov	r4,zero
10002118:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
1000211c:	000b883a 	mov	r5,zero
10002120:	0009883a 	mov	r4,zero
10002124:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002128:	000b883a 	mov	r5,zero
1000212c:	0009883a 	mov	r4,zero
10002130:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002134:	01408404 	movi	r5,528
10002138:	0009883a 	mov	r4,zero
1000213c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002140:	01401044 	movi	r5,65
10002144:	0009883a 	mov	r4,zero
10002148:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000214c:	014004c4 	movi	r5,19
10002150:	0009883a 	mov	r4,zero
10002154:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002158:	000b883a 	mov	r5,zero
1000215c:	0009883a 	mov	r4,zero
10002160:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002164:	01414004 	movi	r5,1280
10002168:	01006c04 	movi	r4,432
1000216c:	00011900 	call	10001190 <UsbWrite>

}
10002170:	0001883a 	nop
10002174:	e037883a 	mov	sp,fp
10002178:	dfc00117 	ldw	ra,4(sp)
1000217c:	df000017 	ldw	fp,0(sp)
10002180:	dec00204 	addi	sp,sp,8
10002184:	f800283a 	ret

10002188 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002188:	defffd04 	addi	sp,sp,-12
1000218c:	dfc00215 	stw	ra,8(sp)
10002190:	df000115 	stw	fp,4(sp)
10002194:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002198:	01005104 	movi	r4,324
1000219c:	00011e80 	call	100011e8 <UsbRead>
100021a0:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100021a4:	000b883a 	mov	r5,zero
100021a8:	01005104 	movi	r4,324
100021ac:	00011900 	call	10001190 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100021b0:	00000d06 	br	100021e8 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100021b4:	e0bfff0b 	ldhu	r2,-4(fp)
100021b8:	10000526 	beq	r2,zero,100021d0 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100021bc:	e0bfff0b 	ldhu	r2,-4(fp)
100021c0:	100b883a 	mov	r5,r2
100021c4:	01040034 	movhi	r4,4096
100021c8:	2115d504 	addi	r4,r4,22356
100021cc:	00023480 	call	10002348 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100021d0:	01005104 	movi	r4,324
100021d4:	00011e80 	call	100011e8 <UsbRead>
100021d8:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100021dc:	000b883a 	mov	r5,zero
100021e0:	01005104 	movi	r4,324
100021e4:	00011900 	call	10001190 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100021e8:	e0bfff0b 	ldhu	r2,-4(fp)
100021ec:	10840018 	cmpnei	r2,r2,4096
100021f0:	103ff01e 	bne	r2,zero,100021b4 <__alt_data_end+0xf80021b4>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
100021f4:	e0bfff0b 	ldhu	r2,-4(fp)
}
100021f8:	e037883a 	mov	sp,fp
100021fc:	dfc00117 	ldw	ra,4(sp)
10002200:	df000017 	ldw	fp,0(sp)
10002204:	dec00204 	addi	sp,sp,8
10002208:	f800283a 	ret

1000220c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
1000220c:	defffd04 	addi	sp,sp,-12
10002210:	dfc00215 	stw	ra,8(sp)
10002214:	df000115 	stw	fp,4(sp)
10002218:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
1000221c:	010000c4 	movi	r4,3
10002220:	00003640 	call	10000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002224:	01005104 	movi	r4,324
10002228:	00011e80 	call	100011e8 <UsbRead>
1000222c:	10bfffcc 	andi	r2,r2,65535
10002230:	10840018 	cmpnei	r2,r2,4096
10002234:	1000091e 	bne	r2,zero,1000225c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002238:	000b883a 	mov	r5,zero
1000223c:	01005104 	movi	r4,324
10002240:	00011900 	call	10001190 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002244:	0001883a 	nop
10002248:	010000c4 	movi	r4,3
1000224c:	00003640 	call	10000364 <IO_read>
10002250:	10bfffcc 	andi	r2,r2,65535
10002254:	1080040c 	andi	r2,r2,16
10002258:	103ffb26 	beq	r2,zero,10002248 <__alt_data_end+0xf8002248>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
1000225c:	01414204 	movi	r5,1288
10002260:	01000084 	movi	r4,2
10002264:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002268:	0009883a 	mov	r4,zero
1000226c:	00003640 	call	10000364 <IO_read>
10002270:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10002274:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002278:	e037883a 	mov	sp,fp
1000227c:	dfc00117 	ldw	ra,4(sp)
10002280:	df000017 	ldw	fp,0(sp)
10002284:	dec00204 	addi	sp,sp,8
10002288:	f800283a 	ret

1000228c <UsbPrintMem>:


void UsbPrintMem()
{
1000228c:	defffc04 	addi	sp,sp,-16
10002290:	dfc00315 	stw	ra,12(sp)
10002294:	df000215 	stw	fp,8(sp)
10002298:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
1000229c:	01414004 	movi	r5,1280
100022a0:	01000084 	movi	r4,2
100022a4:	00002f40 	call	100002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
100022a8:	e03ffe15 	stw	zero,-8(fp)
100022ac:	00000e06 	br	100022e8 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100022b0:	0009883a 	mov	r4,zero
100022b4:	00003640 	call	10000364 <IO_read>
100022b8:	10bfffcc 	andi	r2,r2,65535
100022bc:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100022c0:	e0bffe17 	ldw	r2,-8(fp)
100022c4:	10814004 	addi	r2,r2,1280
100022c8:	e1bfff17 	ldw	r6,-4(fp)
100022cc:	100b883a 	mov	r5,r2
100022d0:	01040034 	movhi	r4,4096
100022d4:	2115dd04 	addi	r4,r4,22388
100022d8:	00023480 	call	10002348 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
100022dc:	e0bffe17 	ldw	r2,-8(fp)
100022e0:	10800084 	addi	r2,r2,2
100022e4:	e0bffe15 	stw	r2,-8(fp)
100022e8:	e0bffe17 	ldw	r2,-8(fp)
100022ec:	10803250 	cmplti	r2,r2,201
100022f0:	103fef1e 	bne	r2,zero,100022b0 <__alt_data_end+0xf80022b0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100022f4:	0001883a 	nop
100022f8:	e037883a 	mov	sp,fp
100022fc:	dfc00117 	ldw	ra,4(sp)
10002300:	df000017 	ldw	fp,0(sp)
10002304:	dec00204 	addi	sp,sp,8
10002308:	f800283a 	ret

1000230c <_printf_r>:
1000230c:	defffd04 	addi	sp,sp,-12
10002310:	dfc00015 	stw	ra,0(sp)
10002314:	d9800115 	stw	r6,4(sp)
10002318:	d9c00215 	stw	r7,8(sp)
1000231c:	20c00217 	ldw	r3,8(r4)
10002320:	01840034 	movhi	r6,4096
10002324:	318a7e04 	addi	r6,r6,10744
10002328:	19800115 	stw	r6,4(r3)
1000232c:	280d883a 	mov	r6,r5
10002330:	21400217 	ldw	r5,8(r4)
10002334:	d9c00104 	addi	r7,sp,4
10002338:	00024b00 	call	100024b0 <___vfprintf_internal_r>
1000233c:	dfc00017 	ldw	ra,0(sp)
10002340:	dec00304 	addi	sp,sp,12
10002344:	f800283a 	ret

10002348 <printf>:
10002348:	defffc04 	addi	sp,sp,-16
1000234c:	dfc00015 	stw	ra,0(sp)
10002350:	d9400115 	stw	r5,4(sp)
10002354:	d9800215 	stw	r6,8(sp)
10002358:	d9c00315 	stw	r7,12(sp)
1000235c:	00840034 	movhi	r2,4096
10002360:	109aab04 	addi	r2,r2,27308
10002364:	10800017 	ldw	r2,0(r2)
10002368:	01440034 	movhi	r5,4096
1000236c:	294a7e04 	addi	r5,r5,10744
10002370:	10c00217 	ldw	r3,8(r2)
10002374:	d9800104 	addi	r6,sp,4
10002378:	19400115 	stw	r5,4(r3)
1000237c:	200b883a 	mov	r5,r4
10002380:	11000217 	ldw	r4,8(r2)
10002384:	00029dc0 	call	100029dc <__vfprintf_internal>
10002388:	dfc00017 	ldw	ra,0(sp)
1000238c:	dec00404 	addi	sp,sp,16
10002390:	f800283a 	ret

10002394 <_puts_r>:
10002394:	defffd04 	addi	sp,sp,-12
10002398:	dc000015 	stw	r16,0(sp)
1000239c:	2021883a 	mov	r16,r4
100023a0:	2809883a 	mov	r4,r5
100023a4:	dfc00215 	stw	ra,8(sp)
100023a8:	dc400115 	stw	r17,4(sp)
100023ac:	2823883a 	mov	r17,r5
100023b0:	00024280 	call	10002428 <strlen>
100023b4:	81400217 	ldw	r5,8(r16)
100023b8:	01040034 	movhi	r4,4096
100023bc:	210a7e04 	addi	r4,r4,10744
100023c0:	29000115 	stw	r4,4(r5)
100023c4:	100f883a 	mov	r7,r2
100023c8:	880d883a 	mov	r6,r17
100023cc:	8009883a 	mov	r4,r16
100023d0:	00029f80 	call	100029f8 <__sfvwrite_small_dev>
100023d4:	00ffffc4 	movi	r3,-1
100023d8:	10c00926 	beq	r2,r3,10002400 <_puts_r+0x6c>
100023dc:	81400217 	ldw	r5,8(r16)
100023e0:	01840034 	movhi	r6,4096
100023e4:	01c00044 	movi	r7,1
100023e8:	28800117 	ldw	r2,4(r5)
100023ec:	3195e204 	addi	r6,r6,22408
100023f0:	8009883a 	mov	r4,r16
100023f4:	103ee83a 	callr	r2
100023f8:	10bfffe0 	cmpeqi	r2,r2,-1
100023fc:	0085c83a 	sub	r2,zero,r2
10002400:	dfc00217 	ldw	ra,8(sp)
10002404:	dc400117 	ldw	r17,4(sp)
10002408:	dc000017 	ldw	r16,0(sp)
1000240c:	dec00304 	addi	sp,sp,12
10002410:	f800283a 	ret

10002414 <puts>:
10002414:	00840034 	movhi	r2,4096
10002418:	109aab04 	addi	r2,r2,27308
1000241c:	200b883a 	mov	r5,r4
10002420:	11000017 	ldw	r4,0(r2)
10002424:	00023941 	jmpi	10002394 <_puts_r>

10002428 <strlen>:
10002428:	2005883a 	mov	r2,r4
1000242c:	10c00007 	ldb	r3,0(r2)
10002430:	18000226 	beq	r3,zero,1000243c <strlen+0x14>
10002434:	10800044 	addi	r2,r2,1
10002438:	003ffc06 	br	1000242c <__alt_data_end+0xf800242c>
1000243c:	1105c83a 	sub	r2,r2,r4
10002440:	f800283a 	ret

10002444 <print_repeat>:
10002444:	defffb04 	addi	sp,sp,-20
10002448:	dc800315 	stw	r18,12(sp)
1000244c:	dc400215 	stw	r17,8(sp)
10002450:	dc000115 	stw	r16,4(sp)
10002454:	dfc00415 	stw	ra,16(sp)
10002458:	2025883a 	mov	r18,r4
1000245c:	2823883a 	mov	r17,r5
10002460:	d9800005 	stb	r6,0(sp)
10002464:	3821883a 	mov	r16,r7
10002468:	04000a0e 	bge	zero,r16,10002494 <print_repeat+0x50>
1000246c:	88800117 	ldw	r2,4(r17)
10002470:	01c00044 	movi	r7,1
10002474:	d80d883a 	mov	r6,sp
10002478:	880b883a 	mov	r5,r17
1000247c:	9009883a 	mov	r4,r18
10002480:	103ee83a 	callr	r2
10002484:	843fffc4 	addi	r16,r16,-1
10002488:	103ff726 	beq	r2,zero,10002468 <__alt_data_end+0xf8002468>
1000248c:	00bfffc4 	movi	r2,-1
10002490:	00000106 	br	10002498 <print_repeat+0x54>
10002494:	0005883a 	mov	r2,zero
10002498:	dfc00417 	ldw	ra,16(sp)
1000249c:	dc800317 	ldw	r18,12(sp)
100024a0:	dc400217 	ldw	r17,8(sp)
100024a4:	dc000117 	ldw	r16,4(sp)
100024a8:	dec00504 	addi	sp,sp,20
100024ac:	f800283a 	ret

100024b0 <___vfprintf_internal_r>:
100024b0:	deffe504 	addi	sp,sp,-108
100024b4:	d8c00804 	addi	r3,sp,32
100024b8:	ddc01815 	stw	r23,96(sp)
100024bc:	dd801715 	stw	r22,92(sp)
100024c0:	dd401615 	stw	r21,88(sp)
100024c4:	dd001515 	stw	r20,84(sp)
100024c8:	dcc01415 	stw	r19,80(sp)
100024cc:	dc801315 	stw	r18,76(sp)
100024d0:	dc401215 	stw	r17,72(sp)
100024d4:	dc001115 	stw	r16,68(sp)
100024d8:	dfc01a15 	stw	ra,104(sp)
100024dc:	df001915 	stw	fp,100(sp)
100024e0:	2029883a 	mov	r20,r4
100024e4:	2823883a 	mov	r17,r5
100024e8:	382d883a 	mov	r22,r7
100024ec:	d9800f15 	stw	r6,60(sp)
100024f0:	0021883a 	mov	r16,zero
100024f4:	d8000e15 	stw	zero,56(sp)
100024f8:	d8000a15 	stw	zero,40(sp)
100024fc:	002b883a 	mov	r21,zero
10002500:	0027883a 	mov	r19,zero
10002504:	0025883a 	mov	r18,zero
10002508:	d8000c15 	stw	zero,48(sp)
1000250c:	d8000b15 	stw	zero,44(sp)
10002510:	002f883a 	mov	r23,zero
10002514:	d8c00915 	stw	r3,36(sp)
10002518:	d8c00f17 	ldw	r3,60(sp)
1000251c:	19000003 	ldbu	r4,0(r3)
10002520:	20803fcc 	andi	r2,r4,255
10002524:	1080201c 	xori	r2,r2,128
10002528:	10bfe004 	addi	r2,r2,-128
1000252c:	10011e26 	beq	r2,zero,100029a8 <___vfprintf_internal_r+0x4f8>
10002530:	00c00044 	movi	r3,1
10002534:	b8c01426 	beq	r23,r3,10002588 <___vfprintf_internal_r+0xd8>
10002538:	1dc00216 	blt	r3,r23,10002544 <___vfprintf_internal_r+0x94>
1000253c:	b8000626 	beq	r23,zero,10002558 <___vfprintf_internal_r+0xa8>
10002540:	00011506 	br	10002998 <___vfprintf_internal_r+0x4e8>
10002544:	01400084 	movi	r5,2
10002548:	b9401d26 	beq	r23,r5,100025c0 <___vfprintf_internal_r+0x110>
1000254c:	014000c4 	movi	r5,3
10002550:	b9402b26 	beq	r23,r5,10002600 <___vfprintf_internal_r+0x150>
10002554:	00011006 	br	10002998 <___vfprintf_internal_r+0x4e8>
10002558:	01400944 	movi	r5,37
1000255c:	1140fc26 	beq	r2,r5,10002950 <___vfprintf_internal_r+0x4a0>
10002560:	88800117 	ldw	r2,4(r17)
10002564:	d9000005 	stb	r4,0(sp)
10002568:	01c00044 	movi	r7,1
1000256c:	d80d883a 	mov	r6,sp
10002570:	880b883a 	mov	r5,r17
10002574:	a009883a 	mov	r4,r20
10002578:	103ee83a 	callr	r2
1000257c:	1000d81e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
10002580:	84000044 	addi	r16,r16,1
10002584:	00010406 	br	10002998 <___vfprintf_internal_r+0x4e8>
10002588:	01400c04 	movi	r5,48
1000258c:	1140fa26 	beq	r2,r5,10002978 <___vfprintf_internal_r+0x4c8>
10002590:	01400944 	movi	r5,37
10002594:	11400a1e 	bne	r2,r5,100025c0 <___vfprintf_internal_r+0x110>
10002598:	d8800005 	stb	r2,0(sp)
1000259c:	88800117 	ldw	r2,4(r17)
100025a0:	b80f883a 	mov	r7,r23
100025a4:	d80d883a 	mov	r6,sp
100025a8:	880b883a 	mov	r5,r17
100025ac:	a009883a 	mov	r4,r20
100025b0:	103ee83a 	callr	r2
100025b4:	1000ca1e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
100025b8:	84000044 	addi	r16,r16,1
100025bc:	0000f506 	br	10002994 <___vfprintf_internal_r+0x4e4>
100025c0:	25fff404 	addi	r23,r4,-48
100025c4:	bdc03fcc 	andi	r23,r23,255
100025c8:	00c00244 	movi	r3,9
100025cc:	1dc00936 	bltu	r3,r23,100025f4 <___vfprintf_internal_r+0x144>
100025d0:	00bfffc4 	movi	r2,-1
100025d4:	90800426 	beq	r18,r2,100025e8 <___vfprintf_internal_r+0x138>
100025d8:	01400284 	movi	r5,10
100025dc:	9009883a 	mov	r4,r18
100025e0:	0002cbc0 	call	10002cbc <__mulsi3>
100025e4:	00000106 	br	100025ec <___vfprintf_internal_r+0x13c>
100025e8:	0005883a 	mov	r2,zero
100025ec:	b8a5883a 	add	r18,r23,r2
100025f0:	0000e206 	br	1000297c <___vfprintf_internal_r+0x4cc>
100025f4:	01400b84 	movi	r5,46
100025f8:	1140e426 	beq	r2,r5,1000298c <___vfprintf_internal_r+0x4dc>
100025fc:	05c00084 	movi	r23,2
10002600:	213ff404 	addi	r4,r4,-48
10002604:	27003fcc 	andi	fp,r4,255
10002608:	00c00244 	movi	r3,9
1000260c:	1f000936 	bltu	r3,fp,10002634 <___vfprintf_internal_r+0x184>
10002610:	00bfffc4 	movi	r2,-1
10002614:	98800426 	beq	r19,r2,10002628 <___vfprintf_internal_r+0x178>
10002618:	01400284 	movi	r5,10
1000261c:	9809883a 	mov	r4,r19
10002620:	0002cbc0 	call	10002cbc <__mulsi3>
10002624:	00000106 	br	1000262c <___vfprintf_internal_r+0x17c>
10002628:	0005883a 	mov	r2,zero
1000262c:	e0a7883a 	add	r19,fp,r2
10002630:	0000d906 	br	10002998 <___vfprintf_internal_r+0x4e8>
10002634:	00c01b04 	movi	r3,108
10002638:	10c0d226 	beq	r2,r3,10002984 <___vfprintf_internal_r+0x4d4>
1000263c:	013fffc4 	movi	r4,-1
10002640:	99000226 	beq	r19,r4,1000264c <___vfprintf_internal_r+0x19c>
10002644:	d8000b15 	stw	zero,44(sp)
10002648:	00000106 	br	10002650 <___vfprintf_internal_r+0x1a0>
1000264c:	04c00044 	movi	r19,1
10002650:	01001a44 	movi	r4,105
10002654:	11001626 	beq	r2,r4,100026b0 <___vfprintf_internal_r+0x200>
10002658:	20800916 	blt	r4,r2,10002680 <___vfprintf_internal_r+0x1d0>
1000265c:	010018c4 	movi	r4,99
10002660:	11008826 	beq	r2,r4,10002884 <___vfprintf_internal_r+0x3d4>
10002664:	01001904 	movi	r4,100
10002668:	11001126 	beq	r2,r4,100026b0 <___vfprintf_internal_r+0x200>
1000266c:	01001604 	movi	r4,88
10002670:	1100c81e 	bne	r2,r4,10002994 <___vfprintf_internal_r+0x4e4>
10002674:	00c00044 	movi	r3,1
10002678:	d8c00e15 	stw	r3,56(sp)
1000267c:	00001506 	br	100026d4 <___vfprintf_internal_r+0x224>
10002680:	01001cc4 	movi	r4,115
10002684:	11009826 	beq	r2,r4,100028e8 <___vfprintf_internal_r+0x438>
10002688:	20800416 	blt	r4,r2,1000269c <___vfprintf_internal_r+0x1ec>
1000268c:	01001bc4 	movi	r4,111
10002690:	1100c01e 	bne	r2,r4,10002994 <___vfprintf_internal_r+0x4e4>
10002694:	05400204 	movi	r21,8
10002698:	00000f06 	br	100026d8 <___vfprintf_internal_r+0x228>
1000269c:	01001d44 	movi	r4,117
100026a0:	11000d26 	beq	r2,r4,100026d8 <___vfprintf_internal_r+0x228>
100026a4:	01001e04 	movi	r4,120
100026a8:	11000a26 	beq	r2,r4,100026d4 <___vfprintf_internal_r+0x224>
100026ac:	0000b906 	br	10002994 <___vfprintf_internal_r+0x4e4>
100026b0:	d8c00a17 	ldw	r3,40(sp)
100026b4:	b7000104 	addi	fp,r22,4
100026b8:	18000726 	beq	r3,zero,100026d8 <___vfprintf_internal_r+0x228>
100026bc:	df000d15 	stw	fp,52(sp)
100026c0:	b5c00017 	ldw	r23,0(r22)
100026c4:	b800080e 	bge	r23,zero,100026e8 <___vfprintf_internal_r+0x238>
100026c8:	05efc83a 	sub	r23,zero,r23
100026cc:	02400044 	movi	r9,1
100026d0:	00000606 	br	100026ec <___vfprintf_internal_r+0x23c>
100026d4:	05400404 	movi	r21,16
100026d8:	b0c00104 	addi	r3,r22,4
100026dc:	d8c00d15 	stw	r3,52(sp)
100026e0:	b5c00017 	ldw	r23,0(r22)
100026e4:	d8000a15 	stw	zero,40(sp)
100026e8:	0013883a 	mov	r9,zero
100026ec:	d839883a 	mov	fp,sp
100026f0:	b8001726 	beq	r23,zero,10002750 <___vfprintf_internal_r+0x2a0>
100026f4:	a80b883a 	mov	r5,r21
100026f8:	b809883a 	mov	r4,r23
100026fc:	da401015 	stw	r9,64(sp)
10002700:	0002c000 	call	10002c00 <__udivsi3>
10002704:	a80b883a 	mov	r5,r21
10002708:	1009883a 	mov	r4,r2
1000270c:	102d883a 	mov	r22,r2
10002710:	0002cbc0 	call	10002cbc <__mulsi3>
10002714:	b885c83a 	sub	r2,r23,r2
10002718:	00c00244 	movi	r3,9
1000271c:	da401017 	ldw	r9,64(sp)
10002720:	18800216 	blt	r3,r2,1000272c <___vfprintf_internal_r+0x27c>
10002724:	10800c04 	addi	r2,r2,48
10002728:	00000506 	br	10002740 <___vfprintf_internal_r+0x290>
1000272c:	d8c00e17 	ldw	r3,56(sp)
10002730:	18000226 	beq	r3,zero,1000273c <___vfprintf_internal_r+0x28c>
10002734:	10800dc4 	addi	r2,r2,55
10002738:	00000106 	br	10002740 <___vfprintf_internal_r+0x290>
1000273c:	108015c4 	addi	r2,r2,87
10002740:	e0800005 	stb	r2,0(fp)
10002744:	b02f883a 	mov	r23,r22
10002748:	e7000044 	addi	fp,fp,1
1000274c:	003fe806 	br	100026f0 <__alt_data_end+0xf80026f0>
10002750:	e6efc83a 	sub	r23,fp,sp
10002754:	9dc5c83a 	sub	r2,r19,r23
10002758:	0080090e 	bge	zero,r2,10002780 <___vfprintf_internal_r+0x2d0>
1000275c:	e085883a 	add	r2,fp,r2
10002760:	01400c04 	movi	r5,48
10002764:	d8c00917 	ldw	r3,36(sp)
10002768:	e009883a 	mov	r4,fp
1000276c:	e0c0032e 	bgeu	fp,r3,1000277c <___vfprintf_internal_r+0x2cc>
10002770:	e7000044 	addi	fp,fp,1
10002774:	21400005 	stb	r5,0(r4)
10002778:	e0bffa1e 	bne	fp,r2,10002764 <__alt_data_end+0xf8002764>
1000277c:	e6efc83a 	sub	r23,fp,sp
10002780:	d8c00b17 	ldw	r3,44(sp)
10002784:	4dd1883a 	add	r8,r9,r23
10002788:	922dc83a 	sub	r22,r18,r8
1000278c:	18001626 	beq	r3,zero,100027e8 <___vfprintf_internal_r+0x338>
10002790:	48000a26 	beq	r9,zero,100027bc <___vfprintf_internal_r+0x30c>
10002794:	00800b44 	movi	r2,45
10002798:	d8800805 	stb	r2,32(sp)
1000279c:	88800117 	ldw	r2,4(r17)
100027a0:	01c00044 	movi	r7,1
100027a4:	d9800804 	addi	r6,sp,32
100027a8:	880b883a 	mov	r5,r17
100027ac:	a009883a 	mov	r4,r20
100027b0:	103ee83a 	callr	r2
100027b4:	10004a1e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
100027b8:	84000044 	addi	r16,r16,1
100027bc:	0580070e 	bge	zero,r22,100027dc <___vfprintf_internal_r+0x32c>
100027c0:	b00f883a 	mov	r7,r22
100027c4:	01800c04 	movi	r6,48
100027c8:	880b883a 	mov	r5,r17
100027cc:	a009883a 	mov	r4,r20
100027d0:	00024440 	call	10002444 <print_repeat>
100027d4:	1000421e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
100027d8:	85a1883a 	add	r16,r16,r22
100027dc:	e02d883a 	mov	r22,fp
100027e0:	bf2fc83a 	sub	r23,r23,fp
100027e4:	00002006 	br	10002868 <___vfprintf_internal_r+0x3b8>
100027e8:	0580090e 	bge	zero,r22,10002810 <___vfprintf_internal_r+0x360>
100027ec:	b00f883a 	mov	r7,r22
100027f0:	01800804 	movi	r6,32
100027f4:	880b883a 	mov	r5,r17
100027f8:	a009883a 	mov	r4,r20
100027fc:	da401015 	stw	r9,64(sp)
10002800:	00024440 	call	10002444 <print_repeat>
10002804:	da401017 	ldw	r9,64(sp)
10002808:	1000351e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
1000280c:	85a1883a 	add	r16,r16,r22
10002810:	483ff226 	beq	r9,zero,100027dc <__alt_data_end+0xf80027dc>
10002814:	00800b44 	movi	r2,45
10002818:	d8800805 	stb	r2,32(sp)
1000281c:	88800117 	ldw	r2,4(r17)
10002820:	01c00044 	movi	r7,1
10002824:	d9800804 	addi	r6,sp,32
10002828:	880b883a 	mov	r5,r17
1000282c:	a009883a 	mov	r4,r20
10002830:	103ee83a 	callr	r2
10002834:	10002a1e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
10002838:	84000044 	addi	r16,r16,1
1000283c:	003fe706 	br	100027dc <__alt_data_end+0xf80027dc>
10002840:	b5bfffc4 	addi	r22,r22,-1
10002844:	b0800003 	ldbu	r2,0(r22)
10002848:	01c00044 	movi	r7,1
1000284c:	d9800804 	addi	r6,sp,32
10002850:	d8800805 	stb	r2,32(sp)
10002854:	88800117 	ldw	r2,4(r17)
10002858:	880b883a 	mov	r5,r17
1000285c:	a009883a 	mov	r4,r20
10002860:	103ee83a 	callr	r2
10002864:	10001e1e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
10002868:	8585c83a 	sub	r2,r16,r22
1000286c:	b5c9883a 	add	r4,r22,r23
10002870:	e085883a 	add	r2,fp,r2
10002874:	013ff216 	blt	zero,r4,10002840 <__alt_data_end+0xf8002840>
10002878:	1021883a 	mov	r16,r2
1000287c:	dd800d17 	ldw	r22,52(sp)
10002880:	00004406 	br	10002994 <___vfprintf_internal_r+0x4e4>
10002884:	00800044 	movi	r2,1
10002888:	1480080e 	bge	r2,r18,100028ac <___vfprintf_internal_r+0x3fc>
1000288c:	95ffffc4 	addi	r23,r18,-1
10002890:	b80f883a 	mov	r7,r23
10002894:	01800804 	movi	r6,32
10002898:	880b883a 	mov	r5,r17
1000289c:	a009883a 	mov	r4,r20
100028a0:	00024440 	call	10002444 <print_repeat>
100028a4:	10000e1e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
100028a8:	85e1883a 	add	r16,r16,r23
100028ac:	b0800017 	ldw	r2,0(r22)
100028b0:	01c00044 	movi	r7,1
100028b4:	d80d883a 	mov	r6,sp
100028b8:	d8800005 	stb	r2,0(sp)
100028bc:	88800117 	ldw	r2,4(r17)
100028c0:	880b883a 	mov	r5,r17
100028c4:	a009883a 	mov	r4,r20
100028c8:	b5c00104 	addi	r23,r22,4
100028cc:	103ee83a 	callr	r2
100028d0:	1000031e 	bne	r2,zero,100028e0 <___vfprintf_internal_r+0x430>
100028d4:	84000044 	addi	r16,r16,1
100028d8:	b82d883a 	mov	r22,r23
100028dc:	00002d06 	br	10002994 <___vfprintf_internal_r+0x4e4>
100028e0:	00bfffc4 	movi	r2,-1
100028e4:	00003106 	br	100029ac <___vfprintf_internal_r+0x4fc>
100028e8:	b5c00017 	ldw	r23,0(r22)
100028ec:	b7000104 	addi	fp,r22,4
100028f0:	b809883a 	mov	r4,r23
100028f4:	00024280 	call	10002428 <strlen>
100028f8:	9091c83a 	sub	r8,r18,r2
100028fc:	102d883a 	mov	r22,r2
10002900:	0200090e 	bge	zero,r8,10002928 <___vfprintf_internal_r+0x478>
10002904:	400f883a 	mov	r7,r8
10002908:	01800804 	movi	r6,32
1000290c:	880b883a 	mov	r5,r17
10002910:	a009883a 	mov	r4,r20
10002914:	da001015 	stw	r8,64(sp)
10002918:	00024440 	call	10002444 <print_repeat>
1000291c:	da001017 	ldw	r8,64(sp)
10002920:	103fef1e 	bne	r2,zero,100028e0 <__alt_data_end+0xf80028e0>
10002924:	8221883a 	add	r16,r16,r8
10002928:	88800117 	ldw	r2,4(r17)
1000292c:	b00f883a 	mov	r7,r22
10002930:	b80d883a 	mov	r6,r23
10002934:	880b883a 	mov	r5,r17
10002938:	a009883a 	mov	r4,r20
1000293c:	103ee83a 	callr	r2
10002940:	103fe71e 	bne	r2,zero,100028e0 <__alt_data_end+0xf80028e0>
10002944:	85a1883a 	add	r16,r16,r22
10002948:	e02d883a 	mov	r22,fp
1000294c:	00001106 	br	10002994 <___vfprintf_internal_r+0x4e4>
10002950:	00c00044 	movi	r3,1
10002954:	04ffffc4 	movi	r19,-1
10002958:	d8000e15 	stw	zero,56(sp)
1000295c:	d8c00a15 	stw	r3,40(sp)
10002960:	05400284 	movi	r21,10
10002964:	9825883a 	mov	r18,r19
10002968:	d8000c15 	stw	zero,48(sp)
1000296c:	d8000b15 	stw	zero,44(sp)
10002970:	182f883a 	mov	r23,r3
10002974:	00000806 	br	10002998 <___vfprintf_internal_r+0x4e8>
10002978:	ddc00b15 	stw	r23,44(sp)
1000297c:	05c00084 	movi	r23,2
10002980:	00000506 	br	10002998 <___vfprintf_internal_r+0x4e8>
10002984:	00c00044 	movi	r3,1
10002988:	d8c00c15 	stw	r3,48(sp)
1000298c:	05c000c4 	movi	r23,3
10002990:	00000106 	br	10002998 <___vfprintf_internal_r+0x4e8>
10002994:	002f883a 	mov	r23,zero
10002998:	d8c00f17 	ldw	r3,60(sp)
1000299c:	18c00044 	addi	r3,r3,1
100029a0:	d8c00f15 	stw	r3,60(sp)
100029a4:	003edc06 	br	10002518 <__alt_data_end+0xf8002518>
100029a8:	8005883a 	mov	r2,r16
100029ac:	dfc01a17 	ldw	ra,104(sp)
100029b0:	df001917 	ldw	fp,100(sp)
100029b4:	ddc01817 	ldw	r23,96(sp)
100029b8:	dd801717 	ldw	r22,92(sp)
100029bc:	dd401617 	ldw	r21,88(sp)
100029c0:	dd001517 	ldw	r20,84(sp)
100029c4:	dcc01417 	ldw	r19,80(sp)
100029c8:	dc801317 	ldw	r18,76(sp)
100029cc:	dc401217 	ldw	r17,72(sp)
100029d0:	dc001117 	ldw	r16,68(sp)
100029d4:	dec01b04 	addi	sp,sp,108
100029d8:	f800283a 	ret

100029dc <__vfprintf_internal>:
100029dc:	00840034 	movhi	r2,4096
100029e0:	109aab04 	addi	r2,r2,27308
100029e4:	300f883a 	mov	r7,r6
100029e8:	280d883a 	mov	r6,r5
100029ec:	200b883a 	mov	r5,r4
100029f0:	11000017 	ldw	r4,0(r2)
100029f4:	00024b01 	jmpi	100024b0 <___vfprintf_internal_r>

100029f8 <__sfvwrite_small_dev>:
100029f8:	2880000b 	ldhu	r2,0(r5)
100029fc:	1080020c 	andi	r2,r2,8
10002a00:	10002126 	beq	r2,zero,10002a88 <__sfvwrite_small_dev+0x90>
10002a04:	2880008f 	ldh	r2,2(r5)
10002a08:	defffa04 	addi	sp,sp,-24
10002a0c:	dc000015 	stw	r16,0(sp)
10002a10:	dfc00515 	stw	ra,20(sp)
10002a14:	dd000415 	stw	r20,16(sp)
10002a18:	dcc00315 	stw	r19,12(sp)
10002a1c:	dc800215 	stw	r18,8(sp)
10002a20:	dc400115 	stw	r17,4(sp)
10002a24:	2821883a 	mov	r16,r5
10002a28:	10001216 	blt	r2,zero,10002a74 <__sfvwrite_small_dev+0x7c>
10002a2c:	2027883a 	mov	r19,r4
10002a30:	3025883a 	mov	r18,r6
10002a34:	3823883a 	mov	r17,r7
10002a38:	05010004 	movi	r20,1024
10002a3c:	04400b0e 	bge	zero,r17,10002a6c <__sfvwrite_small_dev+0x74>
10002a40:	880f883a 	mov	r7,r17
10002a44:	a440010e 	bge	r20,r17,10002a4c <__sfvwrite_small_dev+0x54>
10002a48:	01c10004 	movi	r7,1024
10002a4c:	8140008f 	ldh	r5,2(r16)
10002a50:	900d883a 	mov	r6,r18
10002a54:	9809883a 	mov	r4,r19
10002a58:	0002ab00 	call	10002ab0 <_write_r>
10002a5c:	0080050e 	bge	zero,r2,10002a74 <__sfvwrite_small_dev+0x7c>
10002a60:	88a3c83a 	sub	r17,r17,r2
10002a64:	90a5883a 	add	r18,r18,r2
10002a68:	003ff406 	br	10002a3c <__alt_data_end+0xf8002a3c>
10002a6c:	0005883a 	mov	r2,zero
10002a70:	00000706 	br	10002a90 <__sfvwrite_small_dev+0x98>
10002a74:	8080000b 	ldhu	r2,0(r16)
10002a78:	10801014 	ori	r2,r2,64
10002a7c:	8080000d 	sth	r2,0(r16)
10002a80:	00bfffc4 	movi	r2,-1
10002a84:	00000206 	br	10002a90 <__sfvwrite_small_dev+0x98>
10002a88:	00bfffc4 	movi	r2,-1
10002a8c:	f800283a 	ret
10002a90:	dfc00517 	ldw	ra,20(sp)
10002a94:	dd000417 	ldw	r20,16(sp)
10002a98:	dcc00317 	ldw	r19,12(sp)
10002a9c:	dc800217 	ldw	r18,8(sp)
10002aa0:	dc400117 	ldw	r17,4(sp)
10002aa4:	dc000017 	ldw	r16,0(sp)
10002aa8:	dec00604 	addi	sp,sp,24
10002aac:	f800283a 	ret

10002ab0 <_write_r>:
10002ab0:	defffd04 	addi	sp,sp,-12
10002ab4:	dc000015 	stw	r16,0(sp)
10002ab8:	04040034 	movhi	r16,4096
10002abc:	dc400115 	stw	r17,4(sp)
10002ac0:	841f7b04 	addi	r16,r16,32236
10002ac4:	2023883a 	mov	r17,r4
10002ac8:	2809883a 	mov	r4,r5
10002acc:	300b883a 	mov	r5,r6
10002ad0:	380d883a 	mov	r6,r7
10002ad4:	dfc00215 	stw	ra,8(sp)
10002ad8:	80000015 	stw	zero,0(r16)
10002adc:	0002eb80 	call	10002eb8 <write>
10002ae0:	00ffffc4 	movi	r3,-1
10002ae4:	10c0031e 	bne	r2,r3,10002af4 <_write_r+0x44>
10002ae8:	80c00017 	ldw	r3,0(r16)
10002aec:	18000126 	beq	r3,zero,10002af4 <_write_r+0x44>
10002af0:	88c00015 	stw	r3,0(r17)
10002af4:	dfc00217 	ldw	ra,8(sp)
10002af8:	dc400117 	ldw	r17,4(sp)
10002afc:	dc000017 	ldw	r16,0(sp)
10002b00:	dec00304 	addi	sp,sp,12
10002b04:	f800283a 	ret

10002b08 <__divsi3>:
10002b08:	20001b16 	blt	r4,zero,10002b78 <__divsi3+0x70>
10002b0c:	000f883a 	mov	r7,zero
10002b10:	28001616 	blt	r5,zero,10002b6c <__divsi3+0x64>
10002b14:	200d883a 	mov	r6,r4
10002b18:	29001a2e 	bgeu	r5,r4,10002b84 <__divsi3+0x7c>
10002b1c:	00800804 	movi	r2,32
10002b20:	00c00044 	movi	r3,1
10002b24:	00000106 	br	10002b2c <__divsi3+0x24>
10002b28:	10000d26 	beq	r2,zero,10002b60 <__divsi3+0x58>
10002b2c:	294b883a 	add	r5,r5,r5
10002b30:	10bfffc4 	addi	r2,r2,-1
10002b34:	18c7883a 	add	r3,r3,r3
10002b38:	293ffb36 	bltu	r5,r4,10002b28 <__alt_data_end+0xf8002b28>
10002b3c:	0005883a 	mov	r2,zero
10002b40:	18000726 	beq	r3,zero,10002b60 <__divsi3+0x58>
10002b44:	0005883a 	mov	r2,zero
10002b48:	31400236 	bltu	r6,r5,10002b54 <__divsi3+0x4c>
10002b4c:	314dc83a 	sub	r6,r6,r5
10002b50:	10c4b03a 	or	r2,r2,r3
10002b54:	1806d07a 	srli	r3,r3,1
10002b58:	280ad07a 	srli	r5,r5,1
10002b5c:	183ffa1e 	bne	r3,zero,10002b48 <__alt_data_end+0xf8002b48>
10002b60:	38000126 	beq	r7,zero,10002b68 <__divsi3+0x60>
10002b64:	0085c83a 	sub	r2,zero,r2
10002b68:	f800283a 	ret
10002b6c:	014bc83a 	sub	r5,zero,r5
10002b70:	39c0005c 	xori	r7,r7,1
10002b74:	003fe706 	br	10002b14 <__alt_data_end+0xf8002b14>
10002b78:	0109c83a 	sub	r4,zero,r4
10002b7c:	01c00044 	movi	r7,1
10002b80:	003fe306 	br	10002b10 <__alt_data_end+0xf8002b10>
10002b84:	00c00044 	movi	r3,1
10002b88:	003fee06 	br	10002b44 <__alt_data_end+0xf8002b44>

10002b8c <__modsi3>:
10002b8c:	20001716 	blt	r4,zero,10002bec <__modsi3+0x60>
10002b90:	000f883a 	mov	r7,zero
10002b94:	2005883a 	mov	r2,r4
10002b98:	28001216 	blt	r5,zero,10002be4 <__modsi3+0x58>
10002b9c:	2900162e 	bgeu	r5,r4,10002bf8 <__modsi3+0x6c>
10002ba0:	01800804 	movi	r6,32
10002ba4:	00c00044 	movi	r3,1
10002ba8:	00000106 	br	10002bb0 <__modsi3+0x24>
10002bac:	30000a26 	beq	r6,zero,10002bd8 <__modsi3+0x4c>
10002bb0:	294b883a 	add	r5,r5,r5
10002bb4:	31bfffc4 	addi	r6,r6,-1
10002bb8:	18c7883a 	add	r3,r3,r3
10002bbc:	293ffb36 	bltu	r5,r4,10002bac <__alt_data_end+0xf8002bac>
10002bc0:	18000526 	beq	r3,zero,10002bd8 <__modsi3+0x4c>
10002bc4:	1806d07a 	srli	r3,r3,1
10002bc8:	11400136 	bltu	r2,r5,10002bd0 <__modsi3+0x44>
10002bcc:	1145c83a 	sub	r2,r2,r5
10002bd0:	280ad07a 	srli	r5,r5,1
10002bd4:	183ffb1e 	bne	r3,zero,10002bc4 <__alt_data_end+0xf8002bc4>
10002bd8:	38000126 	beq	r7,zero,10002be0 <__modsi3+0x54>
10002bdc:	0085c83a 	sub	r2,zero,r2
10002be0:	f800283a 	ret
10002be4:	014bc83a 	sub	r5,zero,r5
10002be8:	003fec06 	br	10002b9c <__alt_data_end+0xf8002b9c>
10002bec:	0109c83a 	sub	r4,zero,r4
10002bf0:	01c00044 	movi	r7,1
10002bf4:	003fe706 	br	10002b94 <__alt_data_end+0xf8002b94>
10002bf8:	00c00044 	movi	r3,1
10002bfc:	003ff106 	br	10002bc4 <__alt_data_end+0xf8002bc4>

10002c00 <__udivsi3>:
10002c00:	200d883a 	mov	r6,r4
10002c04:	2900152e 	bgeu	r5,r4,10002c5c <__udivsi3+0x5c>
10002c08:	28001416 	blt	r5,zero,10002c5c <__udivsi3+0x5c>
10002c0c:	00800804 	movi	r2,32
10002c10:	00c00044 	movi	r3,1
10002c14:	00000206 	br	10002c20 <__udivsi3+0x20>
10002c18:	10000e26 	beq	r2,zero,10002c54 <__udivsi3+0x54>
10002c1c:	28000516 	blt	r5,zero,10002c34 <__udivsi3+0x34>
10002c20:	294b883a 	add	r5,r5,r5
10002c24:	10bfffc4 	addi	r2,r2,-1
10002c28:	18c7883a 	add	r3,r3,r3
10002c2c:	293ffa36 	bltu	r5,r4,10002c18 <__alt_data_end+0xf8002c18>
10002c30:	18000826 	beq	r3,zero,10002c54 <__udivsi3+0x54>
10002c34:	0005883a 	mov	r2,zero
10002c38:	31400236 	bltu	r6,r5,10002c44 <__udivsi3+0x44>
10002c3c:	314dc83a 	sub	r6,r6,r5
10002c40:	10c4b03a 	or	r2,r2,r3
10002c44:	1806d07a 	srli	r3,r3,1
10002c48:	280ad07a 	srli	r5,r5,1
10002c4c:	183ffa1e 	bne	r3,zero,10002c38 <__alt_data_end+0xf8002c38>
10002c50:	f800283a 	ret
10002c54:	0005883a 	mov	r2,zero
10002c58:	f800283a 	ret
10002c5c:	00c00044 	movi	r3,1
10002c60:	003ff406 	br	10002c34 <__alt_data_end+0xf8002c34>

10002c64 <__umodsi3>:
10002c64:	2005883a 	mov	r2,r4
10002c68:	2900122e 	bgeu	r5,r4,10002cb4 <__umodsi3+0x50>
10002c6c:	28001116 	blt	r5,zero,10002cb4 <__umodsi3+0x50>
10002c70:	01800804 	movi	r6,32
10002c74:	00c00044 	movi	r3,1
10002c78:	00000206 	br	10002c84 <__umodsi3+0x20>
10002c7c:	30000c26 	beq	r6,zero,10002cb0 <__umodsi3+0x4c>
10002c80:	28000516 	blt	r5,zero,10002c98 <__umodsi3+0x34>
10002c84:	294b883a 	add	r5,r5,r5
10002c88:	31bfffc4 	addi	r6,r6,-1
10002c8c:	18c7883a 	add	r3,r3,r3
10002c90:	293ffa36 	bltu	r5,r4,10002c7c <__alt_data_end+0xf8002c7c>
10002c94:	18000626 	beq	r3,zero,10002cb0 <__umodsi3+0x4c>
10002c98:	1806d07a 	srli	r3,r3,1
10002c9c:	11400136 	bltu	r2,r5,10002ca4 <__umodsi3+0x40>
10002ca0:	1145c83a 	sub	r2,r2,r5
10002ca4:	280ad07a 	srli	r5,r5,1
10002ca8:	183ffb1e 	bne	r3,zero,10002c98 <__alt_data_end+0xf8002c98>
10002cac:	f800283a 	ret
10002cb0:	f800283a 	ret
10002cb4:	00c00044 	movi	r3,1
10002cb8:	003ff706 	br	10002c98 <__alt_data_end+0xf8002c98>

10002cbc <__mulsi3>:
10002cbc:	0005883a 	mov	r2,zero
10002cc0:	20000726 	beq	r4,zero,10002ce0 <__mulsi3+0x24>
10002cc4:	20c0004c 	andi	r3,r4,1
10002cc8:	2008d07a 	srli	r4,r4,1
10002ccc:	18000126 	beq	r3,zero,10002cd4 <__mulsi3+0x18>
10002cd0:	1145883a 	add	r2,r2,r5
10002cd4:	294b883a 	add	r5,r5,r5
10002cd8:	203ffa1e 	bne	r4,zero,10002cc4 <__alt_data_end+0xf8002cc4>
10002cdc:	f800283a 	ret
10002ce0:	f800283a 	ret

10002ce4 <alt_load_section>:
10002ce4:	defffc04 	addi	sp,sp,-16
10002ce8:	df000315 	stw	fp,12(sp)
10002cec:	df000304 	addi	fp,sp,12
10002cf0:	e13ffd15 	stw	r4,-12(fp)
10002cf4:	e17ffe15 	stw	r5,-8(fp)
10002cf8:	e1bfff15 	stw	r6,-4(fp)
10002cfc:	e0fffe17 	ldw	r3,-8(fp)
10002d00:	e0bffd17 	ldw	r2,-12(fp)
10002d04:	18800c26 	beq	r3,r2,10002d38 <alt_load_section+0x54>
10002d08:	00000806 	br	10002d2c <alt_load_section+0x48>
10002d0c:	e0bffe17 	ldw	r2,-8(fp)
10002d10:	10c00104 	addi	r3,r2,4
10002d14:	e0fffe15 	stw	r3,-8(fp)
10002d18:	e0fffd17 	ldw	r3,-12(fp)
10002d1c:	19000104 	addi	r4,r3,4
10002d20:	e13ffd15 	stw	r4,-12(fp)
10002d24:	18c00017 	ldw	r3,0(r3)
10002d28:	10c00015 	stw	r3,0(r2)
10002d2c:	e0fffe17 	ldw	r3,-8(fp)
10002d30:	e0bfff17 	ldw	r2,-4(fp)
10002d34:	18bff51e 	bne	r3,r2,10002d0c <__alt_data_end+0xf8002d0c>
10002d38:	0001883a 	nop
10002d3c:	e037883a 	mov	sp,fp
10002d40:	df000017 	ldw	fp,0(sp)
10002d44:	dec00104 	addi	sp,sp,4
10002d48:	f800283a 	ret

10002d4c <alt_load>:
10002d4c:	defffe04 	addi	sp,sp,-8
10002d50:	dfc00115 	stw	ra,4(sp)
10002d54:	df000015 	stw	fp,0(sp)
10002d58:	d839883a 	mov	fp,sp
10002d5c:	01840034 	movhi	r6,4096
10002d60:	319ab504 	addi	r6,r6,27348
10002d64:	01440034 	movhi	r5,4096
10002d68:	2955f004 	addi	r5,r5,22464
10002d6c:	01040034 	movhi	r4,4096
10002d70:	211ab504 	addi	r4,r4,27348
10002d74:	0002ce40 	call	10002ce4 <alt_load_section>
10002d78:	01840034 	movhi	r6,4096
10002d7c:	31808c04 	addi	r6,r6,560
10002d80:	01440034 	movhi	r5,4096
10002d84:	29400804 	addi	r5,r5,32
10002d88:	01040034 	movhi	r4,4096
10002d8c:	21000804 	addi	r4,r4,32
10002d90:	0002ce40 	call	10002ce4 <alt_load_section>
10002d94:	01840034 	movhi	r6,4096
10002d98:	3195f004 	addi	r6,r6,22464
10002d9c:	01440034 	movhi	r5,4096
10002da0:	2953fb04 	addi	r5,r5,20460
10002da4:	01040034 	movhi	r4,4096
10002da8:	2113fb04 	addi	r4,r4,20460
10002dac:	0002ce40 	call	10002ce4 <alt_load_section>
10002db0:	0003e700 	call	10003e70 <alt_dcache_flush_all>
10002db4:	000405c0 	call	1000405c <alt_icache_flush_all>
10002db8:	0001883a 	nop
10002dbc:	e037883a 	mov	sp,fp
10002dc0:	dfc00117 	ldw	ra,4(sp)
10002dc4:	df000017 	ldw	fp,0(sp)
10002dc8:	dec00204 	addi	sp,sp,8
10002dcc:	f800283a 	ret

10002dd0 <alt_main>:
10002dd0:	defffd04 	addi	sp,sp,-12
10002dd4:	dfc00215 	stw	ra,8(sp)
10002dd8:	df000115 	stw	fp,4(sp)
10002ddc:	df000104 	addi	fp,sp,4
10002de0:	0009883a 	mov	r4,zero
10002de4:	0002fec0 	call	10002fec <alt_irq_init>
10002de8:	0001883a 	nop
10002dec:	00030240 	call	10003024 <alt_sys_init>
10002df0:	01840034 	movhi	r6,4096
10002df4:	3195e304 	addi	r6,r6,22412
10002df8:	01440034 	movhi	r5,4096
10002dfc:	2955e304 	addi	r5,r5,22412
10002e00:	01040034 	movhi	r4,4096
10002e04:	2115e304 	addi	r4,r4,22412
10002e08:	00044000 	call	10004400 <alt_io_redirect>
10002e0c:	0003f9c0 	call	10003f9c <_do_ctors>
10002e10:	01040034 	movhi	r4,4096
10002e14:	210fff04 	addi	r4,r4,16380
10002e18:	0004c440 	call	10004c44 <atexit>
10002e1c:	d0a4d217 	ldw	r2,-27832(gp)
10002e20:	d0e4d317 	ldw	r3,-27828(gp)
10002e24:	d124d417 	ldw	r4,-27824(gp)
10002e28:	200d883a 	mov	r6,r4
10002e2c:	180b883a 	mov	r5,r3
10002e30:	1009883a 	mov	r4,r2
10002e34:	00003cc0 	call	100003cc <main>
10002e38:	e0bfff15 	stw	r2,-4(fp)
10002e3c:	01000044 	movi	r4,1
10002e40:	0003d980 	call	10003d98 <close>
10002e44:	e13fff17 	ldw	r4,-4(fp)
10002e48:	0004c580 	call	10004c58 <exit>

10002e4c <usleep>:
10002e4c:	defffd04 	addi	sp,sp,-12
10002e50:	dfc00215 	stw	ra,8(sp)
10002e54:	df000115 	stw	fp,4(sp)
10002e58:	df000104 	addi	fp,sp,4
10002e5c:	e13fff15 	stw	r4,-4(fp)
10002e60:	e13fff17 	ldw	r4,-4(fp)
10002e64:	0003c040 	call	10003c04 <alt_busy_sleep>
10002e68:	e037883a 	mov	sp,fp
10002e6c:	dfc00117 	ldw	ra,4(sp)
10002e70:	df000017 	ldw	fp,0(sp)
10002e74:	dec00204 	addi	sp,sp,8
10002e78:	f800283a 	ret

10002e7c <alt_get_errno>:
10002e7c:	defffe04 	addi	sp,sp,-8
10002e80:	dfc00115 	stw	ra,4(sp)
10002e84:	df000015 	stw	fp,0(sp)
10002e88:	d839883a 	mov	fp,sp
10002e8c:	d0a00717 	ldw	r2,-32740(gp)
10002e90:	10000326 	beq	r2,zero,10002ea0 <alt_get_errno+0x24>
10002e94:	d0a00717 	ldw	r2,-32740(gp)
10002e98:	103ee83a 	callr	r2
10002e9c:	00000106 	br	10002ea4 <alt_get_errno+0x28>
10002ea0:	d0a4d104 	addi	r2,gp,-27836
10002ea4:	e037883a 	mov	sp,fp
10002ea8:	dfc00117 	ldw	ra,4(sp)
10002eac:	df000017 	ldw	fp,0(sp)
10002eb0:	dec00204 	addi	sp,sp,8
10002eb4:	f800283a 	ret

10002eb8 <write>:
10002eb8:	defff904 	addi	sp,sp,-28
10002ebc:	dfc00615 	stw	ra,24(sp)
10002ec0:	df000515 	stw	fp,20(sp)
10002ec4:	df000504 	addi	fp,sp,20
10002ec8:	e13ffd15 	stw	r4,-12(fp)
10002ecc:	e17ffe15 	stw	r5,-8(fp)
10002ed0:	e1bfff15 	stw	r6,-4(fp)
10002ed4:	e0bffd17 	ldw	r2,-12(fp)
10002ed8:	10000816 	blt	r2,zero,10002efc <write+0x44>
10002edc:	01400304 	movi	r5,12
10002ee0:	e13ffd17 	ldw	r4,-12(fp)
10002ee4:	0002cbc0 	call	10002cbc <__mulsi3>
10002ee8:	1007883a 	mov	r3,r2
10002eec:	00840034 	movhi	r2,4096
10002ef0:	109a4a04 	addi	r2,r2,26920
10002ef4:	1885883a 	add	r2,r3,r2
10002ef8:	00000106 	br	10002f00 <write+0x48>
10002efc:	0005883a 	mov	r2,zero
10002f00:	e0bffb15 	stw	r2,-20(fp)
10002f04:	e0bffb17 	ldw	r2,-20(fp)
10002f08:	10002126 	beq	r2,zero,10002f90 <write+0xd8>
10002f0c:	e0bffb17 	ldw	r2,-20(fp)
10002f10:	10800217 	ldw	r2,8(r2)
10002f14:	108000cc 	andi	r2,r2,3
10002f18:	10001826 	beq	r2,zero,10002f7c <write+0xc4>
10002f1c:	e0bffb17 	ldw	r2,-20(fp)
10002f20:	10800017 	ldw	r2,0(r2)
10002f24:	10800617 	ldw	r2,24(r2)
10002f28:	10001426 	beq	r2,zero,10002f7c <write+0xc4>
10002f2c:	e0bffb17 	ldw	r2,-20(fp)
10002f30:	10800017 	ldw	r2,0(r2)
10002f34:	10800617 	ldw	r2,24(r2)
10002f38:	e0ffff17 	ldw	r3,-4(fp)
10002f3c:	180d883a 	mov	r6,r3
10002f40:	e17ffe17 	ldw	r5,-8(fp)
10002f44:	e13ffb17 	ldw	r4,-20(fp)
10002f48:	103ee83a 	callr	r2
10002f4c:	e0bffc15 	stw	r2,-16(fp)
10002f50:	e0bffc17 	ldw	r2,-16(fp)
10002f54:	1000070e 	bge	r2,zero,10002f74 <write+0xbc>
10002f58:	0002e7c0 	call	10002e7c <alt_get_errno>
10002f5c:	1007883a 	mov	r3,r2
10002f60:	e0bffc17 	ldw	r2,-16(fp)
10002f64:	0085c83a 	sub	r2,zero,r2
10002f68:	18800015 	stw	r2,0(r3)
10002f6c:	00bfffc4 	movi	r2,-1
10002f70:	00000c06 	br	10002fa4 <write+0xec>
10002f74:	e0bffc17 	ldw	r2,-16(fp)
10002f78:	00000a06 	br	10002fa4 <write+0xec>
10002f7c:	0002e7c0 	call	10002e7c <alt_get_errno>
10002f80:	1007883a 	mov	r3,r2
10002f84:	00800344 	movi	r2,13
10002f88:	18800015 	stw	r2,0(r3)
10002f8c:	00000406 	br	10002fa0 <write+0xe8>
10002f90:	0002e7c0 	call	10002e7c <alt_get_errno>
10002f94:	1007883a 	mov	r3,r2
10002f98:	00801444 	movi	r2,81
10002f9c:	18800015 	stw	r2,0(r3)
10002fa0:	00bfffc4 	movi	r2,-1
10002fa4:	e037883a 	mov	sp,fp
10002fa8:	dfc00117 	ldw	ra,4(sp)
10002fac:	df000017 	ldw	fp,0(sp)
10002fb0:	dec00204 	addi	sp,sp,8
10002fb4:	f800283a 	ret

10002fb8 <alt_dev_reg>:
10002fb8:	defffd04 	addi	sp,sp,-12
10002fbc:	dfc00215 	stw	ra,8(sp)
10002fc0:	df000115 	stw	fp,4(sp)
10002fc4:	df000104 	addi	fp,sp,4
10002fc8:	e13fff15 	stw	r4,-4(fp)
10002fcc:	d1600404 	addi	r5,gp,-32752
10002fd0:	e13fff17 	ldw	r4,-4(fp)
10002fd4:	0003ef80 	call	10003ef8 <alt_dev_llist_insert>
10002fd8:	e037883a 	mov	sp,fp
10002fdc:	dfc00117 	ldw	ra,4(sp)
10002fe0:	df000017 	ldw	fp,0(sp)
10002fe4:	dec00204 	addi	sp,sp,8
10002fe8:	f800283a 	ret

10002fec <alt_irq_init>:
10002fec:	defffd04 	addi	sp,sp,-12
10002ff0:	dfc00215 	stw	ra,8(sp)
10002ff4:	df000115 	stw	fp,4(sp)
10002ff8:	df000104 	addi	fp,sp,4
10002ffc:	e13fff15 	stw	r4,-4(fp)
10003000:	00049280 	call	10004928 <altera_nios2_gen2_irq_init>
10003004:	00800044 	movi	r2,1
10003008:	1001703a 	wrctl	status,r2
1000300c:	0001883a 	nop
10003010:	e037883a 	mov	sp,fp
10003014:	dfc00117 	ldw	ra,4(sp)
10003018:	df000017 	ldw	fp,0(sp)
1000301c:	dec00204 	addi	sp,sp,8
10003020:	f800283a 	ret

10003024 <alt_sys_init>:
10003024:	defffe04 	addi	sp,sp,-8
10003028:	dfc00115 	stw	ra,4(sp)
1000302c:	df000015 	stw	fp,0(sp)
10003030:	d839883a 	mov	fp,sp
10003034:	01800144 	movi	r6,5
10003038:	000b883a 	mov	r5,zero
1000303c:	01040034 	movhi	r4,4096
10003040:	21163204 	addi	r4,r4,22728
10003044:	00031d40 	call	100031d4 <altera_avalon_jtag_uart_init>
10003048:	01040034 	movhi	r4,4096
1000304c:	21162804 	addi	r4,r4,22688
10003050:	0002fb80 	call	10002fb8 <alt_dev_reg>
10003054:	0001883a 	nop
10003058:	0001883a 	nop
1000305c:	e037883a 	mov	sp,fp
10003060:	dfc00117 	ldw	ra,4(sp)
10003064:	df000017 	ldw	fp,0(sp)
10003068:	dec00204 	addi	sp,sp,8
1000306c:	f800283a 	ret

10003070 <altera_avalon_jtag_uart_read_fd>:
10003070:	defffa04 	addi	sp,sp,-24
10003074:	dfc00515 	stw	ra,20(sp)
10003078:	df000415 	stw	fp,16(sp)
1000307c:	df000404 	addi	fp,sp,16
10003080:	e13ffd15 	stw	r4,-12(fp)
10003084:	e17ffe15 	stw	r5,-8(fp)
10003088:	e1bfff15 	stw	r6,-4(fp)
1000308c:	e0bffd17 	ldw	r2,-12(fp)
10003090:	10800017 	ldw	r2,0(r2)
10003094:	e0bffc15 	stw	r2,-16(fp)
10003098:	e0bffc17 	ldw	r2,-16(fp)
1000309c:	10c00a04 	addi	r3,r2,40
100030a0:	e0bffd17 	ldw	r2,-12(fp)
100030a4:	10800217 	ldw	r2,8(r2)
100030a8:	100f883a 	mov	r7,r2
100030ac:	e1bfff17 	ldw	r6,-4(fp)
100030b0:	e17ffe17 	ldw	r5,-8(fp)
100030b4:	1809883a 	mov	r4,r3
100030b8:	00036980 	call	10003698 <altera_avalon_jtag_uart_read>
100030bc:	e037883a 	mov	sp,fp
100030c0:	dfc00117 	ldw	ra,4(sp)
100030c4:	df000017 	ldw	fp,0(sp)
100030c8:	dec00204 	addi	sp,sp,8
100030cc:	f800283a 	ret

100030d0 <altera_avalon_jtag_uart_write_fd>:
100030d0:	defffa04 	addi	sp,sp,-24
100030d4:	dfc00515 	stw	ra,20(sp)
100030d8:	df000415 	stw	fp,16(sp)
100030dc:	df000404 	addi	fp,sp,16
100030e0:	e13ffd15 	stw	r4,-12(fp)
100030e4:	e17ffe15 	stw	r5,-8(fp)
100030e8:	e1bfff15 	stw	r6,-4(fp)
100030ec:	e0bffd17 	ldw	r2,-12(fp)
100030f0:	10800017 	ldw	r2,0(r2)
100030f4:	e0bffc15 	stw	r2,-16(fp)
100030f8:	e0bffc17 	ldw	r2,-16(fp)
100030fc:	10c00a04 	addi	r3,r2,40
10003100:	e0bffd17 	ldw	r2,-12(fp)
10003104:	10800217 	ldw	r2,8(r2)
10003108:	100f883a 	mov	r7,r2
1000310c:	e1bfff17 	ldw	r6,-4(fp)
10003110:	e17ffe17 	ldw	r5,-8(fp)
10003114:	1809883a 	mov	r4,r3
10003118:	00038b40 	call	100038b4 <altera_avalon_jtag_uart_write>
1000311c:	e037883a 	mov	sp,fp
10003120:	dfc00117 	ldw	ra,4(sp)
10003124:	df000017 	ldw	fp,0(sp)
10003128:	dec00204 	addi	sp,sp,8
1000312c:	f800283a 	ret

10003130 <altera_avalon_jtag_uart_close_fd>:
10003130:	defffc04 	addi	sp,sp,-16
10003134:	dfc00315 	stw	ra,12(sp)
10003138:	df000215 	stw	fp,8(sp)
1000313c:	df000204 	addi	fp,sp,8
10003140:	e13fff15 	stw	r4,-4(fp)
10003144:	e0bfff17 	ldw	r2,-4(fp)
10003148:	10800017 	ldw	r2,0(r2)
1000314c:	e0bffe15 	stw	r2,-8(fp)
10003150:	e0bffe17 	ldw	r2,-8(fp)
10003154:	10c00a04 	addi	r3,r2,40
10003158:	e0bfff17 	ldw	r2,-4(fp)
1000315c:	10800217 	ldw	r2,8(r2)
10003160:	100b883a 	mov	r5,r2
10003164:	1809883a 	mov	r4,r3
10003168:	00035400 	call	10003540 <altera_avalon_jtag_uart_close>
1000316c:	e037883a 	mov	sp,fp
10003170:	dfc00117 	ldw	ra,4(sp)
10003174:	df000017 	ldw	fp,0(sp)
10003178:	dec00204 	addi	sp,sp,8
1000317c:	f800283a 	ret

10003180 <altera_avalon_jtag_uart_ioctl_fd>:
10003180:	defffa04 	addi	sp,sp,-24
10003184:	dfc00515 	stw	ra,20(sp)
10003188:	df000415 	stw	fp,16(sp)
1000318c:	df000404 	addi	fp,sp,16
10003190:	e13ffd15 	stw	r4,-12(fp)
10003194:	e17ffe15 	stw	r5,-8(fp)
10003198:	e1bfff15 	stw	r6,-4(fp)
1000319c:	e0bffd17 	ldw	r2,-12(fp)
100031a0:	10800017 	ldw	r2,0(r2)
100031a4:	e0bffc15 	stw	r2,-16(fp)
100031a8:	e0bffc17 	ldw	r2,-16(fp)
100031ac:	10800a04 	addi	r2,r2,40
100031b0:	e1bfff17 	ldw	r6,-4(fp)
100031b4:	e17ffe17 	ldw	r5,-8(fp)
100031b8:	1009883a 	mov	r4,r2
100031bc:	00035a80 	call	100035a8 <altera_avalon_jtag_uart_ioctl>
100031c0:	e037883a 	mov	sp,fp
100031c4:	dfc00117 	ldw	ra,4(sp)
100031c8:	df000017 	ldw	fp,0(sp)
100031cc:	dec00204 	addi	sp,sp,8
100031d0:	f800283a 	ret

100031d4 <altera_avalon_jtag_uart_init>:
100031d4:	defffa04 	addi	sp,sp,-24
100031d8:	dfc00515 	stw	ra,20(sp)
100031dc:	df000415 	stw	fp,16(sp)
100031e0:	df000404 	addi	fp,sp,16
100031e4:	e13ffd15 	stw	r4,-12(fp)
100031e8:	e17ffe15 	stw	r5,-8(fp)
100031ec:	e1bfff15 	stw	r6,-4(fp)
100031f0:	e0bffd17 	ldw	r2,-12(fp)
100031f4:	00c00044 	movi	r3,1
100031f8:	10c00815 	stw	r3,32(r2)
100031fc:	e0bffd17 	ldw	r2,-12(fp)
10003200:	10800017 	ldw	r2,0(r2)
10003204:	10800104 	addi	r2,r2,4
10003208:	1007883a 	mov	r3,r2
1000320c:	e0bffd17 	ldw	r2,-12(fp)
10003210:	10800817 	ldw	r2,32(r2)
10003214:	18800035 	stwio	r2,0(r3)
10003218:	e0bffe17 	ldw	r2,-8(fp)
1000321c:	e0ffff17 	ldw	r3,-4(fp)
10003220:	d8000015 	stw	zero,0(sp)
10003224:	e1fffd17 	ldw	r7,-12(fp)
10003228:	01840034 	movhi	r6,4096
1000322c:	318ca504 	addi	r6,r6,12948
10003230:	180b883a 	mov	r5,r3
10003234:	1009883a 	mov	r4,r2
10003238:	000407c0 	call	1000407c <alt_ic_isr_register>
1000323c:	e0bffd17 	ldw	r2,-12(fp)
10003240:	10000915 	stw	zero,36(r2)
10003244:	e0bffd17 	ldw	r2,-12(fp)
10003248:	10800204 	addi	r2,r2,8
1000324c:	d0e4d617 	ldw	r3,-27816(gp)
10003250:	e1fffd17 	ldw	r7,-12(fp)
10003254:	01840034 	movhi	r6,4096
10003258:	318d2804 	addi	r6,r6,13472
1000325c:	180b883a 	mov	r5,r3
10003260:	1009883a 	mov	r4,r2
10003264:	0003ad80 	call	10003ad8 <alt_alarm_start>
10003268:	1000040e 	bge	r2,zero,1000327c <altera_avalon_jtag_uart_init+0xa8>
1000326c:	e0fffd17 	ldw	r3,-12(fp)
10003270:	00a00034 	movhi	r2,32768
10003274:	10bfffc4 	addi	r2,r2,-1
10003278:	18800115 	stw	r2,4(r3)
1000327c:	0001883a 	nop
10003280:	e037883a 	mov	sp,fp
10003284:	dfc00117 	ldw	ra,4(sp)
10003288:	df000017 	ldw	fp,0(sp)
1000328c:	dec00204 	addi	sp,sp,8
10003290:	f800283a 	ret

10003294 <altera_avalon_jtag_uart_irq>:
10003294:	defff804 	addi	sp,sp,-32
10003298:	df000715 	stw	fp,28(sp)
1000329c:	df000704 	addi	fp,sp,28
100032a0:	e13fff15 	stw	r4,-4(fp)
100032a4:	e0bfff17 	ldw	r2,-4(fp)
100032a8:	e0bffb15 	stw	r2,-20(fp)
100032ac:	e0bffb17 	ldw	r2,-20(fp)
100032b0:	10800017 	ldw	r2,0(r2)
100032b4:	e0bffc15 	stw	r2,-16(fp)
100032b8:	e0bffc17 	ldw	r2,-16(fp)
100032bc:	10800104 	addi	r2,r2,4
100032c0:	10800037 	ldwio	r2,0(r2)
100032c4:	e0bffd15 	stw	r2,-12(fp)
100032c8:	e0bffd17 	ldw	r2,-12(fp)
100032cc:	1080c00c 	andi	r2,r2,768
100032d0:	10006d26 	beq	r2,zero,10003488 <altera_avalon_jtag_uart_irq+0x1f4>
100032d4:	e0bffd17 	ldw	r2,-12(fp)
100032d8:	1080400c 	andi	r2,r2,256
100032dc:	10003526 	beq	r2,zero,100033b4 <altera_avalon_jtag_uart_irq+0x120>
100032e0:	00800074 	movhi	r2,1
100032e4:	e0bff915 	stw	r2,-28(fp)
100032e8:	e0bffb17 	ldw	r2,-20(fp)
100032ec:	10800a17 	ldw	r2,40(r2)
100032f0:	10800044 	addi	r2,r2,1
100032f4:	1081ffcc 	andi	r2,r2,2047
100032f8:	e0bffe15 	stw	r2,-8(fp)
100032fc:	e0bffb17 	ldw	r2,-20(fp)
10003300:	10c00b17 	ldw	r3,44(r2)
10003304:	e0bffe17 	ldw	r2,-8(fp)
10003308:	18801526 	beq	r3,r2,10003360 <altera_avalon_jtag_uart_irq+0xcc>
1000330c:	e0bffc17 	ldw	r2,-16(fp)
10003310:	10800037 	ldwio	r2,0(r2)
10003314:	e0bff915 	stw	r2,-28(fp)
10003318:	e0bff917 	ldw	r2,-28(fp)
1000331c:	10a0000c 	andi	r2,r2,32768
10003320:	10001126 	beq	r2,zero,10003368 <altera_avalon_jtag_uart_irq+0xd4>
10003324:	e0bffb17 	ldw	r2,-20(fp)
10003328:	10800a17 	ldw	r2,40(r2)
1000332c:	e0fff917 	ldw	r3,-28(fp)
10003330:	1809883a 	mov	r4,r3
10003334:	e0fffb17 	ldw	r3,-20(fp)
10003338:	1885883a 	add	r2,r3,r2
1000333c:	10800e04 	addi	r2,r2,56
10003340:	11000005 	stb	r4,0(r2)
10003344:	e0bffb17 	ldw	r2,-20(fp)
10003348:	10800a17 	ldw	r2,40(r2)
1000334c:	10800044 	addi	r2,r2,1
10003350:	10c1ffcc 	andi	r3,r2,2047
10003354:	e0bffb17 	ldw	r2,-20(fp)
10003358:	10c00a15 	stw	r3,40(r2)
1000335c:	003fe206 	br	100032e8 <__alt_data_end+0xf80032e8>
10003360:	0001883a 	nop
10003364:	00000106 	br	1000336c <altera_avalon_jtag_uart_irq+0xd8>
10003368:	0001883a 	nop
1000336c:	e0bff917 	ldw	r2,-28(fp)
10003370:	10bfffec 	andhi	r2,r2,65535
10003374:	10000f26 	beq	r2,zero,100033b4 <altera_avalon_jtag_uart_irq+0x120>
10003378:	e0bffb17 	ldw	r2,-20(fp)
1000337c:	10c00817 	ldw	r3,32(r2)
10003380:	00bfff84 	movi	r2,-2
10003384:	1886703a 	and	r3,r3,r2
10003388:	e0bffb17 	ldw	r2,-20(fp)
1000338c:	10c00815 	stw	r3,32(r2)
10003390:	e0bffc17 	ldw	r2,-16(fp)
10003394:	10800104 	addi	r2,r2,4
10003398:	1007883a 	mov	r3,r2
1000339c:	e0bffb17 	ldw	r2,-20(fp)
100033a0:	10800817 	ldw	r2,32(r2)
100033a4:	18800035 	stwio	r2,0(r3)
100033a8:	e0bffc17 	ldw	r2,-16(fp)
100033ac:	10800104 	addi	r2,r2,4
100033b0:	10800037 	ldwio	r2,0(r2)
100033b4:	e0bffd17 	ldw	r2,-12(fp)
100033b8:	1080800c 	andi	r2,r2,512
100033bc:	103fbe26 	beq	r2,zero,100032b8 <__alt_data_end+0xf80032b8>
100033c0:	e0bffd17 	ldw	r2,-12(fp)
100033c4:	1004d43a 	srli	r2,r2,16
100033c8:	e0bffa15 	stw	r2,-24(fp)
100033cc:	00001406 	br	10003420 <altera_avalon_jtag_uart_irq+0x18c>
100033d0:	e0bffc17 	ldw	r2,-16(fp)
100033d4:	e0fffb17 	ldw	r3,-20(fp)
100033d8:	18c00d17 	ldw	r3,52(r3)
100033dc:	e13ffb17 	ldw	r4,-20(fp)
100033e0:	20c7883a 	add	r3,r4,r3
100033e4:	18c20e04 	addi	r3,r3,2104
100033e8:	18c00003 	ldbu	r3,0(r3)
100033ec:	18c03fcc 	andi	r3,r3,255
100033f0:	18c0201c 	xori	r3,r3,128
100033f4:	18ffe004 	addi	r3,r3,-128
100033f8:	10c00035 	stwio	r3,0(r2)
100033fc:	e0bffb17 	ldw	r2,-20(fp)
10003400:	10800d17 	ldw	r2,52(r2)
10003404:	10800044 	addi	r2,r2,1
10003408:	10c1ffcc 	andi	r3,r2,2047
1000340c:	e0bffb17 	ldw	r2,-20(fp)
10003410:	10c00d15 	stw	r3,52(r2)
10003414:	e0bffa17 	ldw	r2,-24(fp)
10003418:	10bfffc4 	addi	r2,r2,-1
1000341c:	e0bffa15 	stw	r2,-24(fp)
10003420:	e0bffa17 	ldw	r2,-24(fp)
10003424:	10000526 	beq	r2,zero,1000343c <altera_avalon_jtag_uart_irq+0x1a8>
10003428:	e0bffb17 	ldw	r2,-20(fp)
1000342c:	10c00d17 	ldw	r3,52(r2)
10003430:	e0bffb17 	ldw	r2,-20(fp)
10003434:	10800c17 	ldw	r2,48(r2)
10003438:	18bfe51e 	bne	r3,r2,100033d0 <__alt_data_end+0xf80033d0>
1000343c:	e0bffa17 	ldw	r2,-24(fp)
10003440:	103f9d26 	beq	r2,zero,100032b8 <__alt_data_end+0xf80032b8>
10003444:	e0bffb17 	ldw	r2,-20(fp)
10003448:	10c00817 	ldw	r3,32(r2)
1000344c:	00bfff44 	movi	r2,-3
10003450:	1886703a 	and	r3,r3,r2
10003454:	e0bffb17 	ldw	r2,-20(fp)
10003458:	10c00815 	stw	r3,32(r2)
1000345c:	e0bffb17 	ldw	r2,-20(fp)
10003460:	10800017 	ldw	r2,0(r2)
10003464:	10800104 	addi	r2,r2,4
10003468:	1007883a 	mov	r3,r2
1000346c:	e0bffb17 	ldw	r2,-20(fp)
10003470:	10800817 	ldw	r2,32(r2)
10003474:	18800035 	stwio	r2,0(r3)
10003478:	e0bffc17 	ldw	r2,-16(fp)
1000347c:	10800104 	addi	r2,r2,4
10003480:	10800037 	ldwio	r2,0(r2)
10003484:	003f8c06 	br	100032b8 <__alt_data_end+0xf80032b8>
10003488:	0001883a 	nop
1000348c:	0001883a 	nop
10003490:	e037883a 	mov	sp,fp
10003494:	df000017 	ldw	fp,0(sp)
10003498:	dec00104 	addi	sp,sp,4
1000349c:	f800283a 	ret

100034a0 <altera_avalon_jtag_uart_timeout>:
100034a0:	defff804 	addi	sp,sp,-32
100034a4:	df000715 	stw	fp,28(sp)
100034a8:	df000704 	addi	fp,sp,28
100034ac:	e13ffb15 	stw	r4,-20(fp)
100034b0:	e0bffb17 	ldw	r2,-20(fp)
100034b4:	e0bff915 	stw	r2,-28(fp)
100034b8:	e0bff917 	ldw	r2,-28(fp)
100034bc:	10800017 	ldw	r2,0(r2)
100034c0:	10800104 	addi	r2,r2,4
100034c4:	10800037 	ldwio	r2,0(r2)
100034c8:	e0bffa15 	stw	r2,-24(fp)
100034cc:	e0bffa17 	ldw	r2,-24(fp)
100034d0:	1081000c 	andi	r2,r2,1024
100034d4:	10000b26 	beq	r2,zero,10003504 <altera_avalon_jtag_uart_timeout+0x64>
100034d8:	e0bff917 	ldw	r2,-28(fp)
100034dc:	10800017 	ldw	r2,0(r2)
100034e0:	10800104 	addi	r2,r2,4
100034e4:	1007883a 	mov	r3,r2
100034e8:	e0bff917 	ldw	r2,-28(fp)
100034ec:	10800817 	ldw	r2,32(r2)
100034f0:	10810014 	ori	r2,r2,1024
100034f4:	18800035 	stwio	r2,0(r3)
100034f8:	e0bff917 	ldw	r2,-28(fp)
100034fc:	10000915 	stw	zero,36(r2)
10003500:	00000a06 	br	1000352c <altera_avalon_jtag_uart_timeout+0x8c>
10003504:	e0bff917 	ldw	r2,-28(fp)
10003508:	10c00917 	ldw	r3,36(r2)
1000350c:	00a00034 	movhi	r2,32768
10003510:	10bfff04 	addi	r2,r2,-4
10003514:	10c00536 	bltu	r2,r3,1000352c <altera_avalon_jtag_uart_timeout+0x8c>
10003518:	e0bff917 	ldw	r2,-28(fp)
1000351c:	10800917 	ldw	r2,36(r2)
10003520:	10c00044 	addi	r3,r2,1
10003524:	e0bff917 	ldw	r2,-28(fp)
10003528:	10c00915 	stw	r3,36(r2)
1000352c:	d0a4d617 	ldw	r2,-27816(gp)
10003530:	e037883a 	mov	sp,fp
10003534:	df000017 	ldw	fp,0(sp)
10003538:	dec00104 	addi	sp,sp,4
1000353c:	f800283a 	ret

10003540 <altera_avalon_jtag_uart_close>:
10003540:	defffd04 	addi	sp,sp,-12
10003544:	df000215 	stw	fp,8(sp)
10003548:	df000204 	addi	fp,sp,8
1000354c:	e13ffe15 	stw	r4,-8(fp)
10003550:	e17fff15 	stw	r5,-4(fp)
10003554:	00000506 	br	1000356c <altera_avalon_jtag_uart_close+0x2c>
10003558:	e0bfff17 	ldw	r2,-4(fp)
1000355c:	1090000c 	andi	r2,r2,16384
10003560:	10000226 	beq	r2,zero,1000356c <altera_avalon_jtag_uart_close+0x2c>
10003564:	00bffd44 	movi	r2,-11
10003568:	00000b06 	br	10003598 <altera_avalon_jtag_uart_close+0x58>
1000356c:	e0bffe17 	ldw	r2,-8(fp)
10003570:	10c00d17 	ldw	r3,52(r2)
10003574:	e0bffe17 	ldw	r2,-8(fp)
10003578:	10800c17 	ldw	r2,48(r2)
1000357c:	18800526 	beq	r3,r2,10003594 <altera_avalon_jtag_uart_close+0x54>
10003580:	e0bffe17 	ldw	r2,-8(fp)
10003584:	10c00917 	ldw	r3,36(r2)
10003588:	e0bffe17 	ldw	r2,-8(fp)
1000358c:	10800117 	ldw	r2,4(r2)
10003590:	18bff136 	bltu	r3,r2,10003558 <__alt_data_end+0xf8003558>
10003594:	0005883a 	mov	r2,zero
10003598:	e037883a 	mov	sp,fp
1000359c:	df000017 	ldw	fp,0(sp)
100035a0:	dec00104 	addi	sp,sp,4
100035a4:	f800283a 	ret

100035a8 <altera_avalon_jtag_uart_ioctl>:
100035a8:	defffa04 	addi	sp,sp,-24
100035ac:	df000515 	stw	fp,20(sp)
100035b0:	df000504 	addi	fp,sp,20
100035b4:	e13ffd15 	stw	r4,-12(fp)
100035b8:	e17ffe15 	stw	r5,-8(fp)
100035bc:	e1bfff15 	stw	r6,-4(fp)
100035c0:	00bff9c4 	movi	r2,-25
100035c4:	e0bffb15 	stw	r2,-20(fp)
100035c8:	e0bffe17 	ldw	r2,-8(fp)
100035cc:	10da8060 	cmpeqi	r3,r2,27137
100035d0:	1800031e 	bne	r3,zero,100035e0 <altera_avalon_jtag_uart_ioctl+0x38>
100035d4:	109a80a0 	cmpeqi	r2,r2,27138
100035d8:	1000181e 	bne	r2,zero,1000363c <altera_avalon_jtag_uart_ioctl+0x94>
100035dc:	00002906 	br	10003684 <altera_avalon_jtag_uart_ioctl+0xdc>
100035e0:	e0bffd17 	ldw	r2,-12(fp)
100035e4:	10c00117 	ldw	r3,4(r2)
100035e8:	00a00034 	movhi	r2,32768
100035ec:	10bfffc4 	addi	r2,r2,-1
100035f0:	18802126 	beq	r3,r2,10003678 <altera_avalon_jtag_uart_ioctl+0xd0>
100035f4:	e0bfff17 	ldw	r2,-4(fp)
100035f8:	10800017 	ldw	r2,0(r2)
100035fc:	e0bffc15 	stw	r2,-16(fp)
10003600:	e0bffc17 	ldw	r2,-16(fp)
10003604:	10800090 	cmplti	r2,r2,2
10003608:	1000061e 	bne	r2,zero,10003624 <altera_avalon_jtag_uart_ioctl+0x7c>
1000360c:	e0fffc17 	ldw	r3,-16(fp)
10003610:	00a00034 	movhi	r2,32768
10003614:	10bfffc4 	addi	r2,r2,-1
10003618:	18800226 	beq	r3,r2,10003624 <altera_avalon_jtag_uart_ioctl+0x7c>
1000361c:	e0bffc17 	ldw	r2,-16(fp)
10003620:	00000206 	br	1000362c <altera_avalon_jtag_uart_ioctl+0x84>
10003624:	00a00034 	movhi	r2,32768
10003628:	10bfff84 	addi	r2,r2,-2
1000362c:	e0fffd17 	ldw	r3,-12(fp)
10003630:	18800115 	stw	r2,4(r3)
10003634:	e03ffb15 	stw	zero,-20(fp)
10003638:	00000f06 	br	10003678 <altera_avalon_jtag_uart_ioctl+0xd0>
1000363c:	e0bffd17 	ldw	r2,-12(fp)
10003640:	10c00117 	ldw	r3,4(r2)
10003644:	00a00034 	movhi	r2,32768
10003648:	10bfffc4 	addi	r2,r2,-1
1000364c:	18800c26 	beq	r3,r2,10003680 <altera_avalon_jtag_uart_ioctl+0xd8>
10003650:	e0bffd17 	ldw	r2,-12(fp)
10003654:	10c00917 	ldw	r3,36(r2)
10003658:	e0bffd17 	ldw	r2,-12(fp)
1000365c:	10800117 	ldw	r2,4(r2)
10003660:	1885803a 	cmpltu	r2,r3,r2
10003664:	10c03fcc 	andi	r3,r2,255
10003668:	e0bfff17 	ldw	r2,-4(fp)
1000366c:	10c00015 	stw	r3,0(r2)
10003670:	e03ffb15 	stw	zero,-20(fp)
10003674:	00000206 	br	10003680 <altera_avalon_jtag_uart_ioctl+0xd8>
10003678:	0001883a 	nop
1000367c:	00000106 	br	10003684 <altera_avalon_jtag_uart_ioctl+0xdc>
10003680:	0001883a 	nop
10003684:	e0bffb17 	ldw	r2,-20(fp)
10003688:	e037883a 	mov	sp,fp
1000368c:	df000017 	ldw	fp,0(sp)
10003690:	dec00104 	addi	sp,sp,4
10003694:	f800283a 	ret

10003698 <altera_avalon_jtag_uart_read>:
10003698:	defff304 	addi	sp,sp,-52
1000369c:	dfc00c15 	stw	ra,48(sp)
100036a0:	df000b15 	stw	fp,44(sp)
100036a4:	df000b04 	addi	fp,sp,44
100036a8:	e13ffc15 	stw	r4,-16(fp)
100036ac:	e17ffd15 	stw	r5,-12(fp)
100036b0:	e1bffe15 	stw	r6,-8(fp)
100036b4:	e1ffff15 	stw	r7,-4(fp)
100036b8:	e0bffd17 	ldw	r2,-12(fp)
100036bc:	e0bff515 	stw	r2,-44(fp)
100036c0:	00004706 	br	100037e0 <altera_avalon_jtag_uart_read+0x148>
100036c4:	e0bffc17 	ldw	r2,-16(fp)
100036c8:	10800a17 	ldw	r2,40(r2)
100036cc:	e0bff715 	stw	r2,-36(fp)
100036d0:	e0bffc17 	ldw	r2,-16(fp)
100036d4:	10800b17 	ldw	r2,44(r2)
100036d8:	e0bff815 	stw	r2,-32(fp)
100036dc:	e0fff717 	ldw	r3,-36(fp)
100036e0:	e0bff817 	ldw	r2,-32(fp)
100036e4:	18800536 	bltu	r3,r2,100036fc <altera_avalon_jtag_uart_read+0x64>
100036e8:	e0fff717 	ldw	r3,-36(fp)
100036ec:	e0bff817 	ldw	r2,-32(fp)
100036f0:	1885c83a 	sub	r2,r3,r2
100036f4:	e0bff615 	stw	r2,-40(fp)
100036f8:	00000406 	br	1000370c <altera_avalon_jtag_uart_read+0x74>
100036fc:	00c20004 	movi	r3,2048
10003700:	e0bff817 	ldw	r2,-32(fp)
10003704:	1885c83a 	sub	r2,r3,r2
10003708:	e0bff615 	stw	r2,-40(fp)
1000370c:	e0bff617 	ldw	r2,-40(fp)
10003710:	10001e26 	beq	r2,zero,1000378c <altera_avalon_jtag_uart_read+0xf4>
10003714:	e0fffe17 	ldw	r3,-8(fp)
10003718:	e0bff617 	ldw	r2,-40(fp)
1000371c:	1880022e 	bgeu	r3,r2,10003728 <altera_avalon_jtag_uart_read+0x90>
10003720:	e0bffe17 	ldw	r2,-8(fp)
10003724:	e0bff615 	stw	r2,-40(fp)
10003728:	e0bffc17 	ldw	r2,-16(fp)
1000372c:	10c00e04 	addi	r3,r2,56
10003730:	e0bff817 	ldw	r2,-32(fp)
10003734:	1885883a 	add	r2,r3,r2
10003738:	e1bff617 	ldw	r6,-40(fp)
1000373c:	100b883a 	mov	r5,r2
10003740:	e13ff517 	ldw	r4,-44(fp)
10003744:	0004ca80 	call	10004ca8 <memcpy>
10003748:	e0fff517 	ldw	r3,-44(fp)
1000374c:	e0bff617 	ldw	r2,-40(fp)
10003750:	1885883a 	add	r2,r3,r2
10003754:	e0bff515 	stw	r2,-44(fp)
10003758:	e0fffe17 	ldw	r3,-8(fp)
1000375c:	e0bff617 	ldw	r2,-40(fp)
10003760:	1885c83a 	sub	r2,r3,r2
10003764:	e0bffe15 	stw	r2,-8(fp)
10003768:	e0fff817 	ldw	r3,-32(fp)
1000376c:	e0bff617 	ldw	r2,-40(fp)
10003770:	1885883a 	add	r2,r3,r2
10003774:	10c1ffcc 	andi	r3,r2,2047
10003778:	e0bffc17 	ldw	r2,-16(fp)
1000377c:	10c00b15 	stw	r3,44(r2)
10003780:	e0bffe17 	ldw	r2,-8(fp)
10003784:	00bfcf16 	blt	zero,r2,100036c4 <__alt_data_end+0xf80036c4>
10003788:	00000106 	br	10003790 <altera_avalon_jtag_uart_read+0xf8>
1000378c:	0001883a 	nop
10003790:	e0fff517 	ldw	r3,-44(fp)
10003794:	e0bffd17 	ldw	r2,-12(fp)
10003798:	1880141e 	bne	r3,r2,100037ec <altera_avalon_jtag_uart_read+0x154>
1000379c:	e0bfff17 	ldw	r2,-4(fp)
100037a0:	1090000c 	andi	r2,r2,16384
100037a4:	1000131e 	bne	r2,zero,100037f4 <altera_avalon_jtag_uart_read+0x15c>
100037a8:	0001883a 	nop
100037ac:	e0bffc17 	ldw	r2,-16(fp)
100037b0:	10c00a17 	ldw	r3,40(r2)
100037b4:	e0bff717 	ldw	r2,-36(fp)
100037b8:	1880051e 	bne	r3,r2,100037d0 <altera_avalon_jtag_uart_read+0x138>
100037bc:	e0bffc17 	ldw	r2,-16(fp)
100037c0:	10c00917 	ldw	r3,36(r2)
100037c4:	e0bffc17 	ldw	r2,-16(fp)
100037c8:	10800117 	ldw	r2,4(r2)
100037cc:	18bff736 	bltu	r3,r2,100037ac <__alt_data_end+0xf80037ac>
100037d0:	e0bffc17 	ldw	r2,-16(fp)
100037d4:	10c00a17 	ldw	r3,40(r2)
100037d8:	e0bff717 	ldw	r2,-36(fp)
100037dc:	18800726 	beq	r3,r2,100037fc <altera_avalon_jtag_uart_read+0x164>
100037e0:	e0bffe17 	ldw	r2,-8(fp)
100037e4:	00bfb716 	blt	zero,r2,100036c4 <__alt_data_end+0xf80036c4>
100037e8:	00000506 	br	10003800 <altera_avalon_jtag_uart_read+0x168>
100037ec:	0001883a 	nop
100037f0:	00000306 	br	10003800 <altera_avalon_jtag_uart_read+0x168>
100037f4:	0001883a 	nop
100037f8:	00000106 	br	10003800 <altera_avalon_jtag_uart_read+0x168>
100037fc:	0001883a 	nop
10003800:	e0fff517 	ldw	r3,-44(fp)
10003804:	e0bffd17 	ldw	r2,-12(fp)
10003808:	18801826 	beq	r3,r2,1000386c <altera_avalon_jtag_uart_read+0x1d4>
1000380c:	0005303a 	rdctl	r2,status
10003810:	e0bffb15 	stw	r2,-20(fp)
10003814:	e0fffb17 	ldw	r3,-20(fp)
10003818:	00bfff84 	movi	r2,-2
1000381c:	1884703a 	and	r2,r3,r2
10003820:	1001703a 	wrctl	status,r2
10003824:	e0bffb17 	ldw	r2,-20(fp)
10003828:	e0bffa15 	stw	r2,-24(fp)
1000382c:	e0bffc17 	ldw	r2,-16(fp)
10003830:	10800817 	ldw	r2,32(r2)
10003834:	10c00054 	ori	r3,r2,1
10003838:	e0bffc17 	ldw	r2,-16(fp)
1000383c:	10c00815 	stw	r3,32(r2)
10003840:	e0bffc17 	ldw	r2,-16(fp)
10003844:	10800017 	ldw	r2,0(r2)
10003848:	10800104 	addi	r2,r2,4
1000384c:	1007883a 	mov	r3,r2
10003850:	e0bffc17 	ldw	r2,-16(fp)
10003854:	10800817 	ldw	r2,32(r2)
10003858:	18800035 	stwio	r2,0(r3)
1000385c:	e0bffa17 	ldw	r2,-24(fp)
10003860:	e0bff915 	stw	r2,-28(fp)
10003864:	e0bff917 	ldw	r2,-28(fp)
10003868:	1001703a 	wrctl	status,r2
1000386c:	e0fff517 	ldw	r3,-44(fp)
10003870:	e0bffd17 	ldw	r2,-12(fp)
10003874:	18800426 	beq	r3,r2,10003888 <altera_avalon_jtag_uart_read+0x1f0>
10003878:	e0fff517 	ldw	r3,-44(fp)
1000387c:	e0bffd17 	ldw	r2,-12(fp)
10003880:	1885c83a 	sub	r2,r3,r2
10003884:	00000606 	br	100038a0 <altera_avalon_jtag_uart_read+0x208>
10003888:	e0bfff17 	ldw	r2,-4(fp)
1000388c:	1090000c 	andi	r2,r2,16384
10003890:	10000226 	beq	r2,zero,1000389c <altera_avalon_jtag_uart_read+0x204>
10003894:	00bffd44 	movi	r2,-11
10003898:	00000106 	br	100038a0 <altera_avalon_jtag_uart_read+0x208>
1000389c:	00bffec4 	movi	r2,-5
100038a0:	e037883a 	mov	sp,fp
100038a4:	dfc00117 	ldw	ra,4(sp)
100038a8:	df000017 	ldw	fp,0(sp)
100038ac:	dec00204 	addi	sp,sp,8
100038b0:	f800283a 	ret

100038b4 <altera_avalon_jtag_uart_write>:
100038b4:	defff304 	addi	sp,sp,-52
100038b8:	dfc00c15 	stw	ra,48(sp)
100038bc:	df000b15 	stw	fp,44(sp)
100038c0:	df000b04 	addi	fp,sp,44
100038c4:	e13ffc15 	stw	r4,-16(fp)
100038c8:	e17ffd15 	stw	r5,-12(fp)
100038cc:	e1bffe15 	stw	r6,-8(fp)
100038d0:	e1ffff15 	stw	r7,-4(fp)
100038d4:	e03ff515 	stw	zero,-44(fp)
100038d8:	e0bffd17 	ldw	r2,-12(fp)
100038dc:	e0bff715 	stw	r2,-36(fp)
100038e0:	00003706 	br	100039c0 <altera_avalon_jtag_uart_write+0x10c>
100038e4:	e0bffc17 	ldw	r2,-16(fp)
100038e8:	10800c17 	ldw	r2,48(r2)
100038ec:	e0bff915 	stw	r2,-28(fp)
100038f0:	e0bffc17 	ldw	r2,-16(fp)
100038f4:	10800d17 	ldw	r2,52(r2)
100038f8:	e0bff515 	stw	r2,-44(fp)
100038fc:	e0fff917 	ldw	r3,-28(fp)
10003900:	e0bff517 	ldw	r2,-44(fp)
10003904:	1880062e 	bgeu	r3,r2,10003920 <altera_avalon_jtag_uart_write+0x6c>
10003908:	e0fff517 	ldw	r3,-44(fp)
1000390c:	e0bff917 	ldw	r2,-28(fp)
10003910:	1885c83a 	sub	r2,r3,r2
10003914:	10bfffc4 	addi	r2,r2,-1
10003918:	e0bff615 	stw	r2,-40(fp)
1000391c:	00000b06 	br	1000394c <altera_avalon_jtag_uart_write+0x98>
10003920:	e0bff517 	ldw	r2,-44(fp)
10003924:	10000526 	beq	r2,zero,1000393c <altera_avalon_jtag_uart_write+0x88>
10003928:	00c20004 	movi	r3,2048
1000392c:	e0bff917 	ldw	r2,-28(fp)
10003930:	1885c83a 	sub	r2,r3,r2
10003934:	e0bff615 	stw	r2,-40(fp)
10003938:	00000406 	br	1000394c <altera_avalon_jtag_uart_write+0x98>
1000393c:	00c1ffc4 	movi	r3,2047
10003940:	e0bff917 	ldw	r2,-28(fp)
10003944:	1885c83a 	sub	r2,r3,r2
10003948:	e0bff615 	stw	r2,-40(fp)
1000394c:	e0bff617 	ldw	r2,-40(fp)
10003950:	10001e26 	beq	r2,zero,100039cc <altera_avalon_jtag_uart_write+0x118>
10003954:	e0fffe17 	ldw	r3,-8(fp)
10003958:	e0bff617 	ldw	r2,-40(fp)
1000395c:	1880022e 	bgeu	r3,r2,10003968 <altera_avalon_jtag_uart_write+0xb4>
10003960:	e0bffe17 	ldw	r2,-8(fp)
10003964:	e0bff615 	stw	r2,-40(fp)
10003968:	e0bffc17 	ldw	r2,-16(fp)
1000396c:	10c20e04 	addi	r3,r2,2104
10003970:	e0bff917 	ldw	r2,-28(fp)
10003974:	1885883a 	add	r2,r3,r2
10003978:	e1bff617 	ldw	r6,-40(fp)
1000397c:	e17ffd17 	ldw	r5,-12(fp)
10003980:	1009883a 	mov	r4,r2
10003984:	0004ca80 	call	10004ca8 <memcpy>
10003988:	e0fffd17 	ldw	r3,-12(fp)
1000398c:	e0bff617 	ldw	r2,-40(fp)
10003990:	1885883a 	add	r2,r3,r2
10003994:	e0bffd15 	stw	r2,-12(fp)
10003998:	e0fffe17 	ldw	r3,-8(fp)
1000399c:	e0bff617 	ldw	r2,-40(fp)
100039a0:	1885c83a 	sub	r2,r3,r2
100039a4:	e0bffe15 	stw	r2,-8(fp)
100039a8:	e0fff917 	ldw	r3,-28(fp)
100039ac:	e0bff617 	ldw	r2,-40(fp)
100039b0:	1885883a 	add	r2,r3,r2
100039b4:	10c1ffcc 	andi	r3,r2,2047
100039b8:	e0bffc17 	ldw	r2,-16(fp)
100039bc:	10c00c15 	stw	r3,48(r2)
100039c0:	e0bffe17 	ldw	r2,-8(fp)
100039c4:	00bfc716 	blt	zero,r2,100038e4 <__alt_data_end+0xf80038e4>
100039c8:	00000106 	br	100039d0 <altera_avalon_jtag_uart_write+0x11c>
100039cc:	0001883a 	nop
100039d0:	0005303a 	rdctl	r2,status
100039d4:	e0bffb15 	stw	r2,-20(fp)
100039d8:	e0fffb17 	ldw	r3,-20(fp)
100039dc:	00bfff84 	movi	r2,-2
100039e0:	1884703a 	and	r2,r3,r2
100039e4:	1001703a 	wrctl	status,r2
100039e8:	e0bffb17 	ldw	r2,-20(fp)
100039ec:	e0bffa15 	stw	r2,-24(fp)
100039f0:	e0bffc17 	ldw	r2,-16(fp)
100039f4:	10800817 	ldw	r2,32(r2)
100039f8:	10c00094 	ori	r3,r2,2
100039fc:	e0bffc17 	ldw	r2,-16(fp)
10003a00:	10c00815 	stw	r3,32(r2)
10003a04:	e0bffc17 	ldw	r2,-16(fp)
10003a08:	10800017 	ldw	r2,0(r2)
10003a0c:	10800104 	addi	r2,r2,4
10003a10:	1007883a 	mov	r3,r2
10003a14:	e0bffc17 	ldw	r2,-16(fp)
10003a18:	10800817 	ldw	r2,32(r2)
10003a1c:	18800035 	stwio	r2,0(r3)
10003a20:	e0bffa17 	ldw	r2,-24(fp)
10003a24:	e0bff815 	stw	r2,-32(fp)
10003a28:	e0bff817 	ldw	r2,-32(fp)
10003a2c:	1001703a 	wrctl	status,r2
10003a30:	e0bffe17 	ldw	r2,-8(fp)
10003a34:	0080100e 	bge	zero,r2,10003a78 <altera_avalon_jtag_uart_write+0x1c4>
10003a38:	e0bfff17 	ldw	r2,-4(fp)
10003a3c:	1090000c 	andi	r2,r2,16384
10003a40:	1000101e 	bne	r2,zero,10003a84 <altera_avalon_jtag_uart_write+0x1d0>
10003a44:	0001883a 	nop
10003a48:	e0bffc17 	ldw	r2,-16(fp)
10003a4c:	10c00d17 	ldw	r3,52(r2)
10003a50:	e0bff517 	ldw	r2,-44(fp)
10003a54:	1880051e 	bne	r3,r2,10003a6c <altera_avalon_jtag_uart_write+0x1b8>
10003a58:	e0bffc17 	ldw	r2,-16(fp)
10003a5c:	10c00917 	ldw	r3,36(r2)
10003a60:	e0bffc17 	ldw	r2,-16(fp)
10003a64:	10800117 	ldw	r2,4(r2)
10003a68:	18bff736 	bltu	r3,r2,10003a48 <__alt_data_end+0xf8003a48>
10003a6c:	e0bffc17 	ldw	r2,-16(fp)
10003a70:	10800917 	ldw	r2,36(r2)
10003a74:	1000051e 	bne	r2,zero,10003a8c <altera_avalon_jtag_uart_write+0x1d8>
10003a78:	e0bffe17 	ldw	r2,-8(fp)
10003a7c:	00bfd016 	blt	zero,r2,100039c0 <__alt_data_end+0xf80039c0>
10003a80:	00000306 	br	10003a90 <altera_avalon_jtag_uart_write+0x1dc>
10003a84:	0001883a 	nop
10003a88:	00000106 	br	10003a90 <altera_avalon_jtag_uart_write+0x1dc>
10003a8c:	0001883a 	nop
10003a90:	e0fffd17 	ldw	r3,-12(fp)
10003a94:	e0bff717 	ldw	r2,-36(fp)
10003a98:	18800426 	beq	r3,r2,10003aac <altera_avalon_jtag_uart_write+0x1f8>
10003a9c:	e0fffd17 	ldw	r3,-12(fp)
10003aa0:	e0bff717 	ldw	r2,-36(fp)
10003aa4:	1885c83a 	sub	r2,r3,r2
10003aa8:	00000606 	br	10003ac4 <altera_avalon_jtag_uart_write+0x210>
10003aac:	e0bfff17 	ldw	r2,-4(fp)
10003ab0:	1090000c 	andi	r2,r2,16384
10003ab4:	10000226 	beq	r2,zero,10003ac0 <altera_avalon_jtag_uart_write+0x20c>
10003ab8:	00bffd44 	movi	r2,-11
10003abc:	00000106 	br	10003ac4 <altera_avalon_jtag_uart_write+0x210>
10003ac0:	00bffec4 	movi	r2,-5
10003ac4:	e037883a 	mov	sp,fp
10003ac8:	dfc00117 	ldw	ra,4(sp)
10003acc:	df000017 	ldw	fp,0(sp)
10003ad0:	dec00204 	addi	sp,sp,8
10003ad4:	f800283a 	ret

10003ad8 <alt_alarm_start>:
10003ad8:	defff504 	addi	sp,sp,-44
10003adc:	df000a15 	stw	fp,40(sp)
10003ae0:	df000a04 	addi	fp,sp,40
10003ae4:	e13ffc15 	stw	r4,-16(fp)
10003ae8:	e17ffd15 	stw	r5,-12(fp)
10003aec:	e1bffe15 	stw	r6,-8(fp)
10003af0:	e1ffff15 	stw	r7,-4(fp)
10003af4:	e03ff615 	stw	zero,-40(fp)
10003af8:	d0a4d617 	ldw	r2,-27816(gp)
10003afc:	10003c26 	beq	r2,zero,10003bf0 <alt_alarm_start+0x118>
10003b00:	e0bffc17 	ldw	r2,-16(fp)
10003b04:	10003826 	beq	r2,zero,10003be8 <alt_alarm_start+0x110>
10003b08:	e0bffc17 	ldw	r2,-16(fp)
10003b0c:	e0fffe17 	ldw	r3,-8(fp)
10003b10:	10c00315 	stw	r3,12(r2)
10003b14:	e0bffc17 	ldw	r2,-16(fp)
10003b18:	e0ffff17 	ldw	r3,-4(fp)
10003b1c:	10c00515 	stw	r3,20(r2)
10003b20:	0005303a 	rdctl	r2,status
10003b24:	e0bff915 	stw	r2,-28(fp)
10003b28:	e0fff917 	ldw	r3,-28(fp)
10003b2c:	00bfff84 	movi	r2,-2
10003b30:	1884703a 	and	r2,r3,r2
10003b34:	1001703a 	wrctl	status,r2
10003b38:	e0bff917 	ldw	r2,-28(fp)
10003b3c:	e0bff815 	stw	r2,-32(fp)
10003b40:	d0a4d717 	ldw	r2,-27812(gp)
10003b44:	e0bff615 	stw	r2,-40(fp)
10003b48:	e0fffd17 	ldw	r3,-12(fp)
10003b4c:	e0bff617 	ldw	r2,-40(fp)
10003b50:	1885883a 	add	r2,r3,r2
10003b54:	10c00044 	addi	r3,r2,1
10003b58:	e0bffc17 	ldw	r2,-16(fp)
10003b5c:	10c00215 	stw	r3,8(r2)
10003b60:	e0bffc17 	ldw	r2,-16(fp)
10003b64:	10c00217 	ldw	r3,8(r2)
10003b68:	e0bff617 	ldw	r2,-40(fp)
10003b6c:	1880042e 	bgeu	r3,r2,10003b80 <alt_alarm_start+0xa8>
10003b70:	e0bffc17 	ldw	r2,-16(fp)
10003b74:	00c00044 	movi	r3,1
10003b78:	10c00405 	stb	r3,16(r2)
10003b7c:	00000206 	br	10003b88 <alt_alarm_start+0xb0>
10003b80:	e0bffc17 	ldw	r2,-16(fp)
10003b84:	10000405 	stb	zero,16(r2)
10003b88:	e0bffc17 	ldw	r2,-16(fp)
10003b8c:	d0e00904 	addi	r3,gp,-32732
10003b90:	e0fffa15 	stw	r3,-24(fp)
10003b94:	e0bffb15 	stw	r2,-20(fp)
10003b98:	e0bffb17 	ldw	r2,-20(fp)
10003b9c:	e0fffa17 	ldw	r3,-24(fp)
10003ba0:	10c00115 	stw	r3,4(r2)
10003ba4:	e0bffa17 	ldw	r2,-24(fp)
10003ba8:	10c00017 	ldw	r3,0(r2)
10003bac:	e0bffb17 	ldw	r2,-20(fp)
10003bb0:	10c00015 	stw	r3,0(r2)
10003bb4:	e0bffa17 	ldw	r2,-24(fp)
10003bb8:	10800017 	ldw	r2,0(r2)
10003bbc:	e0fffb17 	ldw	r3,-20(fp)
10003bc0:	10c00115 	stw	r3,4(r2)
10003bc4:	e0bffa17 	ldw	r2,-24(fp)
10003bc8:	e0fffb17 	ldw	r3,-20(fp)
10003bcc:	10c00015 	stw	r3,0(r2)
10003bd0:	e0bff817 	ldw	r2,-32(fp)
10003bd4:	e0bff715 	stw	r2,-36(fp)
10003bd8:	e0bff717 	ldw	r2,-36(fp)
10003bdc:	1001703a 	wrctl	status,r2
10003be0:	0005883a 	mov	r2,zero
10003be4:	00000306 	br	10003bf4 <alt_alarm_start+0x11c>
10003be8:	00bffa84 	movi	r2,-22
10003bec:	00000106 	br	10003bf4 <alt_alarm_start+0x11c>
10003bf0:	00bfde84 	movi	r2,-134
10003bf4:	e037883a 	mov	sp,fp
10003bf8:	df000017 	ldw	fp,0(sp)
10003bfc:	dec00104 	addi	sp,sp,4
10003c00:	f800283a 	ret

10003c04 <alt_busy_sleep>:
10003c04:	defffa04 	addi	sp,sp,-24
10003c08:	dfc00515 	stw	ra,20(sp)
10003c0c:	df000415 	stw	fp,16(sp)
10003c10:	df000404 	addi	fp,sp,16
10003c14:	e13fff15 	stw	r4,-4(fp)
10003c18:	00800244 	movi	r2,9
10003c1c:	e0bffd15 	stw	r2,-12(fp)
10003c20:	014003f4 	movhi	r5,15
10003c24:	29509004 	addi	r5,r5,16960
10003c28:	e13ffd17 	ldw	r4,-12(fp)
10003c2c:	0002cbc0 	call	10002cbc <__mulsi3>
10003c30:	100b883a 	mov	r5,r2
10003c34:	0100bef4 	movhi	r4,763
10003c38:	213c2004 	addi	r4,r4,-3968
10003c3c:	0002c000 	call	10002c00 <__udivsi3>
10003c40:	100b883a 	mov	r5,r2
10003c44:	01200034 	movhi	r4,32768
10003c48:	213fffc4 	addi	r4,r4,-1
10003c4c:	0002c000 	call	10002c00 <__udivsi3>
10003c50:	100b883a 	mov	r5,r2
10003c54:	e13fff17 	ldw	r4,-4(fp)
10003c58:	0002c000 	call	10002c00 <__udivsi3>
10003c5c:	e0bffe15 	stw	r2,-8(fp)
10003c60:	e0bffe17 	ldw	r2,-8(fp)
10003c64:	10002a26 	beq	r2,zero,10003d10 <alt_busy_sleep+0x10c>
10003c68:	e03ffc15 	stw	zero,-16(fp)
10003c6c:	00001706 	br	10003ccc <alt_busy_sleep+0xc8>
10003c70:	00a00034 	movhi	r2,32768
10003c74:	10bfffc4 	addi	r2,r2,-1
10003c78:	10bfffc4 	addi	r2,r2,-1
10003c7c:	103ffe1e 	bne	r2,zero,10003c78 <__alt_data_end+0xf8003c78>
10003c80:	014003f4 	movhi	r5,15
10003c84:	29509004 	addi	r5,r5,16960
10003c88:	e13ffd17 	ldw	r4,-12(fp)
10003c8c:	0002cbc0 	call	10002cbc <__mulsi3>
10003c90:	100b883a 	mov	r5,r2
10003c94:	0100bef4 	movhi	r4,763
10003c98:	213c2004 	addi	r4,r4,-3968
10003c9c:	0002c000 	call	10002c00 <__udivsi3>
10003ca0:	100b883a 	mov	r5,r2
10003ca4:	01200034 	movhi	r4,32768
10003ca8:	213fffc4 	addi	r4,r4,-1
10003cac:	0002c000 	call	10002c00 <__udivsi3>
10003cb0:	1007883a 	mov	r3,r2
10003cb4:	e0bfff17 	ldw	r2,-4(fp)
10003cb8:	10c5c83a 	sub	r2,r2,r3
10003cbc:	e0bfff15 	stw	r2,-4(fp)
10003cc0:	e0bffc17 	ldw	r2,-16(fp)
10003cc4:	10800044 	addi	r2,r2,1
10003cc8:	e0bffc15 	stw	r2,-16(fp)
10003ccc:	e0fffc17 	ldw	r3,-16(fp)
10003cd0:	e0bffe17 	ldw	r2,-8(fp)
10003cd4:	18bfe616 	blt	r3,r2,10003c70 <__alt_data_end+0xf8003c70>
10003cd8:	014003f4 	movhi	r5,15
10003cdc:	29509004 	addi	r5,r5,16960
10003ce0:	e13ffd17 	ldw	r4,-12(fp)
10003ce4:	0002cbc0 	call	10002cbc <__mulsi3>
10003ce8:	100b883a 	mov	r5,r2
10003cec:	0100bef4 	movhi	r4,763
10003cf0:	213c2004 	addi	r4,r4,-3968
10003cf4:	0002c000 	call	10002c00 <__udivsi3>
10003cf8:	e17fff17 	ldw	r5,-4(fp)
10003cfc:	1009883a 	mov	r4,r2
10003d00:	0002cbc0 	call	10002cbc <__mulsi3>
10003d04:	10bfffc4 	addi	r2,r2,-1
10003d08:	103ffe1e 	bne	r2,zero,10003d04 <__alt_data_end+0xf8003d04>
10003d0c:	00000d06 	br	10003d44 <alt_busy_sleep+0x140>
10003d10:	014003f4 	movhi	r5,15
10003d14:	29509004 	addi	r5,r5,16960
10003d18:	e13ffd17 	ldw	r4,-12(fp)
10003d1c:	0002cbc0 	call	10002cbc <__mulsi3>
10003d20:	100b883a 	mov	r5,r2
10003d24:	0100bef4 	movhi	r4,763
10003d28:	213c2004 	addi	r4,r4,-3968
10003d2c:	0002c000 	call	10002c00 <__udivsi3>
10003d30:	e17fff17 	ldw	r5,-4(fp)
10003d34:	1009883a 	mov	r4,r2
10003d38:	0002cbc0 	call	10002cbc <__mulsi3>
10003d3c:	10bfffc4 	addi	r2,r2,-1
10003d40:	00bffe16 	blt	zero,r2,10003d3c <__alt_data_end+0xf8003d3c>
10003d44:	0005883a 	mov	r2,zero
10003d48:	e037883a 	mov	sp,fp
10003d4c:	dfc00117 	ldw	ra,4(sp)
10003d50:	df000017 	ldw	fp,0(sp)
10003d54:	dec00204 	addi	sp,sp,8
10003d58:	f800283a 	ret

10003d5c <alt_get_errno>:
10003d5c:	defffe04 	addi	sp,sp,-8
10003d60:	dfc00115 	stw	ra,4(sp)
10003d64:	df000015 	stw	fp,0(sp)
10003d68:	d839883a 	mov	fp,sp
10003d6c:	d0a00717 	ldw	r2,-32740(gp)
10003d70:	10000326 	beq	r2,zero,10003d80 <alt_get_errno+0x24>
10003d74:	d0a00717 	ldw	r2,-32740(gp)
10003d78:	103ee83a 	callr	r2
10003d7c:	00000106 	br	10003d84 <alt_get_errno+0x28>
10003d80:	d0a4d104 	addi	r2,gp,-27836
10003d84:	e037883a 	mov	sp,fp
10003d88:	dfc00117 	ldw	ra,4(sp)
10003d8c:	df000017 	ldw	fp,0(sp)
10003d90:	dec00204 	addi	sp,sp,8
10003d94:	f800283a 	ret

10003d98 <close>:
10003d98:	defffb04 	addi	sp,sp,-20
10003d9c:	dfc00415 	stw	ra,16(sp)
10003da0:	df000315 	stw	fp,12(sp)
10003da4:	df000304 	addi	fp,sp,12
10003da8:	e13fff15 	stw	r4,-4(fp)
10003dac:	e0bfff17 	ldw	r2,-4(fp)
10003db0:	10000816 	blt	r2,zero,10003dd4 <close+0x3c>
10003db4:	01400304 	movi	r5,12
10003db8:	e13fff17 	ldw	r4,-4(fp)
10003dbc:	0002cbc0 	call	10002cbc <__mulsi3>
10003dc0:	1007883a 	mov	r3,r2
10003dc4:	00840034 	movhi	r2,4096
10003dc8:	109a4a04 	addi	r2,r2,26920
10003dcc:	1885883a 	add	r2,r3,r2
10003dd0:	00000106 	br	10003dd8 <close+0x40>
10003dd4:	0005883a 	mov	r2,zero
10003dd8:	e0bffd15 	stw	r2,-12(fp)
10003ddc:	e0bffd17 	ldw	r2,-12(fp)
10003de0:	10001926 	beq	r2,zero,10003e48 <close+0xb0>
10003de4:	e0bffd17 	ldw	r2,-12(fp)
10003de8:	10800017 	ldw	r2,0(r2)
10003dec:	10800417 	ldw	r2,16(r2)
10003df0:	10000626 	beq	r2,zero,10003e0c <close+0x74>
10003df4:	e0bffd17 	ldw	r2,-12(fp)
10003df8:	10800017 	ldw	r2,0(r2)
10003dfc:	10800417 	ldw	r2,16(r2)
10003e00:	e13ffd17 	ldw	r4,-12(fp)
10003e04:	103ee83a 	callr	r2
10003e08:	00000106 	br	10003e10 <close+0x78>
10003e0c:	0005883a 	mov	r2,zero
10003e10:	e0bffe15 	stw	r2,-8(fp)
10003e14:	e13fff17 	ldw	r4,-4(fp)
10003e18:	00047000 	call	10004700 <alt_release_fd>
10003e1c:	e0bffe17 	ldw	r2,-8(fp)
10003e20:	1000070e 	bge	r2,zero,10003e40 <close+0xa8>
10003e24:	0003d5c0 	call	10003d5c <alt_get_errno>
10003e28:	1007883a 	mov	r3,r2
10003e2c:	e0bffe17 	ldw	r2,-8(fp)
10003e30:	0085c83a 	sub	r2,zero,r2
10003e34:	18800015 	stw	r2,0(r3)
10003e38:	00bfffc4 	movi	r2,-1
10003e3c:	00000706 	br	10003e5c <close+0xc4>
10003e40:	0005883a 	mov	r2,zero
10003e44:	00000506 	br	10003e5c <close+0xc4>
10003e48:	0003d5c0 	call	10003d5c <alt_get_errno>
10003e4c:	1007883a 	mov	r3,r2
10003e50:	00801444 	movi	r2,81
10003e54:	18800015 	stw	r2,0(r3)
10003e58:	00bfffc4 	movi	r2,-1
10003e5c:	e037883a 	mov	sp,fp
10003e60:	dfc00117 	ldw	ra,4(sp)
10003e64:	df000017 	ldw	fp,0(sp)
10003e68:	dec00204 	addi	sp,sp,8
10003e6c:	f800283a 	ret

10003e70 <alt_dcache_flush_all>:
10003e70:	deffff04 	addi	sp,sp,-4
10003e74:	df000015 	stw	fp,0(sp)
10003e78:	d839883a 	mov	fp,sp
10003e7c:	0001883a 	nop
10003e80:	e037883a 	mov	sp,fp
10003e84:	df000017 	ldw	fp,0(sp)
10003e88:	dec00104 	addi	sp,sp,4
10003e8c:	f800283a 	ret

10003e90 <alt_dev_null_write>:
10003e90:	defffc04 	addi	sp,sp,-16
10003e94:	df000315 	stw	fp,12(sp)
10003e98:	df000304 	addi	fp,sp,12
10003e9c:	e13ffd15 	stw	r4,-12(fp)
10003ea0:	e17ffe15 	stw	r5,-8(fp)
10003ea4:	e1bfff15 	stw	r6,-4(fp)
10003ea8:	e0bfff17 	ldw	r2,-4(fp)
10003eac:	e037883a 	mov	sp,fp
10003eb0:	df000017 	ldw	fp,0(sp)
10003eb4:	dec00104 	addi	sp,sp,4
10003eb8:	f800283a 	ret

10003ebc <alt_get_errno>:
10003ebc:	defffe04 	addi	sp,sp,-8
10003ec0:	dfc00115 	stw	ra,4(sp)
10003ec4:	df000015 	stw	fp,0(sp)
10003ec8:	d839883a 	mov	fp,sp
10003ecc:	d0a00717 	ldw	r2,-32740(gp)
10003ed0:	10000326 	beq	r2,zero,10003ee0 <alt_get_errno+0x24>
10003ed4:	d0a00717 	ldw	r2,-32740(gp)
10003ed8:	103ee83a 	callr	r2
10003edc:	00000106 	br	10003ee4 <alt_get_errno+0x28>
10003ee0:	d0a4d104 	addi	r2,gp,-27836
10003ee4:	e037883a 	mov	sp,fp
10003ee8:	dfc00117 	ldw	ra,4(sp)
10003eec:	df000017 	ldw	fp,0(sp)
10003ef0:	dec00204 	addi	sp,sp,8
10003ef4:	f800283a 	ret

10003ef8 <alt_dev_llist_insert>:
10003ef8:	defffa04 	addi	sp,sp,-24
10003efc:	dfc00515 	stw	ra,20(sp)
10003f00:	df000415 	stw	fp,16(sp)
10003f04:	df000404 	addi	fp,sp,16
10003f08:	e13ffe15 	stw	r4,-8(fp)
10003f0c:	e17fff15 	stw	r5,-4(fp)
10003f10:	e0bffe17 	ldw	r2,-8(fp)
10003f14:	10000326 	beq	r2,zero,10003f24 <alt_dev_llist_insert+0x2c>
10003f18:	e0bffe17 	ldw	r2,-8(fp)
10003f1c:	10800217 	ldw	r2,8(r2)
10003f20:	1000061e 	bne	r2,zero,10003f3c <alt_dev_llist_insert+0x44>
10003f24:	0003ebc0 	call	10003ebc <alt_get_errno>
10003f28:	1007883a 	mov	r3,r2
10003f2c:	00800584 	movi	r2,22
10003f30:	18800015 	stw	r2,0(r3)
10003f34:	00bffa84 	movi	r2,-22
10003f38:	00001306 	br	10003f88 <alt_dev_llist_insert+0x90>
10003f3c:	e0bffe17 	ldw	r2,-8(fp)
10003f40:	e0ffff17 	ldw	r3,-4(fp)
10003f44:	e0fffc15 	stw	r3,-16(fp)
10003f48:	e0bffd15 	stw	r2,-12(fp)
10003f4c:	e0bffd17 	ldw	r2,-12(fp)
10003f50:	e0fffc17 	ldw	r3,-16(fp)
10003f54:	10c00115 	stw	r3,4(r2)
10003f58:	e0bffc17 	ldw	r2,-16(fp)
10003f5c:	10c00017 	ldw	r3,0(r2)
10003f60:	e0bffd17 	ldw	r2,-12(fp)
10003f64:	10c00015 	stw	r3,0(r2)
10003f68:	e0bffc17 	ldw	r2,-16(fp)
10003f6c:	10800017 	ldw	r2,0(r2)
10003f70:	e0fffd17 	ldw	r3,-12(fp)
10003f74:	10c00115 	stw	r3,4(r2)
10003f78:	e0bffc17 	ldw	r2,-16(fp)
10003f7c:	e0fffd17 	ldw	r3,-12(fp)
10003f80:	10c00015 	stw	r3,0(r2)
10003f84:	0005883a 	mov	r2,zero
10003f88:	e037883a 	mov	sp,fp
10003f8c:	dfc00117 	ldw	ra,4(sp)
10003f90:	df000017 	ldw	fp,0(sp)
10003f94:	dec00204 	addi	sp,sp,8
10003f98:	f800283a 	ret

10003f9c <_do_ctors>:
10003f9c:	defffd04 	addi	sp,sp,-12
10003fa0:	dfc00215 	stw	ra,8(sp)
10003fa4:	df000115 	stw	fp,4(sp)
10003fa8:	df000104 	addi	fp,sp,4
10003fac:	00840034 	movhi	r2,4096
10003fb0:	1093fa04 	addi	r2,r2,20456
10003fb4:	e0bfff15 	stw	r2,-4(fp)
10003fb8:	00000606 	br	10003fd4 <_do_ctors+0x38>
10003fbc:	e0bfff17 	ldw	r2,-4(fp)
10003fc0:	10800017 	ldw	r2,0(r2)
10003fc4:	103ee83a 	callr	r2
10003fc8:	e0bfff17 	ldw	r2,-4(fp)
10003fcc:	10bfff04 	addi	r2,r2,-4
10003fd0:	e0bfff15 	stw	r2,-4(fp)
10003fd4:	e0ffff17 	ldw	r3,-4(fp)
10003fd8:	00840034 	movhi	r2,4096
10003fdc:	1093fb04 	addi	r2,r2,20460
10003fe0:	18bff62e 	bgeu	r3,r2,10003fbc <__alt_data_end+0xf8003fbc>
10003fe4:	0001883a 	nop
10003fe8:	e037883a 	mov	sp,fp
10003fec:	dfc00117 	ldw	ra,4(sp)
10003ff0:	df000017 	ldw	fp,0(sp)
10003ff4:	dec00204 	addi	sp,sp,8
10003ff8:	f800283a 	ret

10003ffc <_do_dtors>:
10003ffc:	defffd04 	addi	sp,sp,-12
10004000:	dfc00215 	stw	ra,8(sp)
10004004:	df000115 	stw	fp,4(sp)
10004008:	df000104 	addi	fp,sp,4
1000400c:	00840034 	movhi	r2,4096
10004010:	1093fa04 	addi	r2,r2,20456
10004014:	e0bfff15 	stw	r2,-4(fp)
10004018:	00000606 	br	10004034 <_do_dtors+0x38>
1000401c:	e0bfff17 	ldw	r2,-4(fp)
10004020:	10800017 	ldw	r2,0(r2)
10004024:	103ee83a 	callr	r2
10004028:	e0bfff17 	ldw	r2,-4(fp)
1000402c:	10bfff04 	addi	r2,r2,-4
10004030:	e0bfff15 	stw	r2,-4(fp)
10004034:	e0ffff17 	ldw	r3,-4(fp)
10004038:	00840034 	movhi	r2,4096
1000403c:	1093fb04 	addi	r2,r2,20460
10004040:	18bff62e 	bgeu	r3,r2,1000401c <__alt_data_end+0xf800401c>
10004044:	0001883a 	nop
10004048:	e037883a 	mov	sp,fp
1000404c:	dfc00117 	ldw	ra,4(sp)
10004050:	df000017 	ldw	fp,0(sp)
10004054:	dec00204 	addi	sp,sp,8
10004058:	f800283a 	ret

1000405c <alt_icache_flush_all>:
1000405c:	deffff04 	addi	sp,sp,-4
10004060:	df000015 	stw	fp,0(sp)
10004064:	d839883a 	mov	fp,sp
10004068:	0001883a 	nop
1000406c:	e037883a 	mov	sp,fp
10004070:	df000017 	ldw	fp,0(sp)
10004074:	dec00104 	addi	sp,sp,4
10004078:	f800283a 	ret

1000407c <alt_ic_isr_register>:
1000407c:	defff904 	addi	sp,sp,-28
10004080:	dfc00615 	stw	ra,24(sp)
10004084:	df000515 	stw	fp,20(sp)
10004088:	df000504 	addi	fp,sp,20
1000408c:	e13ffc15 	stw	r4,-16(fp)
10004090:	e17ffd15 	stw	r5,-12(fp)
10004094:	e1bffe15 	stw	r6,-8(fp)
10004098:	e1ffff15 	stw	r7,-4(fp)
1000409c:	e0800217 	ldw	r2,8(fp)
100040a0:	d8800015 	stw	r2,0(sp)
100040a4:	e1ffff17 	ldw	r7,-4(fp)
100040a8:	e1bffe17 	ldw	r6,-8(fp)
100040ac:	e17ffd17 	ldw	r5,-12(fp)
100040b0:	e13ffc17 	ldw	r4,-16(fp)
100040b4:	000422c0 	call	1000422c <alt_iic_isr_register>
100040b8:	e037883a 	mov	sp,fp
100040bc:	dfc00117 	ldw	ra,4(sp)
100040c0:	df000017 	ldw	fp,0(sp)
100040c4:	dec00204 	addi	sp,sp,8
100040c8:	f800283a 	ret

100040cc <alt_ic_irq_enable>:
100040cc:	defff904 	addi	sp,sp,-28
100040d0:	df000615 	stw	fp,24(sp)
100040d4:	df000604 	addi	fp,sp,24
100040d8:	e13ffe15 	stw	r4,-8(fp)
100040dc:	e17fff15 	stw	r5,-4(fp)
100040e0:	e0bfff17 	ldw	r2,-4(fp)
100040e4:	e0bffa15 	stw	r2,-24(fp)
100040e8:	0005303a 	rdctl	r2,status
100040ec:	e0bffb15 	stw	r2,-20(fp)
100040f0:	e0fffb17 	ldw	r3,-20(fp)
100040f4:	00bfff84 	movi	r2,-2
100040f8:	1884703a 	and	r2,r3,r2
100040fc:	1001703a 	wrctl	status,r2
10004100:	e0bffb17 	ldw	r2,-20(fp)
10004104:	e0bffc15 	stw	r2,-16(fp)
10004108:	00c00044 	movi	r3,1
1000410c:	e0bffa17 	ldw	r2,-24(fp)
10004110:	1884983a 	sll	r2,r3,r2
10004114:	1007883a 	mov	r3,r2
10004118:	d0a4d517 	ldw	r2,-27820(gp)
1000411c:	1884b03a 	or	r2,r3,r2
10004120:	d0a4d515 	stw	r2,-27820(gp)
10004124:	d0a4d517 	ldw	r2,-27820(gp)
10004128:	100170fa 	wrctl	ienable,r2
1000412c:	e0bffc17 	ldw	r2,-16(fp)
10004130:	e0bffd15 	stw	r2,-12(fp)
10004134:	e0bffd17 	ldw	r2,-12(fp)
10004138:	1001703a 	wrctl	status,r2
1000413c:	0005883a 	mov	r2,zero
10004140:	0001883a 	nop
10004144:	e037883a 	mov	sp,fp
10004148:	df000017 	ldw	fp,0(sp)
1000414c:	dec00104 	addi	sp,sp,4
10004150:	f800283a 	ret

10004154 <alt_ic_irq_disable>:
10004154:	defff904 	addi	sp,sp,-28
10004158:	df000615 	stw	fp,24(sp)
1000415c:	df000604 	addi	fp,sp,24
10004160:	e13ffe15 	stw	r4,-8(fp)
10004164:	e17fff15 	stw	r5,-4(fp)
10004168:	e0bfff17 	ldw	r2,-4(fp)
1000416c:	e0bffa15 	stw	r2,-24(fp)
10004170:	0005303a 	rdctl	r2,status
10004174:	e0bffb15 	stw	r2,-20(fp)
10004178:	e0fffb17 	ldw	r3,-20(fp)
1000417c:	00bfff84 	movi	r2,-2
10004180:	1884703a 	and	r2,r3,r2
10004184:	1001703a 	wrctl	status,r2
10004188:	e0bffb17 	ldw	r2,-20(fp)
1000418c:	e0bffc15 	stw	r2,-16(fp)
10004190:	00c00044 	movi	r3,1
10004194:	e0bffa17 	ldw	r2,-24(fp)
10004198:	1884983a 	sll	r2,r3,r2
1000419c:	0084303a 	nor	r2,zero,r2
100041a0:	1007883a 	mov	r3,r2
100041a4:	d0a4d517 	ldw	r2,-27820(gp)
100041a8:	1884703a 	and	r2,r3,r2
100041ac:	d0a4d515 	stw	r2,-27820(gp)
100041b0:	d0a4d517 	ldw	r2,-27820(gp)
100041b4:	100170fa 	wrctl	ienable,r2
100041b8:	e0bffc17 	ldw	r2,-16(fp)
100041bc:	e0bffd15 	stw	r2,-12(fp)
100041c0:	e0bffd17 	ldw	r2,-12(fp)
100041c4:	1001703a 	wrctl	status,r2
100041c8:	0005883a 	mov	r2,zero
100041cc:	0001883a 	nop
100041d0:	e037883a 	mov	sp,fp
100041d4:	df000017 	ldw	fp,0(sp)
100041d8:	dec00104 	addi	sp,sp,4
100041dc:	f800283a 	ret

100041e0 <alt_ic_irq_enabled>:
100041e0:	defffc04 	addi	sp,sp,-16
100041e4:	df000315 	stw	fp,12(sp)
100041e8:	df000304 	addi	fp,sp,12
100041ec:	e13ffe15 	stw	r4,-8(fp)
100041f0:	e17fff15 	stw	r5,-4(fp)
100041f4:	000530fa 	rdctl	r2,ienable
100041f8:	e0bffd15 	stw	r2,-12(fp)
100041fc:	00c00044 	movi	r3,1
10004200:	e0bfff17 	ldw	r2,-4(fp)
10004204:	1884983a 	sll	r2,r3,r2
10004208:	1007883a 	mov	r3,r2
1000420c:	e0bffd17 	ldw	r2,-12(fp)
10004210:	1884703a 	and	r2,r3,r2
10004214:	1004c03a 	cmpne	r2,r2,zero
10004218:	10803fcc 	andi	r2,r2,255
1000421c:	e037883a 	mov	sp,fp
10004220:	df000017 	ldw	fp,0(sp)
10004224:	dec00104 	addi	sp,sp,4
10004228:	f800283a 	ret

1000422c <alt_iic_isr_register>:
1000422c:	defff504 	addi	sp,sp,-44
10004230:	dfc00a15 	stw	ra,40(sp)
10004234:	df000915 	stw	fp,36(sp)
10004238:	df000904 	addi	fp,sp,36
1000423c:	e13ffc15 	stw	r4,-16(fp)
10004240:	e17ffd15 	stw	r5,-12(fp)
10004244:	e1bffe15 	stw	r6,-8(fp)
10004248:	e1ffff15 	stw	r7,-4(fp)
1000424c:	00bffa84 	movi	r2,-22
10004250:	e0bff715 	stw	r2,-36(fp)
10004254:	e0bffd17 	ldw	r2,-12(fp)
10004258:	e0bff815 	stw	r2,-32(fp)
1000425c:	e0bff817 	ldw	r2,-32(fp)
10004260:	10800808 	cmpgei	r2,r2,32
10004264:	1000271e 	bne	r2,zero,10004304 <alt_iic_isr_register+0xd8>
10004268:	0005303a 	rdctl	r2,status
1000426c:	e0bffb15 	stw	r2,-20(fp)
10004270:	e0fffb17 	ldw	r3,-20(fp)
10004274:	00bfff84 	movi	r2,-2
10004278:	1884703a 	and	r2,r3,r2
1000427c:	1001703a 	wrctl	status,r2
10004280:	e0bffb17 	ldw	r2,-20(fp)
10004284:	e0bffa15 	stw	r2,-24(fp)
10004288:	00840034 	movhi	r2,4096
1000428c:	109f8304 	addi	r2,r2,32268
10004290:	e0fff817 	ldw	r3,-32(fp)
10004294:	180690fa 	slli	r3,r3,3
10004298:	10c5883a 	add	r2,r2,r3
1000429c:	e0fffe17 	ldw	r3,-8(fp)
100042a0:	10c00015 	stw	r3,0(r2)
100042a4:	00840034 	movhi	r2,4096
100042a8:	109f8304 	addi	r2,r2,32268
100042ac:	e0fff817 	ldw	r3,-32(fp)
100042b0:	180690fa 	slli	r3,r3,3
100042b4:	10c5883a 	add	r2,r2,r3
100042b8:	10800104 	addi	r2,r2,4
100042bc:	e0ffff17 	ldw	r3,-4(fp)
100042c0:	10c00015 	stw	r3,0(r2)
100042c4:	e0bffe17 	ldw	r2,-8(fp)
100042c8:	10000526 	beq	r2,zero,100042e0 <alt_iic_isr_register+0xb4>
100042cc:	e0bff817 	ldw	r2,-32(fp)
100042d0:	100b883a 	mov	r5,r2
100042d4:	e13ffc17 	ldw	r4,-16(fp)
100042d8:	00040cc0 	call	100040cc <alt_ic_irq_enable>
100042dc:	00000406 	br	100042f0 <alt_iic_isr_register+0xc4>
100042e0:	e0bff817 	ldw	r2,-32(fp)
100042e4:	100b883a 	mov	r5,r2
100042e8:	e13ffc17 	ldw	r4,-16(fp)
100042ec:	00041540 	call	10004154 <alt_ic_irq_disable>
100042f0:	e0bff715 	stw	r2,-36(fp)
100042f4:	e0bffa17 	ldw	r2,-24(fp)
100042f8:	e0bff915 	stw	r2,-28(fp)
100042fc:	e0bff917 	ldw	r2,-28(fp)
10004300:	1001703a 	wrctl	status,r2
10004304:	e0bff717 	ldw	r2,-36(fp)
10004308:	e037883a 	mov	sp,fp
1000430c:	dfc00117 	ldw	ra,4(sp)
10004310:	df000017 	ldw	fp,0(sp)
10004314:	dec00204 	addi	sp,sp,8
10004318:	f800283a 	ret

1000431c <alt_open_fd>:
1000431c:	defff804 	addi	sp,sp,-32
10004320:	dfc00715 	stw	ra,28(sp)
10004324:	df000615 	stw	fp,24(sp)
10004328:	dc000515 	stw	r16,20(sp)
1000432c:	df000604 	addi	fp,sp,24
10004330:	e13ffb15 	stw	r4,-20(fp)
10004334:	e17ffc15 	stw	r5,-16(fp)
10004338:	e1bffd15 	stw	r6,-12(fp)
1000433c:	e1fffe15 	stw	r7,-8(fp)
10004340:	e1bffe17 	ldw	r6,-8(fp)
10004344:	e17ffd17 	ldw	r5,-12(fp)
10004348:	e13ffc17 	ldw	r4,-16(fp)
1000434c:	00045a40 	call	100045a4 <open>
10004350:	e0bffa15 	stw	r2,-24(fp)
10004354:	e0bffa17 	ldw	r2,-24(fp)
10004358:	10002216 	blt	r2,zero,100043e4 <alt_open_fd+0xc8>
1000435c:	04040034 	movhi	r16,4096
10004360:	841a4a04 	addi	r16,r16,26920
10004364:	e0bffa17 	ldw	r2,-24(fp)
10004368:	01400304 	movi	r5,12
1000436c:	1009883a 	mov	r4,r2
10004370:	0002cbc0 	call	10002cbc <__mulsi3>
10004374:	8085883a 	add	r2,r16,r2
10004378:	10c00017 	ldw	r3,0(r2)
1000437c:	e0bffb17 	ldw	r2,-20(fp)
10004380:	10c00015 	stw	r3,0(r2)
10004384:	04040034 	movhi	r16,4096
10004388:	841a4a04 	addi	r16,r16,26920
1000438c:	e0bffa17 	ldw	r2,-24(fp)
10004390:	01400304 	movi	r5,12
10004394:	1009883a 	mov	r4,r2
10004398:	0002cbc0 	call	10002cbc <__mulsi3>
1000439c:	8085883a 	add	r2,r16,r2
100043a0:	10800104 	addi	r2,r2,4
100043a4:	10c00017 	ldw	r3,0(r2)
100043a8:	e0bffb17 	ldw	r2,-20(fp)
100043ac:	10c00115 	stw	r3,4(r2)
100043b0:	04040034 	movhi	r16,4096
100043b4:	841a4a04 	addi	r16,r16,26920
100043b8:	e0bffa17 	ldw	r2,-24(fp)
100043bc:	01400304 	movi	r5,12
100043c0:	1009883a 	mov	r4,r2
100043c4:	0002cbc0 	call	10002cbc <__mulsi3>
100043c8:	8085883a 	add	r2,r16,r2
100043cc:	10800204 	addi	r2,r2,8
100043d0:	10c00017 	ldw	r3,0(r2)
100043d4:	e0bffb17 	ldw	r2,-20(fp)
100043d8:	10c00215 	stw	r3,8(r2)
100043dc:	e13ffa17 	ldw	r4,-24(fp)
100043e0:	00047000 	call	10004700 <alt_release_fd>
100043e4:	0001883a 	nop
100043e8:	e6ffff04 	addi	sp,fp,-4
100043ec:	dfc00217 	ldw	ra,8(sp)
100043f0:	df000117 	ldw	fp,4(sp)
100043f4:	dc000017 	ldw	r16,0(sp)
100043f8:	dec00304 	addi	sp,sp,12
100043fc:	f800283a 	ret

10004400 <alt_io_redirect>:
10004400:	defffb04 	addi	sp,sp,-20
10004404:	dfc00415 	stw	ra,16(sp)
10004408:	df000315 	stw	fp,12(sp)
1000440c:	df000304 	addi	fp,sp,12
10004410:	e13ffd15 	stw	r4,-12(fp)
10004414:	e17ffe15 	stw	r5,-8(fp)
10004418:	e1bfff15 	stw	r6,-4(fp)
1000441c:	01c07fc4 	movi	r7,511
10004420:	01800044 	movi	r6,1
10004424:	e17ffd17 	ldw	r5,-12(fp)
10004428:	01040034 	movhi	r4,4096
1000442c:	211a4d04 	addi	r4,r4,26932
10004430:	000431c0 	call	1000431c <alt_open_fd>
10004434:	01c07fc4 	movi	r7,511
10004438:	000d883a 	mov	r6,zero
1000443c:	e17ffe17 	ldw	r5,-8(fp)
10004440:	01040034 	movhi	r4,4096
10004444:	211a4a04 	addi	r4,r4,26920
10004448:	000431c0 	call	1000431c <alt_open_fd>
1000444c:	01c07fc4 	movi	r7,511
10004450:	01800044 	movi	r6,1
10004454:	e17fff17 	ldw	r5,-4(fp)
10004458:	01040034 	movhi	r4,4096
1000445c:	211a5004 	addi	r4,r4,26944
10004460:	000431c0 	call	1000431c <alt_open_fd>
10004464:	0001883a 	nop
10004468:	e037883a 	mov	sp,fp
1000446c:	dfc00117 	ldw	ra,4(sp)
10004470:	df000017 	ldw	fp,0(sp)
10004474:	dec00204 	addi	sp,sp,8
10004478:	f800283a 	ret

1000447c <alt_get_errno>:
1000447c:	defffe04 	addi	sp,sp,-8
10004480:	dfc00115 	stw	ra,4(sp)
10004484:	df000015 	stw	fp,0(sp)
10004488:	d839883a 	mov	fp,sp
1000448c:	d0a00717 	ldw	r2,-32740(gp)
10004490:	10000326 	beq	r2,zero,100044a0 <alt_get_errno+0x24>
10004494:	d0a00717 	ldw	r2,-32740(gp)
10004498:	103ee83a 	callr	r2
1000449c:	00000106 	br	100044a4 <alt_get_errno+0x28>
100044a0:	d0a4d104 	addi	r2,gp,-27836
100044a4:	e037883a 	mov	sp,fp
100044a8:	dfc00117 	ldw	ra,4(sp)
100044ac:	df000017 	ldw	fp,0(sp)
100044b0:	dec00204 	addi	sp,sp,8
100044b4:	f800283a 	ret

100044b8 <alt_file_locked>:
100044b8:	defffb04 	addi	sp,sp,-20
100044bc:	dfc00415 	stw	ra,16(sp)
100044c0:	df000315 	stw	fp,12(sp)
100044c4:	dc000215 	stw	r16,8(sp)
100044c8:	df000304 	addi	fp,sp,12
100044cc:	e13ffe15 	stw	r4,-8(fp)
100044d0:	e0bffe17 	ldw	r2,-8(fp)
100044d4:	10800217 	ldw	r2,8(r2)
100044d8:	10d00034 	orhi	r3,r2,16384
100044dc:	e0bffe17 	ldw	r2,-8(fp)
100044e0:	10c00215 	stw	r3,8(r2)
100044e4:	e03ffd15 	stw	zero,-12(fp)
100044e8:	00002306 	br	10004578 <alt_file_locked+0xc0>
100044ec:	04040034 	movhi	r16,4096
100044f0:	841a4a04 	addi	r16,r16,26920
100044f4:	e0bffd17 	ldw	r2,-12(fp)
100044f8:	01400304 	movi	r5,12
100044fc:	1009883a 	mov	r4,r2
10004500:	0002cbc0 	call	10002cbc <__mulsi3>
10004504:	8085883a 	add	r2,r16,r2
10004508:	10c00017 	ldw	r3,0(r2)
1000450c:	e0bffe17 	ldw	r2,-8(fp)
10004510:	10800017 	ldw	r2,0(r2)
10004514:	1880151e 	bne	r3,r2,1000456c <alt_file_locked+0xb4>
10004518:	04040034 	movhi	r16,4096
1000451c:	841a4a04 	addi	r16,r16,26920
10004520:	e0bffd17 	ldw	r2,-12(fp)
10004524:	01400304 	movi	r5,12
10004528:	1009883a 	mov	r4,r2
1000452c:	0002cbc0 	call	10002cbc <__mulsi3>
10004530:	8085883a 	add	r2,r16,r2
10004534:	10800204 	addi	r2,r2,8
10004538:	10800017 	ldw	r2,0(r2)
1000453c:	10000b0e 	bge	r2,zero,1000456c <alt_file_locked+0xb4>
10004540:	01400304 	movi	r5,12
10004544:	e13ffd17 	ldw	r4,-12(fp)
10004548:	0002cbc0 	call	10002cbc <__mulsi3>
1000454c:	1007883a 	mov	r3,r2
10004550:	00840034 	movhi	r2,4096
10004554:	109a4a04 	addi	r2,r2,26920
10004558:	1887883a 	add	r3,r3,r2
1000455c:	e0bffe17 	ldw	r2,-8(fp)
10004560:	18800226 	beq	r3,r2,1000456c <alt_file_locked+0xb4>
10004564:	00bffcc4 	movi	r2,-13
10004568:	00000806 	br	1000458c <alt_file_locked+0xd4>
1000456c:	e0bffd17 	ldw	r2,-12(fp)
10004570:	10800044 	addi	r2,r2,1
10004574:	e0bffd15 	stw	r2,-12(fp)
10004578:	d0a00617 	ldw	r2,-32744(gp)
1000457c:	1007883a 	mov	r3,r2
10004580:	e0bffd17 	ldw	r2,-12(fp)
10004584:	18bfd92e 	bgeu	r3,r2,100044ec <__alt_data_end+0xf80044ec>
10004588:	0005883a 	mov	r2,zero
1000458c:	e6ffff04 	addi	sp,fp,-4
10004590:	dfc00217 	ldw	ra,8(sp)
10004594:	df000117 	ldw	fp,4(sp)
10004598:	dc000017 	ldw	r16,0(sp)
1000459c:	dec00304 	addi	sp,sp,12
100045a0:	f800283a 	ret

100045a4 <open>:
100045a4:	defff604 	addi	sp,sp,-40
100045a8:	dfc00915 	stw	ra,36(sp)
100045ac:	df000815 	stw	fp,32(sp)
100045b0:	df000804 	addi	fp,sp,32
100045b4:	e13ffd15 	stw	r4,-12(fp)
100045b8:	e17ffe15 	stw	r5,-8(fp)
100045bc:	e1bfff15 	stw	r6,-4(fp)
100045c0:	00bfffc4 	movi	r2,-1
100045c4:	e0bff915 	stw	r2,-28(fp)
100045c8:	00bffb44 	movi	r2,-19
100045cc:	e0bffa15 	stw	r2,-24(fp)
100045d0:	e03ffb15 	stw	zero,-20(fp)
100045d4:	d1600404 	addi	r5,gp,-32752
100045d8:	e13ffd17 	ldw	r4,-12(fp)
100045dc:	000494c0 	call	1000494c <alt_find_dev>
100045e0:	e0bff815 	stw	r2,-32(fp)
100045e4:	e0bff817 	ldw	r2,-32(fp)
100045e8:	1000051e 	bne	r2,zero,10004600 <open+0x5c>
100045ec:	e13ffd17 	ldw	r4,-12(fp)
100045f0:	00049dc0 	call	100049dc <alt_find_file>
100045f4:	e0bff815 	stw	r2,-32(fp)
100045f8:	00800044 	movi	r2,1
100045fc:	e0bffb15 	stw	r2,-20(fp)
10004600:	e0bff817 	ldw	r2,-32(fp)
10004604:	10002b26 	beq	r2,zero,100046b4 <open+0x110>
10004608:	e13ff817 	ldw	r4,-32(fp)
1000460c:	0004ae40 	call	10004ae4 <alt_get_fd>
10004610:	e0bff915 	stw	r2,-28(fp)
10004614:	e0bff917 	ldw	r2,-28(fp)
10004618:	1000030e 	bge	r2,zero,10004628 <open+0x84>
1000461c:	e0bff917 	ldw	r2,-28(fp)
10004620:	e0bffa15 	stw	r2,-24(fp)
10004624:	00002506 	br	100046bc <open+0x118>
10004628:	01400304 	movi	r5,12
1000462c:	e13ff917 	ldw	r4,-28(fp)
10004630:	0002cbc0 	call	10002cbc <__mulsi3>
10004634:	1007883a 	mov	r3,r2
10004638:	00840034 	movhi	r2,4096
1000463c:	109a4a04 	addi	r2,r2,26920
10004640:	1885883a 	add	r2,r3,r2
10004644:	e0bffc15 	stw	r2,-16(fp)
10004648:	e0fffe17 	ldw	r3,-8(fp)
1000464c:	00900034 	movhi	r2,16384
10004650:	10bfffc4 	addi	r2,r2,-1
10004654:	1886703a 	and	r3,r3,r2
10004658:	e0bffc17 	ldw	r2,-16(fp)
1000465c:	10c00215 	stw	r3,8(r2)
10004660:	e0bffb17 	ldw	r2,-20(fp)
10004664:	1000051e 	bne	r2,zero,1000467c <open+0xd8>
10004668:	e13ffc17 	ldw	r4,-16(fp)
1000466c:	00044b80 	call	100044b8 <alt_file_locked>
10004670:	e0bffa15 	stw	r2,-24(fp)
10004674:	e0bffa17 	ldw	r2,-24(fp)
10004678:	10001016 	blt	r2,zero,100046bc <open+0x118>
1000467c:	e0bff817 	ldw	r2,-32(fp)
10004680:	10800317 	ldw	r2,12(r2)
10004684:	10000826 	beq	r2,zero,100046a8 <open+0x104>
10004688:	e0bff817 	ldw	r2,-32(fp)
1000468c:	10800317 	ldw	r2,12(r2)
10004690:	e1ffff17 	ldw	r7,-4(fp)
10004694:	e1bffe17 	ldw	r6,-8(fp)
10004698:	e17ffd17 	ldw	r5,-12(fp)
1000469c:	e13ffc17 	ldw	r4,-16(fp)
100046a0:	103ee83a 	callr	r2
100046a4:	00000106 	br	100046ac <open+0x108>
100046a8:	0005883a 	mov	r2,zero
100046ac:	e0bffa15 	stw	r2,-24(fp)
100046b0:	00000206 	br	100046bc <open+0x118>
100046b4:	00bffb44 	movi	r2,-19
100046b8:	e0bffa15 	stw	r2,-24(fp)
100046bc:	e0bffa17 	ldw	r2,-24(fp)
100046c0:	1000090e 	bge	r2,zero,100046e8 <open+0x144>
100046c4:	e13ff917 	ldw	r4,-28(fp)
100046c8:	00047000 	call	10004700 <alt_release_fd>
100046cc:	000447c0 	call	1000447c <alt_get_errno>
100046d0:	1007883a 	mov	r3,r2
100046d4:	e0bffa17 	ldw	r2,-24(fp)
100046d8:	0085c83a 	sub	r2,zero,r2
100046dc:	18800015 	stw	r2,0(r3)
100046e0:	00bfffc4 	movi	r2,-1
100046e4:	00000106 	br	100046ec <open+0x148>
100046e8:	e0bff917 	ldw	r2,-28(fp)
100046ec:	e037883a 	mov	sp,fp
100046f0:	dfc00117 	ldw	ra,4(sp)
100046f4:	df000017 	ldw	fp,0(sp)
100046f8:	dec00204 	addi	sp,sp,8
100046fc:	f800283a 	ret

10004700 <alt_release_fd>:
10004700:	defffc04 	addi	sp,sp,-16
10004704:	dfc00315 	stw	ra,12(sp)
10004708:	df000215 	stw	fp,8(sp)
1000470c:	dc000115 	stw	r16,4(sp)
10004710:	df000204 	addi	fp,sp,8
10004714:	e13ffe15 	stw	r4,-8(fp)
10004718:	e0bffe17 	ldw	r2,-8(fp)
1000471c:	108000d0 	cmplti	r2,r2,3
10004720:	1000111e 	bne	r2,zero,10004768 <alt_release_fd+0x68>
10004724:	04040034 	movhi	r16,4096
10004728:	841a4a04 	addi	r16,r16,26920
1000472c:	e0bffe17 	ldw	r2,-8(fp)
10004730:	01400304 	movi	r5,12
10004734:	1009883a 	mov	r4,r2
10004738:	0002cbc0 	call	10002cbc <__mulsi3>
1000473c:	8085883a 	add	r2,r16,r2
10004740:	10800204 	addi	r2,r2,8
10004744:	10000015 	stw	zero,0(r2)
10004748:	04040034 	movhi	r16,4096
1000474c:	841a4a04 	addi	r16,r16,26920
10004750:	e0bffe17 	ldw	r2,-8(fp)
10004754:	01400304 	movi	r5,12
10004758:	1009883a 	mov	r4,r2
1000475c:	0002cbc0 	call	10002cbc <__mulsi3>
10004760:	8085883a 	add	r2,r16,r2
10004764:	10000015 	stw	zero,0(r2)
10004768:	0001883a 	nop
1000476c:	e6ffff04 	addi	sp,fp,-4
10004770:	dfc00217 	ldw	ra,8(sp)
10004774:	df000117 	ldw	fp,4(sp)
10004778:	dc000017 	ldw	r16,0(sp)
1000477c:	dec00304 	addi	sp,sp,12
10004780:	f800283a 	ret

10004784 <alt_alarm_stop>:
10004784:	defffa04 	addi	sp,sp,-24
10004788:	df000515 	stw	fp,20(sp)
1000478c:	df000504 	addi	fp,sp,20
10004790:	e13fff15 	stw	r4,-4(fp)
10004794:	0005303a 	rdctl	r2,status
10004798:	e0bffc15 	stw	r2,-16(fp)
1000479c:	e0fffc17 	ldw	r3,-16(fp)
100047a0:	00bfff84 	movi	r2,-2
100047a4:	1884703a 	and	r2,r3,r2
100047a8:	1001703a 	wrctl	status,r2
100047ac:	e0bffc17 	ldw	r2,-16(fp)
100047b0:	e0bffb15 	stw	r2,-20(fp)
100047b4:	e0bfff17 	ldw	r2,-4(fp)
100047b8:	e0bffd15 	stw	r2,-12(fp)
100047bc:	e0bffd17 	ldw	r2,-12(fp)
100047c0:	10800017 	ldw	r2,0(r2)
100047c4:	e0fffd17 	ldw	r3,-12(fp)
100047c8:	18c00117 	ldw	r3,4(r3)
100047cc:	10c00115 	stw	r3,4(r2)
100047d0:	e0bffd17 	ldw	r2,-12(fp)
100047d4:	10800117 	ldw	r2,4(r2)
100047d8:	e0fffd17 	ldw	r3,-12(fp)
100047dc:	18c00017 	ldw	r3,0(r3)
100047e0:	10c00015 	stw	r3,0(r2)
100047e4:	e0bffd17 	ldw	r2,-12(fp)
100047e8:	e0fffd17 	ldw	r3,-12(fp)
100047ec:	10c00115 	stw	r3,4(r2)
100047f0:	e0bffd17 	ldw	r2,-12(fp)
100047f4:	e0fffd17 	ldw	r3,-12(fp)
100047f8:	10c00015 	stw	r3,0(r2)
100047fc:	e0bffb17 	ldw	r2,-20(fp)
10004800:	e0bffe15 	stw	r2,-8(fp)
10004804:	e0bffe17 	ldw	r2,-8(fp)
10004808:	1001703a 	wrctl	status,r2
1000480c:	0001883a 	nop
10004810:	e037883a 	mov	sp,fp
10004814:	df000017 	ldw	fp,0(sp)
10004818:	dec00104 	addi	sp,sp,4
1000481c:	f800283a 	ret

10004820 <alt_tick>:
10004820:	defffb04 	addi	sp,sp,-20
10004824:	dfc00415 	stw	ra,16(sp)
10004828:	df000315 	stw	fp,12(sp)
1000482c:	df000304 	addi	fp,sp,12
10004830:	d0a00917 	ldw	r2,-32732(gp)
10004834:	e0bffd15 	stw	r2,-12(fp)
10004838:	d0a4d717 	ldw	r2,-27812(gp)
1000483c:	10800044 	addi	r2,r2,1
10004840:	d0a4d715 	stw	r2,-27812(gp)
10004844:	00002e06 	br	10004900 <alt_tick+0xe0>
10004848:	e0bffd17 	ldw	r2,-12(fp)
1000484c:	10800017 	ldw	r2,0(r2)
10004850:	e0bffe15 	stw	r2,-8(fp)
10004854:	e0bffd17 	ldw	r2,-12(fp)
10004858:	10800403 	ldbu	r2,16(r2)
1000485c:	10803fcc 	andi	r2,r2,255
10004860:	10000426 	beq	r2,zero,10004874 <alt_tick+0x54>
10004864:	d0a4d717 	ldw	r2,-27812(gp)
10004868:	1000021e 	bne	r2,zero,10004874 <alt_tick+0x54>
1000486c:	e0bffd17 	ldw	r2,-12(fp)
10004870:	10000405 	stb	zero,16(r2)
10004874:	e0bffd17 	ldw	r2,-12(fp)
10004878:	10800217 	ldw	r2,8(r2)
1000487c:	d0e4d717 	ldw	r3,-27812(gp)
10004880:	18801d36 	bltu	r3,r2,100048f8 <alt_tick+0xd8>
10004884:	e0bffd17 	ldw	r2,-12(fp)
10004888:	10800403 	ldbu	r2,16(r2)
1000488c:	10803fcc 	andi	r2,r2,255
10004890:	1000191e 	bne	r2,zero,100048f8 <alt_tick+0xd8>
10004894:	e0bffd17 	ldw	r2,-12(fp)
10004898:	10800317 	ldw	r2,12(r2)
1000489c:	e0fffd17 	ldw	r3,-12(fp)
100048a0:	18c00517 	ldw	r3,20(r3)
100048a4:	1809883a 	mov	r4,r3
100048a8:	103ee83a 	callr	r2
100048ac:	e0bfff15 	stw	r2,-4(fp)
100048b0:	e0bfff17 	ldw	r2,-4(fp)
100048b4:	1000031e 	bne	r2,zero,100048c4 <alt_tick+0xa4>
100048b8:	e13ffd17 	ldw	r4,-12(fp)
100048bc:	00047840 	call	10004784 <alt_alarm_stop>
100048c0:	00000d06 	br	100048f8 <alt_tick+0xd8>
100048c4:	e0bffd17 	ldw	r2,-12(fp)
100048c8:	10c00217 	ldw	r3,8(r2)
100048cc:	e0bfff17 	ldw	r2,-4(fp)
100048d0:	1887883a 	add	r3,r3,r2
100048d4:	e0bffd17 	ldw	r2,-12(fp)
100048d8:	10c00215 	stw	r3,8(r2)
100048dc:	e0bffd17 	ldw	r2,-12(fp)
100048e0:	10c00217 	ldw	r3,8(r2)
100048e4:	d0a4d717 	ldw	r2,-27812(gp)
100048e8:	1880032e 	bgeu	r3,r2,100048f8 <alt_tick+0xd8>
100048ec:	e0bffd17 	ldw	r2,-12(fp)
100048f0:	00c00044 	movi	r3,1
100048f4:	10c00405 	stb	r3,16(r2)
100048f8:	e0bffe17 	ldw	r2,-8(fp)
100048fc:	e0bffd15 	stw	r2,-12(fp)
10004900:	e0fffd17 	ldw	r3,-12(fp)
10004904:	d0a00904 	addi	r2,gp,-32732
10004908:	18bfcf1e 	bne	r3,r2,10004848 <__alt_data_end+0xf8004848>
1000490c:	0001883a 	nop
10004910:	0001883a 	nop
10004914:	e037883a 	mov	sp,fp
10004918:	dfc00117 	ldw	ra,4(sp)
1000491c:	df000017 	ldw	fp,0(sp)
10004920:	dec00204 	addi	sp,sp,8
10004924:	f800283a 	ret

10004928 <altera_nios2_gen2_irq_init>:
10004928:	deffff04 	addi	sp,sp,-4
1000492c:	df000015 	stw	fp,0(sp)
10004930:	d839883a 	mov	fp,sp
10004934:	000170fa 	wrctl	ienable,zero
10004938:	0001883a 	nop
1000493c:	e037883a 	mov	sp,fp
10004940:	df000017 	ldw	fp,0(sp)
10004944:	dec00104 	addi	sp,sp,4
10004948:	f800283a 	ret

1000494c <alt_find_dev>:
1000494c:	defffa04 	addi	sp,sp,-24
10004950:	dfc00515 	stw	ra,20(sp)
10004954:	df000415 	stw	fp,16(sp)
10004958:	df000404 	addi	fp,sp,16
1000495c:	e13ffe15 	stw	r4,-8(fp)
10004960:	e17fff15 	stw	r5,-4(fp)
10004964:	e0bfff17 	ldw	r2,-4(fp)
10004968:	10800017 	ldw	r2,0(r2)
1000496c:	e0bffc15 	stw	r2,-16(fp)
10004970:	e13ffe17 	ldw	r4,-8(fp)
10004974:	00024280 	call	10002428 <strlen>
10004978:	10800044 	addi	r2,r2,1
1000497c:	e0bffd15 	stw	r2,-12(fp)
10004980:	00000d06 	br	100049b8 <alt_find_dev+0x6c>
10004984:	e0bffc17 	ldw	r2,-16(fp)
10004988:	10800217 	ldw	r2,8(r2)
1000498c:	e0fffd17 	ldw	r3,-12(fp)
10004990:	180d883a 	mov	r6,r3
10004994:	e17ffe17 	ldw	r5,-8(fp)
10004998:	1009883a 	mov	r4,r2
1000499c:	0004c780 	call	10004c78 <memcmp>
100049a0:	1000021e 	bne	r2,zero,100049ac <alt_find_dev+0x60>
100049a4:	e0bffc17 	ldw	r2,-16(fp)
100049a8:	00000706 	br	100049c8 <alt_find_dev+0x7c>
100049ac:	e0bffc17 	ldw	r2,-16(fp)
100049b0:	10800017 	ldw	r2,0(r2)
100049b4:	e0bffc15 	stw	r2,-16(fp)
100049b8:	e0fffc17 	ldw	r3,-16(fp)
100049bc:	e0bfff17 	ldw	r2,-4(fp)
100049c0:	18bff01e 	bne	r3,r2,10004984 <__alt_data_end+0xf8004984>
100049c4:	0005883a 	mov	r2,zero
100049c8:	e037883a 	mov	sp,fp
100049cc:	dfc00117 	ldw	ra,4(sp)
100049d0:	df000017 	ldw	fp,0(sp)
100049d4:	dec00204 	addi	sp,sp,8
100049d8:	f800283a 	ret

100049dc <alt_find_file>:
100049dc:	defffb04 	addi	sp,sp,-20
100049e0:	dfc00415 	stw	ra,16(sp)
100049e4:	df000315 	stw	fp,12(sp)
100049e8:	df000304 	addi	fp,sp,12
100049ec:	e13fff15 	stw	r4,-4(fp)
100049f0:	d0a00217 	ldw	r2,-32760(gp)
100049f4:	e0bffd15 	stw	r2,-12(fp)
100049f8:	00003106 	br	10004ac0 <alt_find_file+0xe4>
100049fc:	e0bffd17 	ldw	r2,-12(fp)
10004a00:	10800217 	ldw	r2,8(r2)
10004a04:	1009883a 	mov	r4,r2
10004a08:	00024280 	call	10002428 <strlen>
10004a0c:	e0bffe15 	stw	r2,-8(fp)
10004a10:	e0bffd17 	ldw	r2,-12(fp)
10004a14:	10c00217 	ldw	r3,8(r2)
10004a18:	e0bffe17 	ldw	r2,-8(fp)
10004a1c:	10bfffc4 	addi	r2,r2,-1
10004a20:	1885883a 	add	r2,r3,r2
10004a24:	10800003 	ldbu	r2,0(r2)
10004a28:	10803fcc 	andi	r2,r2,255
10004a2c:	1080201c 	xori	r2,r2,128
10004a30:	10bfe004 	addi	r2,r2,-128
10004a34:	10800bd8 	cmpnei	r2,r2,47
10004a38:	1000031e 	bne	r2,zero,10004a48 <alt_find_file+0x6c>
10004a3c:	e0bffe17 	ldw	r2,-8(fp)
10004a40:	10bfffc4 	addi	r2,r2,-1
10004a44:	e0bffe15 	stw	r2,-8(fp)
10004a48:	e0bffe17 	ldw	r2,-8(fp)
10004a4c:	e0ffff17 	ldw	r3,-4(fp)
10004a50:	1885883a 	add	r2,r3,r2
10004a54:	10800003 	ldbu	r2,0(r2)
10004a58:	10803fcc 	andi	r2,r2,255
10004a5c:	1080201c 	xori	r2,r2,128
10004a60:	10bfe004 	addi	r2,r2,-128
10004a64:	10800be0 	cmpeqi	r2,r2,47
10004a68:	1000081e 	bne	r2,zero,10004a8c <alt_find_file+0xb0>
10004a6c:	e0bffe17 	ldw	r2,-8(fp)
10004a70:	e0ffff17 	ldw	r3,-4(fp)
10004a74:	1885883a 	add	r2,r3,r2
10004a78:	10800003 	ldbu	r2,0(r2)
10004a7c:	10803fcc 	andi	r2,r2,255
10004a80:	1080201c 	xori	r2,r2,128
10004a84:	10bfe004 	addi	r2,r2,-128
10004a88:	10000a1e 	bne	r2,zero,10004ab4 <alt_find_file+0xd8>
10004a8c:	e0bffd17 	ldw	r2,-12(fp)
10004a90:	10800217 	ldw	r2,8(r2)
10004a94:	e0fffe17 	ldw	r3,-8(fp)
10004a98:	180d883a 	mov	r6,r3
10004a9c:	e17fff17 	ldw	r5,-4(fp)
10004aa0:	1009883a 	mov	r4,r2
10004aa4:	0004c780 	call	10004c78 <memcmp>
10004aa8:	1000021e 	bne	r2,zero,10004ab4 <alt_find_file+0xd8>
10004aac:	e0bffd17 	ldw	r2,-12(fp)
10004ab0:	00000706 	br	10004ad0 <alt_find_file+0xf4>
10004ab4:	e0bffd17 	ldw	r2,-12(fp)
10004ab8:	10800017 	ldw	r2,0(r2)
10004abc:	e0bffd15 	stw	r2,-12(fp)
10004ac0:	e0fffd17 	ldw	r3,-12(fp)
10004ac4:	d0a00204 	addi	r2,gp,-32760
10004ac8:	18bfcc1e 	bne	r3,r2,100049fc <__alt_data_end+0xf80049fc>
10004acc:	0005883a 	mov	r2,zero
10004ad0:	e037883a 	mov	sp,fp
10004ad4:	dfc00117 	ldw	ra,4(sp)
10004ad8:	df000017 	ldw	fp,0(sp)
10004adc:	dec00204 	addi	sp,sp,8
10004ae0:	f800283a 	ret

10004ae4 <alt_get_fd>:
10004ae4:	defffa04 	addi	sp,sp,-24
10004ae8:	dfc00515 	stw	ra,20(sp)
10004aec:	df000415 	stw	fp,16(sp)
10004af0:	dc000315 	stw	r16,12(sp)
10004af4:	df000404 	addi	fp,sp,16
10004af8:	e13ffe15 	stw	r4,-8(fp)
10004afc:	00bffa04 	movi	r2,-24
10004b00:	e0bffd15 	stw	r2,-12(fp)
10004b04:	e03ffc15 	stw	zero,-16(fp)
10004b08:	00001d06 	br	10004b80 <alt_get_fd+0x9c>
10004b0c:	04040034 	movhi	r16,4096
10004b10:	841a4a04 	addi	r16,r16,26920
10004b14:	e0bffc17 	ldw	r2,-16(fp)
10004b18:	01400304 	movi	r5,12
10004b1c:	1009883a 	mov	r4,r2
10004b20:	0002cbc0 	call	10002cbc <__mulsi3>
10004b24:	8085883a 	add	r2,r16,r2
10004b28:	10800017 	ldw	r2,0(r2)
10004b2c:	1000111e 	bne	r2,zero,10004b74 <alt_get_fd+0x90>
10004b30:	04040034 	movhi	r16,4096
10004b34:	841a4a04 	addi	r16,r16,26920
10004b38:	e0bffc17 	ldw	r2,-16(fp)
10004b3c:	01400304 	movi	r5,12
10004b40:	1009883a 	mov	r4,r2
10004b44:	0002cbc0 	call	10002cbc <__mulsi3>
10004b48:	8085883a 	add	r2,r16,r2
10004b4c:	e0fffe17 	ldw	r3,-8(fp)
10004b50:	10c00015 	stw	r3,0(r2)
10004b54:	d0e00617 	ldw	r3,-32744(gp)
10004b58:	e0bffc17 	ldw	r2,-16(fp)
10004b5c:	1880020e 	bge	r3,r2,10004b68 <alt_get_fd+0x84>
10004b60:	e0bffc17 	ldw	r2,-16(fp)
10004b64:	d0a00615 	stw	r2,-32744(gp)
10004b68:	e0bffc17 	ldw	r2,-16(fp)
10004b6c:	e0bffd15 	stw	r2,-12(fp)
10004b70:	00000606 	br	10004b8c <alt_get_fd+0xa8>
10004b74:	e0bffc17 	ldw	r2,-16(fp)
10004b78:	10800044 	addi	r2,r2,1
10004b7c:	e0bffc15 	stw	r2,-16(fp)
10004b80:	e0bffc17 	ldw	r2,-16(fp)
10004b84:	10800810 	cmplti	r2,r2,32
10004b88:	103fe01e 	bne	r2,zero,10004b0c <__alt_data_end+0xf8004b0c>
10004b8c:	e0bffd17 	ldw	r2,-12(fp)
10004b90:	e6ffff04 	addi	sp,fp,-4
10004b94:	dfc00217 	ldw	ra,8(sp)
10004b98:	df000117 	ldw	fp,4(sp)
10004b9c:	dc000017 	ldw	r16,0(sp)
10004ba0:	dec00304 	addi	sp,sp,12
10004ba4:	f800283a 	ret

10004ba8 <alt_exception_cause_generated_bad_addr>:
10004ba8:	defffe04 	addi	sp,sp,-8
10004bac:	df000115 	stw	fp,4(sp)
10004bb0:	df000104 	addi	fp,sp,4
10004bb4:	e13fff15 	stw	r4,-4(fp)
10004bb8:	e0bfff17 	ldw	r2,-4(fp)
10004bbc:	10bffe84 	addi	r2,r2,-6
10004bc0:	10c00428 	cmpgeui	r3,r2,16
10004bc4:	18001a1e 	bne	r3,zero,10004c30 <alt_exception_cause_generated_bad_addr+0x88>
10004bc8:	100690ba 	slli	r3,r2,2
10004bcc:	00840034 	movhi	r2,4096
10004bd0:	1092f804 	addi	r2,r2,19424
10004bd4:	1885883a 	add	r2,r3,r2
10004bd8:	10800017 	ldw	r2,0(r2)
10004bdc:	1000683a 	jmp	r2
10004be0:	10004c20 	cmpeqi	zero,r2,304
10004be4:	10004c20 	cmpeqi	zero,r2,304
10004be8:	10004c30 	cmpltui	zero,r2,304
10004bec:	10004c30 	cmpltui	zero,r2,304
10004bf0:	10004c30 	cmpltui	zero,r2,304
10004bf4:	10004c20 	cmpeqi	zero,r2,304
10004bf8:	10004c28 	cmpgeui	zero,r2,304
10004bfc:	10004c30 	cmpltui	zero,r2,304
10004c00:	10004c20 	cmpeqi	zero,r2,304
10004c04:	10004c20 	cmpeqi	zero,r2,304
10004c08:	10004c30 	cmpltui	zero,r2,304
10004c0c:	10004c20 	cmpeqi	zero,r2,304
10004c10:	10004c28 	cmpgeui	zero,r2,304
10004c14:	10004c30 	cmpltui	zero,r2,304
10004c18:	10004c30 	cmpltui	zero,r2,304
10004c1c:	10004c20 	cmpeqi	zero,r2,304
10004c20:	00800044 	movi	r2,1
10004c24:	00000306 	br	10004c34 <alt_exception_cause_generated_bad_addr+0x8c>
10004c28:	0005883a 	mov	r2,zero
10004c2c:	00000106 	br	10004c34 <alt_exception_cause_generated_bad_addr+0x8c>
10004c30:	0005883a 	mov	r2,zero
10004c34:	e037883a 	mov	sp,fp
10004c38:	df000017 	ldw	fp,0(sp)
10004c3c:	dec00104 	addi	sp,sp,4
10004c40:	f800283a 	ret

10004c44 <atexit>:
10004c44:	200b883a 	mov	r5,r4
10004c48:	000f883a 	mov	r7,zero
10004c4c:	000d883a 	mov	r6,zero
10004c50:	0009883a 	mov	r4,zero
10004c54:	0004cd01 	jmpi	10004cd0 <__register_exitproc>

10004c58 <exit>:
10004c58:	defffe04 	addi	sp,sp,-8
10004c5c:	000b883a 	mov	r5,zero
10004c60:	dc000015 	stw	r16,0(sp)
10004c64:	dfc00115 	stw	ra,4(sp)
10004c68:	2021883a 	mov	r16,r4
10004c6c:	0004e280 	call	10004e28 <__call_exitprocs>
10004c70:	8009883a 	mov	r4,r16
10004c74:	0004fb80 	call	10004fb8 <_exit>

10004c78 <memcmp>:
10004c78:	218d883a 	add	r6,r4,r6
10004c7c:	21800826 	beq	r4,r6,10004ca0 <memcmp+0x28>
10004c80:	20800003 	ldbu	r2,0(r4)
10004c84:	28c00003 	ldbu	r3,0(r5)
10004c88:	10c00226 	beq	r2,r3,10004c94 <memcmp+0x1c>
10004c8c:	10c5c83a 	sub	r2,r2,r3
10004c90:	f800283a 	ret
10004c94:	21000044 	addi	r4,r4,1
10004c98:	29400044 	addi	r5,r5,1
10004c9c:	003ff706 	br	10004c7c <__alt_data_end+0xf8004c7c>
10004ca0:	0005883a 	mov	r2,zero
10004ca4:	f800283a 	ret

10004ca8 <memcpy>:
10004ca8:	2005883a 	mov	r2,r4
10004cac:	2007883a 	mov	r3,r4
10004cb0:	218d883a 	add	r6,r4,r6
10004cb4:	19800526 	beq	r3,r6,10004ccc <memcpy+0x24>
10004cb8:	29000003 	ldbu	r4,0(r5)
10004cbc:	18c00044 	addi	r3,r3,1
10004cc0:	29400044 	addi	r5,r5,1
10004cc4:	193fffc5 	stb	r4,-1(r3)
10004cc8:	003ffa06 	br	10004cb4 <__alt_data_end+0xf8004cb4>
10004ccc:	f800283a 	ret

10004cd0 <__register_exitproc>:
10004cd0:	00840034 	movhi	r2,4096
10004cd4:	109aaa04 	addi	r2,r2,27304
10004cd8:	10c00017 	ldw	r3,0(r2)
10004cdc:	defff904 	addi	sp,sp,-28
10004ce0:	dc000015 	stw	r16,0(sp)
10004ce4:	1c000c17 	ldw	r16,48(r3)
10004ce8:	dd400515 	stw	r21,20(sp)
10004cec:	dd000415 	stw	r20,16(sp)
10004cf0:	dcc00315 	stw	r19,12(sp)
10004cf4:	dc800215 	stw	r18,8(sp)
10004cf8:	dc400115 	stw	r17,4(sp)
10004cfc:	dfc00615 	stw	ra,24(sp)
10004d00:	202b883a 	mov	r21,r4
10004d04:	2823883a 	mov	r17,r5
10004d08:	3027883a 	mov	r19,r6
10004d0c:	3825883a 	mov	r18,r7
10004d10:	1029883a 	mov	r20,r2
10004d14:	8000021e 	bne	r16,zero,10004d20 <__register_exitproc+0x50>
10004d18:	1c000d04 	addi	r16,r3,52
10004d1c:	1c000c15 	stw	r16,48(r3)
10004d20:	80800117 	ldw	r2,4(r16)
10004d24:	00c007c4 	movi	r3,31
10004d28:	1880110e 	bge	r3,r2,10004d70 <__register_exitproc+0xa0>
10004d2c:	00800034 	movhi	r2,0
10004d30:	10800004 	addi	r2,r2,0
10004d34:	1000021e 	bne	r2,zero,10004d40 <__register_exitproc+0x70>
10004d38:	00bfffc4 	movi	r2,-1
10004d3c:	00003106 	br	10004e04 <__register_exitproc+0x134>
10004d40:	01002304 	movi	r4,140
10004d44:	00000000 	call	10000000 <__alt_mem_sdram>
10004d48:	1021883a 	mov	r16,r2
10004d4c:	103ffa26 	beq	r2,zero,10004d38 <__alt_data_end+0xf8004d38>
10004d50:	10000115 	stw	zero,4(r2)
10004d54:	a0800017 	ldw	r2,0(r20)
10004d58:	10c00c17 	ldw	r3,48(r2)
10004d5c:	80c00015 	stw	r3,0(r16)
10004d60:	14000c15 	stw	r16,48(r2)
10004d64:	80002215 	stw	zero,136(r16)
10004d68:	a8001d26 	beq	r21,zero,10004de0 <__register_exitproc+0x110>
10004d6c:	00000606 	br	10004d88 <__register_exitproc+0xb8>
10004d70:	a8001b26 	beq	r21,zero,10004de0 <__register_exitproc+0x110>
10004d74:	80802217 	ldw	r2,136(r16)
10004d78:	1000091e 	bne	r2,zero,10004da0 <__register_exitproc+0xd0>
10004d7c:	00800034 	movhi	r2,0
10004d80:	10800004 	addi	r2,r2,0
10004d84:	103fec26 	beq	r2,zero,10004d38 <__alt_data_end+0xf8004d38>
10004d88:	01004204 	movi	r4,264
10004d8c:	00000000 	call	10000000 <__alt_mem_sdram>
10004d90:	103fe926 	beq	r2,zero,10004d38 <__alt_data_end+0xf8004d38>
10004d94:	10004015 	stw	zero,256(r2)
10004d98:	10004115 	stw	zero,260(r2)
10004d9c:	80802215 	stw	r2,136(r16)
10004da0:	81400117 	ldw	r5,4(r16)
10004da4:	01000044 	movi	r4,1
10004da8:	2947883a 	add	r3,r5,r5
10004dac:	18c7883a 	add	r3,r3,r3
10004db0:	10c7883a 	add	r3,r2,r3
10004db4:	1cc00015 	stw	r19,0(r3)
10004db8:	2148983a 	sll	r4,r4,r5
10004dbc:	11404017 	ldw	r5,256(r2)
10004dc0:	290ab03a 	or	r5,r5,r4
10004dc4:	11404015 	stw	r5,256(r2)
10004dc8:	1c802015 	stw	r18,128(r3)
10004dcc:	00c00084 	movi	r3,2
10004dd0:	a8c0031e 	bne	r21,r3,10004de0 <__register_exitproc+0x110>
10004dd4:	10c04117 	ldw	r3,260(r2)
10004dd8:	1908b03a 	or	r4,r3,r4
10004ddc:	11004115 	stw	r4,260(r2)
10004de0:	80800117 	ldw	r2,4(r16)
10004de4:	10c00044 	addi	r3,r2,1
10004de8:	10800084 	addi	r2,r2,2
10004dec:	1085883a 	add	r2,r2,r2
10004df0:	1085883a 	add	r2,r2,r2
10004df4:	80c00115 	stw	r3,4(r16)
10004df8:	80a1883a 	add	r16,r16,r2
10004dfc:	84400015 	stw	r17,0(r16)
10004e00:	0005883a 	mov	r2,zero
10004e04:	dfc00617 	ldw	ra,24(sp)
10004e08:	dd400517 	ldw	r21,20(sp)
10004e0c:	dd000417 	ldw	r20,16(sp)
10004e10:	dcc00317 	ldw	r19,12(sp)
10004e14:	dc800217 	ldw	r18,8(sp)
10004e18:	dc400117 	ldw	r17,4(sp)
10004e1c:	dc000017 	ldw	r16,0(sp)
10004e20:	dec00704 	addi	sp,sp,28
10004e24:	f800283a 	ret

10004e28 <__call_exitprocs>:
10004e28:	defff504 	addi	sp,sp,-44
10004e2c:	dd000515 	stw	r20,20(sp)
10004e30:	05040034 	movhi	r20,4096
10004e34:	dc800315 	stw	r18,12(sp)
10004e38:	dfc00a15 	stw	ra,40(sp)
10004e3c:	df000915 	stw	fp,36(sp)
10004e40:	ddc00815 	stw	r23,32(sp)
10004e44:	dd800715 	stw	r22,28(sp)
10004e48:	dd400615 	stw	r21,24(sp)
10004e4c:	dcc00415 	stw	r19,16(sp)
10004e50:	dc400215 	stw	r17,8(sp)
10004e54:	dc000115 	stw	r16,4(sp)
10004e58:	d9000015 	stw	r4,0(sp)
10004e5c:	2825883a 	mov	r18,r5
10004e60:	a51aaa04 	addi	r20,r20,27304
10004e64:	a4400017 	ldw	r17,0(r20)
10004e68:	8cc00c17 	ldw	r19,48(r17)
10004e6c:	8c400c04 	addi	r17,r17,48
10004e70:	98004526 	beq	r19,zero,10004f88 <__call_exitprocs+0x160>
10004e74:	9c000117 	ldw	r16,4(r19)
10004e78:	00900034 	movhi	r2,16384
10004e7c:	10bfffc4 	addi	r2,r2,-1
10004e80:	9d402217 	ldw	r21,136(r19)
10004e84:	85bfffc4 	addi	r22,r16,-1
10004e88:	80a1883a 	add	r16,r16,r2
10004e8c:	8421883a 	add	r16,r16,r16
10004e90:	8421883a 	add	r16,r16,r16
10004e94:	ac2f883a 	add	r23,r21,r16
10004e98:	84000204 	addi	r16,r16,8
10004e9c:	9c21883a 	add	r16,r19,r16
10004ea0:	b0002716 	blt	r22,zero,10004f40 <__call_exitprocs+0x118>
10004ea4:	90000726 	beq	r18,zero,10004ec4 <__call_exitprocs+0x9c>
10004ea8:	a800041e 	bne	r21,zero,10004ebc <__call_exitprocs+0x94>
10004eac:	b5bfffc4 	addi	r22,r22,-1
10004eb0:	bdffff04 	addi	r23,r23,-4
10004eb4:	843fff04 	addi	r16,r16,-4
10004eb8:	003ff906 	br	10004ea0 <__alt_data_end+0xf8004ea0>
10004ebc:	b9002017 	ldw	r4,128(r23)
10004ec0:	913ffa1e 	bne	r18,r4,10004eac <__alt_data_end+0xf8004eac>
10004ec4:	99000117 	ldw	r4,4(r19)
10004ec8:	82000017 	ldw	r8,0(r16)
10004ecc:	213fffc4 	addi	r4,r4,-1
10004ed0:	b100021e 	bne	r22,r4,10004edc <__call_exitprocs+0xb4>
10004ed4:	9d800115 	stw	r22,4(r19)
10004ed8:	00000106 	br	10004ee0 <__call_exitprocs+0xb8>
10004edc:	80000015 	stw	zero,0(r16)
10004ee0:	403ff226 	beq	r8,zero,10004eac <__alt_data_end+0xf8004eac>
10004ee4:	9f000117 	ldw	fp,4(r19)
10004ee8:	a8000526 	beq	r21,zero,10004f00 <__call_exitprocs+0xd8>
10004eec:	00800044 	movi	r2,1
10004ef0:	1592983a 	sll	r9,r2,r22
10004ef4:	a9404017 	ldw	r5,256(r21)
10004ef8:	494a703a 	and	r5,r9,r5
10004efc:	2800021e 	bne	r5,zero,10004f08 <__call_exitprocs+0xe0>
10004f00:	403ee83a 	callr	r8
10004f04:	00000906 	br	10004f2c <__call_exitprocs+0x104>
10004f08:	a9004117 	ldw	r4,260(r21)
10004f0c:	4908703a 	and	r4,r9,r4
10004f10:	2000041e 	bne	r4,zero,10004f24 <__call_exitprocs+0xfc>
10004f14:	b9400017 	ldw	r5,0(r23)
10004f18:	d9000017 	ldw	r4,0(sp)
10004f1c:	403ee83a 	callr	r8
10004f20:	00000206 	br	10004f2c <__call_exitprocs+0x104>
10004f24:	b9000017 	ldw	r4,0(r23)
10004f28:	403ee83a 	callr	r8
10004f2c:	99000117 	ldw	r4,4(r19)
10004f30:	e13fcc1e 	bne	fp,r4,10004e64 <__alt_data_end+0xf8004e64>
10004f34:	89000017 	ldw	r4,0(r17)
10004f38:	993fdc26 	beq	r19,r4,10004eac <__alt_data_end+0xf8004eac>
10004f3c:	003fc906 	br	10004e64 <__alt_data_end+0xf8004e64>
10004f40:	00800034 	movhi	r2,0
10004f44:	10800004 	addi	r2,r2,0
10004f48:	10000f26 	beq	r2,zero,10004f88 <__call_exitprocs+0x160>
10004f4c:	99400117 	ldw	r5,4(r19)
10004f50:	99000017 	ldw	r4,0(r19)
10004f54:	2800091e 	bne	r5,zero,10004f7c <__call_exitprocs+0x154>
10004f58:	20000826 	beq	r4,zero,10004f7c <__call_exitprocs+0x154>
10004f5c:	89000015 	stw	r4,0(r17)
10004f60:	a8000226 	beq	r21,zero,10004f6c <__call_exitprocs+0x144>
10004f64:	a809883a 	mov	r4,r21
10004f68:	00000000 	call	10000000 <__alt_mem_sdram>
10004f6c:	9809883a 	mov	r4,r19
10004f70:	00000000 	call	10000000 <__alt_mem_sdram>
10004f74:	8cc00017 	ldw	r19,0(r17)
10004f78:	003fbd06 	br	10004e70 <__alt_data_end+0xf8004e70>
10004f7c:	9823883a 	mov	r17,r19
10004f80:	2027883a 	mov	r19,r4
10004f84:	003fba06 	br	10004e70 <__alt_data_end+0xf8004e70>
10004f88:	dfc00a17 	ldw	ra,40(sp)
10004f8c:	df000917 	ldw	fp,36(sp)
10004f90:	ddc00817 	ldw	r23,32(sp)
10004f94:	dd800717 	ldw	r22,28(sp)
10004f98:	dd400617 	ldw	r21,24(sp)
10004f9c:	dd000517 	ldw	r20,20(sp)
10004fa0:	dcc00417 	ldw	r19,16(sp)
10004fa4:	dc800317 	ldw	r18,12(sp)
10004fa8:	dc400217 	ldw	r17,8(sp)
10004fac:	dc000117 	ldw	r16,4(sp)
10004fb0:	dec00b04 	addi	sp,sp,44
10004fb4:	f800283a 	ret

10004fb8 <_exit>:
10004fb8:	defffd04 	addi	sp,sp,-12
10004fbc:	df000215 	stw	fp,8(sp)
10004fc0:	df000204 	addi	fp,sp,8
10004fc4:	e13fff15 	stw	r4,-4(fp)
10004fc8:	0001883a 	nop
10004fcc:	e0bfff17 	ldw	r2,-4(fp)
10004fd0:	e0bffe15 	stw	r2,-8(fp)
10004fd4:	e0bffe17 	ldw	r2,-8(fp)
10004fd8:	10000226 	beq	r2,zero,10004fe4 <_exit+0x2c>
10004fdc:	002af070 	cmpltui	zero,zero,43969
10004fe0:	00000106 	br	10004fe8 <_exit+0x30>
10004fe4:	002af0b0 	cmpltui	zero,zero,43970
10004fe8:	003fff06 	br	10004fe8 <__alt_data_end+0xf8004fe8>
